
task_schedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fd4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c0  080011c0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080011c0  080011c0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c0  080011c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c0  080011c0  000111c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080011c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000001bc  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000d5c  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000050c  00000000  00000000  00020e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001e0  00000000  00000000  00021338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000150  00000000  00000000  00021518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002dbd  00000000  00000000  00021668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001b99  00000000  00000000  00024425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009ca4  00000000  00000000  00025fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000c88  00000000  00000000  0002fc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000308ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000060 	.word	0x20000060
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001164 	.word	0x08001164

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000064 	.word	0x20000064
 80001e4:	08001164 	.word	0x08001164

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>



}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <led_off+0x2c>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40020c14 	.word	0x40020c14

080002e4 <main>:

TCB_t user_tasks[MAX_TASKS];


int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	enable_processor_fault();
 80002e8:	f000 f922 	bl	8000530 <enable_processor_fault>

	init_schedular_stack(SCHED_STACK_START);
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <main+0x28>)
 80002ee:	f000 f88f 	bl	8000410 <init_schedular_stack>

	init_tasks_stack();
 80002f2:	f000 f893 	bl	800041c <init_tasks_stack>

	led_init_all();
 80002f6:	f7ff ff8b 	bl	8000210 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 f853 	bl	80003a8 <init_systick_timer>

	switch_sp_to_psp();
 8000302:	f000 f975 	bl	80005f0 <switch_sp_to_psp>

	task1_handler();
 8000306:	f000 f807 	bl	8000318 <task1_handler>
    /* Loop forever */
	for(;;);
 800030a:	e7fe      	b.n	800030a <main+0x26>
 800030c:	2001ec00 	.word	0x2001ec00

08000310 <idle_task>:
}

void idle_task(void){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
	while(1);
 8000314:	e7fe      	b.n	8000314 <idle_task+0x4>
	...

08000318 <task1_handler>:
}

void task1_handler(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 800031c:	200c      	movs	r0, #12
 800031e:	f7ff ffb1 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <task1_handler+0x20>)
 8000324:	f7ff ff60 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000328:	200c      	movs	r0, #12
 800032a:	f7ff ffc3 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <task1_handler+0x20>)
 8000330:	f7ff ff5a 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 8000334:	e7f2      	b.n	800031c <task1_handler+0x4>
 8000336:	bf00      	nop
 8000338:	001312d0 	.word	0x001312d0

0800033c <task2_handler>:
	}
}

void task2_handler(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 8000340:	200d      	movs	r0, #13
 8000342:	f7ff ff9f 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <task2_handler+0x20>)
 8000348:	f7ff ff4e 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 800034c:	200d      	movs	r0, #13
 800034e:	f7ff ffb1 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <task2_handler+0x20>)
 8000354:	f7ff ff48 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000358:	e7f2      	b.n	8000340 <task2_handler+0x4>
 800035a:	bf00      	nop
 800035c:	00098968 	.word	0x00098968

08000360 <task3_handler>:
		}
}
void task3_handler(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 8000364:	200f      	movs	r0, #15
 8000366:	f7ff ff8d 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <task3_handler+0x20>)
 800036c:	f7ff ff3c 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 8000370:	200f      	movs	r0, #15
 8000372:	f7ff ff9f 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 8000376:	4802      	ldr	r0, [pc, #8]	; (8000380 <task3_handler+0x20>)
 8000378:	f7ff ff36 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 800037c:	e7f2      	b.n	8000364 <task3_handler+0x4>
 800037e:	bf00      	nop
 8000380:	0004c4b4 	.word	0x0004c4b4

08000384 <task4_handler>:
		}
}
void task4_handler(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 8000388:	200e      	movs	r0, #14
 800038a:	f7ff ff7b 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <task4_handler+0x20>)
 8000390:	f7ff ff2a 	bl	80001e8 <delay>
		led_off(LED_RED);
 8000394:	200e      	movs	r0, #14
 8000396:	f7ff ff8d 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 800039a:	4802      	ldr	r0, [pc, #8]	; (80003a4 <task4_handler+0x20>)
 800039c:	f7ff ff24 	bl	80001e8 <delay>
		led_on(LED_RED);
 80003a0:	e7f2      	b.n	8000388 <task4_handler+0x4>
 80003a2:	bf00      	nop
 80003a4:	0002625a 	.word	0x0002625a

080003a8 <init_systick_timer>:
		}
}


void init_systick_timer(uint32_t tick_hz){
 80003a8:	b480      	push	{r7}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // SysTick Reload Value Register
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <init_systick_timer+0x5c>)
 80003b2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // SysTick Control and Status Register
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <init_systick_timer+0x60>)
 80003b6:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <init_systick_timer+0x64>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c0:	3b01      	subs	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]

	//Load the value into SVR
	*pSRVR |= count_value;
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	431a      	orrs	r2, r3
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= (1 << 1); // Enables SysTick exception request
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f043 0202 	orr.w	r2, r3, #2
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Indicates the clock source, processor clock source
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f043 0204 	orr.w	r2, r3, #4
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	601a      	str	r2, [r3, #0]

	//enable systick
	*pSCSR |= (1 << 0);//enables the counter
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f043 0201 	orr.w	r2, r3, #1
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	601a      	str	r2, [r3, #0]

}
 80003fa:	bf00      	nop
 80003fc:	371c      	adds	r7, #28
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	e000e014 	.word	0xe000e014
 8000408:	e000e010 	.word	0xe000e010
 800040c:	00f42400 	.word	0x00f42400

08000410 <init_schedular_stack>:

__attribute__((naked)) void init_schedular_stack(uint32_t sched_top_of_stack){
 8000410:	4603      	mov	r3, r0
	//__asm volatile("MSR MSP,R0");
	__asm volatile("MSR MSP,%0": : "r"(sched_top_of_stack) : );
 8000412:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 8000416:	4770      	bx	lr
}
 8000418:	bf00      	nop
	...

0800041c <init_tasks_stack>:




void init_tasks_stack(void){
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_RUNNING_STATE;
 8000422:	4b38      	ldr	r3, [pc, #224]	; (8000504 <init_tasks_stack+0xe8>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 8000428:	4b36      	ldr	r3, [pc, #216]	; (8000504 <init_tasks_stack+0xe8>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <init_tasks_stack+0xe8>)
 8000430:	2200      	movs	r2, #0
 8000432:	629a      	str	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 8000434:	4b33      	ldr	r3, [pc, #204]	; (8000504 <init_tasks_stack+0xe8>)
 8000436:	2200      	movs	r2, #0
 8000438:	639a      	str	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_RUNNING_STATE;
 800043a:	4b32      	ldr	r3, [pc, #200]	; (8000504 <init_tasks_stack+0xe8>)
 800043c:	2200      	movs	r2, #0
 800043e:	649a      	str	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <init_tasks_stack+0xe8>)
 8000442:	4a31      	ldr	r2, [pc, #196]	; (8000508 <init_tasks_stack+0xec>)
 8000444:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000446:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <init_tasks_stack+0xe8>)
 8000448:	4a30      	ldr	r2, [pc, #192]	; (800050c <init_tasks_stack+0xf0>)
 800044a:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800044c:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <init_tasks_stack+0xe8>)
 800044e:	4a30      	ldr	r2, [pc, #192]	; (8000510 <init_tasks_stack+0xf4>)
 8000450:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000452:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <init_tasks_stack+0xe8>)
 8000454:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <init_tasks_stack+0xf8>)
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000458:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <init_tasks_stack+0xe8>)
 800045a:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <init_tasks_stack+0xfc>)
 800045c:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 800045e:	4b29      	ldr	r3, [pc, #164]	; (8000504 <init_tasks_stack+0xe8>)
 8000460:	4a2e      	ldr	r2, [pc, #184]	; (800051c <init_tasks_stack+0x100>)
 8000462:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000464:	4b27      	ldr	r3, [pc, #156]	; (8000504 <init_tasks_stack+0xe8>)
 8000466:	4a2e      	ldr	r2, [pc, #184]	; (8000520 <init_tasks_stack+0x104>)
 8000468:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 800046a:	4b26      	ldr	r3, [pc, #152]	; (8000504 <init_tasks_stack+0xe8>)
 800046c:	4a2d      	ldr	r2, [pc, #180]	; (8000524 <init_tasks_stack+0x108>)
 800046e:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000470:	4b24      	ldr	r3, [pc, #144]	; (8000504 <init_tasks_stack+0xe8>)
 8000472:	4a2d      	ldr	r2, [pc, #180]	; (8000528 <init_tasks_stack+0x10c>)
 8000474:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000476:	4b23      	ldr	r3, [pc, #140]	; (8000504 <init_tasks_stack+0xe8>)
 8000478:	4a2c      	ldr	r2, [pc, #176]	; (800052c <init_tasks_stack+0x110>)
 800047a:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;
	for (int i = 0; i < MAX_TASKS; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	e037      	b.n	80004f2 <init_tasks_stack+0xd6>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000482:	4a20      	ldr	r2, [pc, #128]	; (8000504 <init_tasks_stack+0xe8>)
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	4413      	add	r3, r2
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3b04      	subs	r3, #4
 8000492:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800049a:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3b04      	subs	r3, #4
 80004a0:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;//0x01000000
 80004a2:	4a18      	ldr	r2, [pc, #96]	; (8000504 <init_tasks_stack+0xe8>)
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	011b      	lsls	r3, r3, #4
 80004a8:	4413      	add	r3, r2
 80004aa:	330c      	adds	r3, #12
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	461a      	mov	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3b04      	subs	r3, #4
 80004b8:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;//0x01000000
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f06f 0202 	mvn.w	r2, #2
 80004c0:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	e008      	b.n	80004da <init_tasks_stack+0xbe>
			pPSP--; //R0 - R12
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	3b04      	subs	r3, #4
 80004cc:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3301      	adds	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b0c      	cmp	r3, #12
 80004de:	ddf3      	ble.n	80004c8 <init_tasks_stack+0xac>
		}


		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4908      	ldr	r1, [pc, #32]	; (8000504 <init_tasks_stack+0xe8>)
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	011b      	lsls	r3, r3, #4
 80004e8:	440b      	add	r3, r1
 80004ea:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	2b04      	cmp	r3, #4
 80004f6:	ddc4      	ble.n	8000482 <init_tasks_stack+0x66>


	}

}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	2000007c 	.word	0x2000007c
 8000508:	2001f000 	.word	0x2001f000
 800050c:	20020000 	.word	0x20020000
 8000510:	2001fc00 	.word	0x2001fc00
 8000514:	2001f800 	.word	0x2001f800
 8000518:	2001f400 	.word	0x2001f400
 800051c:	08000311 	.word	0x08000311
 8000520:	08000319 	.word	0x08000319
 8000524:	0800033d 	.word	0x0800033d
 8000528:	08000361 	.word	0x08000361
 800052c:	08000385 	.word	0x08000385

08000530 <enable_processor_fault>:


void enable_processor_fault(void){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <enable_processor_fault+0x38>)
 8000538:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);//mem manage
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);//bus fault
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);//usage fault
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	e000ed24 	.word	0xe000ed24

0800056c <get_psp_value>:


uint32_t get_psp_value(void){
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <get_psp_value+0x18>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <get_psp_value+0x1c>)
 8000576:	011b      	lsls	r3, r3, #4
 8000578:	4413      	add	r3, r2
 800057a:	681b      	ldr	r3, [r3, #0]
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	20000000 	.word	0x20000000
 8000588:	2000007c 	.word	0x2000007c

0800058c <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <save_psp_value+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <save_psp_value+0x24>)
 800059a:	011b      	lsls	r3, r3, #4
 800059c:	4413      	add	r3, r2
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	20000000 	.word	0x20000000
 80005b0:	2000007c 	.word	0x2000007c

080005b4 <update_next_task>:

void update_next_task(){
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	current_task++;
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <update_next_task+0x34>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <update_next_task+0x34>)
 80005c2:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <update_next_task+0x34>)
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <update_next_task+0x38>)
 80005ca:	fba3 1302 	umull	r1, r3, r3, r2
 80005ce:	0899      	lsrs	r1, r3, #2
 80005d0:	460b      	mov	r3, r1
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <update_next_task+0x34>)
 80005dc:	701a      	strb	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	cccccccd 	.word	0xcccccccd

080005f0 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//1. initialize the PSP with TASK1 stack start
	//get the value if psp of current_task
	__asm volatile("PUSH {LR}");//preserved LR which connects back to main
 80005f0:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80005f2:	f7ff ffbb 	bl	800056c <get_psp_value>
	__asm volatile("MSR PSP, R0");//initialize psp
 80005f6:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");//pops back LR value
 80005fa:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0x02");
 80005fe:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 8000602:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000606:	4770      	bx	lr

}
 8000608:	bf00      	nop

0800060a <SysTick_Handler>:
	user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
}

__attribute__((naked)) void SysTick_Handler(void){
	//Save the context of current task
	__asm volatile("MRS R0,PSP");
 800060a:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!,{R4-R11}");
 800060e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 8000612:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 8000614:	f7ff ffba 	bl	800058c <save_psp_value>

	//Retrive the context of next task
	__asm volatile("BL update_next_task");
 8000618:	f7ff ffcc 	bl	80005b4 <update_next_task>
	__asm volatile("BL get_psp_value");
 800061c:	f7ff ffa6 	bl	800056c <get_psp_value>
	__asm volatile("LDMIA R0,{R4-R11}");
 8000620:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");
 8000624:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000628:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 800062c:	4770      	bx	lr

}
 800062e:	bf00      	nop

08000630 <HardFault_Handler>:

//Implement fault handlers
void HardFault_Handler(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 8000634:	4801      	ldr	r0, [pc, #4]	; (800063c <HardFault_Handler+0xc>)
 8000636:	f000 fa07 	bl	8000a48 <puts>
	while(1);
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0xa>
 800063c:	0800117c 	.word	0x0800117c

08000640 <MemManage_Handler>:
}
void MemManage_Handler(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	printf("Exception: MemManage\n");
 8000644:	4801      	ldr	r0, [pc, #4]	; (800064c <MemManage_Handler+0xc>)
 8000646:	f000 f9ff 	bl	8000a48 <puts>
	while(1);
 800064a:	e7fe      	b.n	800064a <MemManage_Handler+0xa>
 800064c:	08001194 	.word	0x08001194

08000650 <BusFault_Handler>:
}
void BusFault_Handler(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 8000654:	4801      	ldr	r0, [pc, #4]	; (800065c <BusFault_Handler+0xc>)
 8000656:	f000 f9f7 	bl	8000a48 <puts>
	while(1);
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0xa>
 800065c:	080011ac 	.word	0x080011ac

08000660 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <ITM_SendChar+0x44>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <ITM_SendChar+0x44>)
 8000670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000674:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <ITM_SendChar+0x48>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <ITM_SendChar+0x48>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000682:	bf00      	nop
 8000684:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0f8      	beq.n	8000684 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000692:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	6013      	str	r3, [r2, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000edfc 	.word	0xe000edfc
 80006a8:	e0000e00 	.word	0xe0000e00

080006ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e00a      	b.n	80006d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006be:	f3af 8000 	nop.w
 80006c2:	4601      	mov	r1, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	b2ca      	uxtb	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf0      	blt.n	80006be <_read+0x12>
  }

  return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e009      	b.n	800070c <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	60ba      	str	r2, [r7, #8]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffad 	bl	8000660 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3301      	adds	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	dbf1      	blt.n	80006f8 <_write+0x12>
  }
  return len;
 8000714:	687b      	ldr	r3, [r7, #4]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_close>:

int _close(int file)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000744:	605a      	str	r2, [r3, #4]
  return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <_isatty>:

int _isatty(int file)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000766:	b480      	push	{r7}
 8000768:	b085      	sub	sp, #20
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f000 fa78 	bl	8000ca4 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20020000 	.word	0x20020000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	200000cc 	.word	0x200000cc
 80007e8:	20000220 	.word	0x20000220

080007ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	; (800082c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LoopForever+0xe>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	; (8000838 <LoopForever+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081a:	f000 fa49 	bl	8000cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081e:	f7ff fd61 	bl	80002e4 <main>

08000822 <LoopForever>:

LoopForever:
  b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   r0, =_estack
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000830:	080011c8 	.word	0x080011c8
  ldr r2, =_sbss
 8000834:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000838:	2000021c 	.word	0x2000021c

0800083c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC_IRQHandler>
	...

08000840 <std>:
 8000840:	2300      	movs	r3, #0
 8000842:	b510      	push	{r4, lr}
 8000844:	4604      	mov	r4, r0
 8000846:	e9c0 3300 	strd	r3, r3, [r0]
 800084a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800084e:	6083      	str	r3, [r0, #8]
 8000850:	8181      	strh	r1, [r0, #12]
 8000852:	6643      	str	r3, [r0, #100]	; 0x64
 8000854:	81c2      	strh	r2, [r0, #14]
 8000856:	6183      	str	r3, [r0, #24]
 8000858:	4619      	mov	r1, r3
 800085a:	2208      	movs	r2, #8
 800085c:	305c      	adds	r0, #92	; 0x5c
 800085e:	f000 f9d3 	bl	8000c08 <memset>
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <std+0x38>)
 8000864:	6263      	str	r3, [r4, #36]	; 0x24
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <std+0x3c>)
 8000868:	62a3      	str	r3, [r4, #40]	; 0x28
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <std+0x40>)
 800086c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <std+0x44>)
 8000870:	6224      	str	r4, [r4, #32]
 8000872:	6323      	str	r3, [r4, #48]	; 0x30
 8000874:	bd10      	pop	{r4, pc}
 8000876:	bf00      	nop
 8000878:	08000a59 	.word	0x08000a59
 800087c:	08000a7b 	.word	0x08000a7b
 8000880:	08000ab3 	.word	0x08000ab3
 8000884:	08000ad7 	.word	0x08000ad7

08000888 <stdio_exit_handler>:
 8000888:	4a02      	ldr	r2, [pc, #8]	; (8000894 <stdio_exit_handler+0xc>)
 800088a:	4903      	ldr	r1, [pc, #12]	; (8000898 <stdio_exit_handler+0x10>)
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <stdio_exit_handler+0x14>)
 800088e:	f000 b869 	b.w	8000964 <_fwalk_sglue>
 8000892:	bf00      	nop
 8000894:	20000004 	.word	0x20000004
 8000898:	08000fed 	.word	0x08000fed
 800089c:	20000010 	.word	0x20000010

080008a0 <cleanup_stdio>:
 80008a0:	6841      	ldr	r1, [r0, #4]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <cleanup_stdio+0x34>)
 80008a4:	4299      	cmp	r1, r3
 80008a6:	b510      	push	{r4, lr}
 80008a8:	4604      	mov	r4, r0
 80008aa:	d001      	beq.n	80008b0 <cleanup_stdio+0x10>
 80008ac:	f000 fb9e 	bl	8000fec <_fflush_r>
 80008b0:	68a1      	ldr	r1, [r4, #8]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <cleanup_stdio+0x38>)
 80008b4:	4299      	cmp	r1, r3
 80008b6:	d002      	beq.n	80008be <cleanup_stdio+0x1e>
 80008b8:	4620      	mov	r0, r4
 80008ba:	f000 fb97 	bl	8000fec <_fflush_r>
 80008be:	68e1      	ldr	r1, [r4, #12]
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <cleanup_stdio+0x3c>)
 80008c2:	4299      	cmp	r1, r3
 80008c4:	d004      	beq.n	80008d0 <cleanup_stdio+0x30>
 80008c6:	4620      	mov	r0, r4
 80008c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008cc:	f000 bb8e 	b.w	8000fec <_fflush_r>
 80008d0:	bd10      	pop	{r4, pc}
 80008d2:	bf00      	nop
 80008d4:	200000d0 	.word	0x200000d0
 80008d8:	20000138 	.word	0x20000138
 80008dc:	200001a0 	.word	0x200001a0

080008e0 <global_stdio_init.part.0>:
 80008e0:	b510      	push	{r4, lr}
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <global_stdio_init.part.0+0x30>)
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <global_stdio_init.part.0+0x34>)
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <global_stdio_init.part.0+0x38>)
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	4620      	mov	r0, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	2104      	movs	r1, #4
 80008f0:	f7ff ffa6 	bl	8000840 <std>
 80008f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80008f8:	2201      	movs	r2, #1
 80008fa:	2109      	movs	r1, #9
 80008fc:	f7ff ffa0 	bl	8000840 <std>
 8000900:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000904:	2202      	movs	r2, #2
 8000906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800090a:	2112      	movs	r1, #18
 800090c:	f7ff bf98 	b.w	8000840 <std>
 8000910:	20000208 	.word	0x20000208
 8000914:	200000d0 	.word	0x200000d0
 8000918:	08000889 	.word	0x08000889

0800091c <__sfp_lock_acquire>:
 800091c:	4801      	ldr	r0, [pc, #4]	; (8000924 <__sfp_lock_acquire+0x8>)
 800091e:	f000 b9eb 	b.w	8000cf8 <__retarget_lock_acquire_recursive>
 8000922:	bf00      	nop
 8000924:	20000211 	.word	0x20000211

08000928 <__sfp_lock_release>:
 8000928:	4801      	ldr	r0, [pc, #4]	; (8000930 <__sfp_lock_release+0x8>)
 800092a:	f000 b9e6 	b.w	8000cfa <__retarget_lock_release_recursive>
 800092e:	bf00      	nop
 8000930:	20000211 	.word	0x20000211

08000934 <__sinit>:
 8000934:	b510      	push	{r4, lr}
 8000936:	4604      	mov	r4, r0
 8000938:	f7ff fff0 	bl	800091c <__sfp_lock_acquire>
 800093c:	6a23      	ldr	r3, [r4, #32]
 800093e:	b11b      	cbz	r3, 8000948 <__sinit+0x14>
 8000940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000944:	f7ff bff0 	b.w	8000928 <__sfp_lock_release>
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <__sinit+0x28>)
 800094a:	6223      	str	r3, [r4, #32]
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__sinit+0x2c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f5      	bne.n	8000940 <__sinit+0xc>
 8000954:	f7ff ffc4 	bl	80008e0 <global_stdio_init.part.0>
 8000958:	e7f2      	b.n	8000940 <__sinit+0xc>
 800095a:	bf00      	nop
 800095c:	080008a1 	.word	0x080008a1
 8000960:	20000208 	.word	0x20000208

08000964 <_fwalk_sglue>:
 8000964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000968:	4607      	mov	r7, r0
 800096a:	4688      	mov	r8, r1
 800096c:	4614      	mov	r4, r2
 800096e:	2600      	movs	r6, #0
 8000970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000974:	f1b9 0901 	subs.w	r9, r9, #1
 8000978:	d505      	bpl.n	8000986 <_fwalk_sglue+0x22>
 800097a:	6824      	ldr	r4, [r4, #0]
 800097c:	2c00      	cmp	r4, #0
 800097e:	d1f7      	bne.n	8000970 <_fwalk_sglue+0xc>
 8000980:	4630      	mov	r0, r6
 8000982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000986:	89ab      	ldrh	r3, [r5, #12]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d907      	bls.n	800099c <_fwalk_sglue+0x38>
 800098c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000990:	3301      	adds	r3, #1
 8000992:	d003      	beq.n	800099c <_fwalk_sglue+0x38>
 8000994:	4629      	mov	r1, r5
 8000996:	4638      	mov	r0, r7
 8000998:	47c0      	blx	r8
 800099a:	4306      	orrs	r6, r0
 800099c:	3568      	adds	r5, #104	; 0x68
 800099e:	e7e9      	b.n	8000974 <_fwalk_sglue+0x10>

080009a0 <_puts_r>:
 80009a0:	6a03      	ldr	r3, [r0, #32]
 80009a2:	b570      	push	{r4, r5, r6, lr}
 80009a4:	6884      	ldr	r4, [r0, #8]
 80009a6:	4605      	mov	r5, r0
 80009a8:	460e      	mov	r6, r1
 80009aa:	b90b      	cbnz	r3, 80009b0 <_puts_r+0x10>
 80009ac:	f7ff ffc2 	bl	8000934 <__sinit>
 80009b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009b2:	07db      	lsls	r3, r3, #31
 80009b4:	d405      	bmi.n	80009c2 <_puts_r+0x22>
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	0598      	lsls	r0, r3, #22
 80009ba:	d402      	bmi.n	80009c2 <_puts_r+0x22>
 80009bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009be:	f000 f99b 	bl	8000cf8 <__retarget_lock_acquire_recursive>
 80009c2:	89a3      	ldrh	r3, [r4, #12]
 80009c4:	0719      	lsls	r1, r3, #28
 80009c6:	d513      	bpl.n	80009f0 <_puts_r+0x50>
 80009c8:	6923      	ldr	r3, [r4, #16]
 80009ca:	b18b      	cbz	r3, 80009f0 <_puts_r+0x50>
 80009cc:	3e01      	subs	r6, #1
 80009ce:	68a3      	ldr	r3, [r4, #8]
 80009d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009d4:	3b01      	subs	r3, #1
 80009d6:	60a3      	str	r3, [r4, #8]
 80009d8:	b9e9      	cbnz	r1, 8000a16 <_puts_r+0x76>
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da2e      	bge.n	8000a3c <_puts_r+0x9c>
 80009de:	4622      	mov	r2, r4
 80009e0:	210a      	movs	r1, #10
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 f87b 	bl	8000ade <__swbuf_r>
 80009e8:	3001      	adds	r0, #1
 80009ea:	d007      	beq.n	80009fc <_puts_r+0x5c>
 80009ec:	250a      	movs	r5, #10
 80009ee:	e007      	b.n	8000a00 <_puts_r+0x60>
 80009f0:	4621      	mov	r1, r4
 80009f2:	4628      	mov	r0, r5
 80009f4:	f000 f8b0 	bl	8000b58 <__swsetup_r>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	d0e7      	beq.n	80009cc <_puts_r+0x2c>
 80009fc:	f04f 35ff 	mov.w	r5, #4294967295
 8000a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a02:	07da      	lsls	r2, r3, #31
 8000a04:	d405      	bmi.n	8000a12 <_puts_r+0x72>
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	059b      	lsls	r3, r3, #22
 8000a0a:	d402      	bmi.n	8000a12 <_puts_r+0x72>
 8000a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a0e:	f000 f974 	bl	8000cfa <__retarget_lock_release_recursive>
 8000a12:	4628      	mov	r0, r5
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da04      	bge.n	8000a24 <_puts_r+0x84>
 8000a1a:	69a2      	ldr	r2, [r4, #24]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dc06      	bgt.n	8000a2e <_puts_r+0x8e>
 8000a20:	290a      	cmp	r1, #10
 8000a22:	d004      	beq.n	8000a2e <_puts_r+0x8e>
 8000a24:	6823      	ldr	r3, [r4, #0]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	6022      	str	r2, [r4, #0]
 8000a2a:	7019      	strb	r1, [r3, #0]
 8000a2c:	e7cf      	b.n	80009ce <_puts_r+0x2e>
 8000a2e:	4622      	mov	r2, r4
 8000a30:	4628      	mov	r0, r5
 8000a32:	f000 f854 	bl	8000ade <__swbuf_r>
 8000a36:	3001      	adds	r0, #1
 8000a38:	d1c9      	bne.n	80009ce <_puts_r+0x2e>
 8000a3a:	e7df      	b.n	80009fc <_puts_r+0x5c>
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	250a      	movs	r5, #10
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	6022      	str	r2, [r4, #0]
 8000a44:	701d      	strb	r5, [r3, #0]
 8000a46:	e7db      	b.n	8000a00 <_puts_r+0x60>

08000a48 <puts>:
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <puts+0xc>)
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	f7ff bfa7 	b.w	80009a0 <_puts_r>
 8000a52:	bf00      	nop
 8000a54:	2000005c 	.word	0x2000005c

08000a58 <__sread>:
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	460c      	mov	r4, r1
 8000a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a60:	f000 f8fc 	bl	8000c5c <_read_r>
 8000a64:	2800      	cmp	r0, #0
 8000a66:	bfab      	itete	ge
 8000a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8000a6c:	181b      	addge	r3, r3, r0
 8000a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a72:	bfac      	ite	ge
 8000a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a76:	81a3      	strhlt	r3, [r4, #12]
 8000a78:	bd10      	pop	{r4, pc}

08000a7a <__swrite>:
 8000a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a7e:	461f      	mov	r7, r3
 8000a80:	898b      	ldrh	r3, [r1, #12]
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	4605      	mov	r5, r0
 8000a86:	460c      	mov	r4, r1
 8000a88:	4616      	mov	r6, r2
 8000a8a:	d505      	bpl.n	8000a98 <__swrite+0x1e>
 8000a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a90:	2302      	movs	r3, #2
 8000a92:	2200      	movs	r2, #0
 8000a94:	f000 f8d0 	bl	8000c38 <_lseek_r>
 8000a98:	89a3      	ldrh	r3, [r4, #12]
 8000a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aa2:	81a3      	strh	r3, [r4, #12]
 8000aa4:	4632      	mov	r2, r6
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000aae:	f000 b8e7 	b.w	8000c80 <_write_r>

08000ab2 <__sseek>:
 8000ab2:	b510      	push	{r4, lr}
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aba:	f000 f8bd 	bl	8000c38 <_lseek_r>
 8000abe:	1c43      	adds	r3, r0, #1
 8000ac0:	89a3      	ldrh	r3, [r4, #12]
 8000ac2:	bf15      	itete	ne
 8000ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ace:	81a3      	strheq	r3, [r4, #12]
 8000ad0:	bf18      	it	ne
 8000ad2:	81a3      	strhne	r3, [r4, #12]
 8000ad4:	bd10      	pop	{r4, pc}

08000ad6 <__sclose>:
 8000ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ada:	f000 b89d 	b.w	8000c18 <_close_r>

08000ade <__swbuf_r>:
 8000ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae0:	460e      	mov	r6, r1
 8000ae2:	4614      	mov	r4, r2
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	b118      	cbz	r0, 8000af0 <__swbuf_r+0x12>
 8000ae8:	6a03      	ldr	r3, [r0, #32]
 8000aea:	b90b      	cbnz	r3, 8000af0 <__swbuf_r+0x12>
 8000aec:	f7ff ff22 	bl	8000934 <__sinit>
 8000af0:	69a3      	ldr	r3, [r4, #24]
 8000af2:	60a3      	str	r3, [r4, #8]
 8000af4:	89a3      	ldrh	r3, [r4, #12]
 8000af6:	071a      	lsls	r2, r3, #28
 8000af8:	d525      	bpl.n	8000b46 <__swbuf_r+0x68>
 8000afa:	6923      	ldr	r3, [r4, #16]
 8000afc:	b31b      	cbz	r3, 8000b46 <__swbuf_r+0x68>
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	6922      	ldr	r2, [r4, #16]
 8000b02:	1a98      	subs	r0, r3, r2
 8000b04:	6963      	ldr	r3, [r4, #20]
 8000b06:	b2f6      	uxtb	r6, r6
 8000b08:	4283      	cmp	r3, r0
 8000b0a:	4637      	mov	r7, r6
 8000b0c:	dc04      	bgt.n	8000b18 <__swbuf_r+0x3a>
 8000b0e:	4621      	mov	r1, r4
 8000b10:	4628      	mov	r0, r5
 8000b12:	f000 fa6b 	bl	8000fec <_fflush_r>
 8000b16:	b9e0      	cbnz	r0, 8000b52 <__swbuf_r+0x74>
 8000b18:	68a3      	ldr	r3, [r4, #8]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	60a3      	str	r3, [r4, #8]
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	6022      	str	r2, [r4, #0]
 8000b24:	701e      	strb	r6, [r3, #0]
 8000b26:	6962      	ldr	r2, [r4, #20]
 8000b28:	1c43      	adds	r3, r0, #1
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d004      	beq.n	8000b38 <__swbuf_r+0x5a>
 8000b2e:	89a3      	ldrh	r3, [r4, #12]
 8000b30:	07db      	lsls	r3, r3, #31
 8000b32:	d506      	bpl.n	8000b42 <__swbuf_r+0x64>
 8000b34:	2e0a      	cmp	r6, #10
 8000b36:	d104      	bne.n	8000b42 <__swbuf_r+0x64>
 8000b38:	4621      	mov	r1, r4
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f000 fa56 	bl	8000fec <_fflush_r>
 8000b40:	b938      	cbnz	r0, 8000b52 <__swbuf_r+0x74>
 8000b42:	4638      	mov	r0, r7
 8000b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b46:	4621      	mov	r1, r4
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f000 f805 	bl	8000b58 <__swsetup_r>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	d0d5      	beq.n	8000afe <__swbuf_r+0x20>
 8000b52:	f04f 37ff 	mov.w	r7, #4294967295
 8000b56:	e7f4      	b.n	8000b42 <__swbuf_r+0x64>

08000b58 <__swsetup_r>:
 8000b58:	b538      	push	{r3, r4, r5, lr}
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <__swsetup_r+0xac>)
 8000b5c:	4605      	mov	r5, r0
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	460c      	mov	r4, r1
 8000b62:	b118      	cbz	r0, 8000b6c <__swsetup_r+0x14>
 8000b64:	6a03      	ldr	r3, [r0, #32]
 8000b66:	b90b      	cbnz	r3, 8000b6c <__swsetup_r+0x14>
 8000b68:	f7ff fee4 	bl	8000934 <__sinit>
 8000b6c:	89a3      	ldrh	r3, [r4, #12]
 8000b6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b72:	0718      	lsls	r0, r3, #28
 8000b74:	d422      	bmi.n	8000bbc <__swsetup_r+0x64>
 8000b76:	06d9      	lsls	r1, r3, #27
 8000b78:	d407      	bmi.n	8000b8a <__swsetup_r+0x32>
 8000b7a:	2309      	movs	r3, #9
 8000b7c:	602b      	str	r3, [r5, #0]
 8000b7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b82:	81a3      	strh	r3, [r4, #12]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	e034      	b.n	8000bf4 <__swsetup_r+0x9c>
 8000b8a:	0758      	lsls	r0, r3, #29
 8000b8c:	d512      	bpl.n	8000bb4 <__swsetup_r+0x5c>
 8000b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b90:	b141      	cbz	r1, 8000ba4 <__swsetup_r+0x4c>
 8000b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d002      	beq.n	8000ba0 <__swsetup_r+0x48>
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	f000 f8ae 	bl	8000cfc <_free_r>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	6363      	str	r3, [r4, #52]	; 0x34
 8000ba4:	89a3      	ldrh	r3, [r4, #12]
 8000ba6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000baa:	81a3      	strh	r3, [r4, #12]
 8000bac:	2300      	movs	r3, #0
 8000bae:	6063      	str	r3, [r4, #4]
 8000bb0:	6923      	ldr	r3, [r4, #16]
 8000bb2:	6023      	str	r3, [r4, #0]
 8000bb4:	89a3      	ldrh	r3, [r4, #12]
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	81a3      	strh	r3, [r4, #12]
 8000bbc:	6923      	ldr	r3, [r4, #16]
 8000bbe:	b94b      	cbnz	r3, 8000bd4 <__swsetup_r+0x7c>
 8000bc0:	89a3      	ldrh	r3, [r4, #12]
 8000bc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bca:	d003      	beq.n	8000bd4 <__swsetup_r+0x7c>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f000 fa5a 	bl	8001088 <__smakebuf_r>
 8000bd4:	89a0      	ldrh	r0, [r4, #12]
 8000bd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bda:	f010 0301 	ands.w	r3, r0, #1
 8000bde:	d00a      	beq.n	8000bf6 <__swsetup_r+0x9e>
 8000be0:	2300      	movs	r3, #0
 8000be2:	60a3      	str	r3, [r4, #8]
 8000be4:	6963      	ldr	r3, [r4, #20]
 8000be6:	425b      	negs	r3, r3
 8000be8:	61a3      	str	r3, [r4, #24]
 8000bea:	6923      	ldr	r3, [r4, #16]
 8000bec:	b943      	cbnz	r3, 8000c00 <__swsetup_r+0xa8>
 8000bee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bf2:	d1c4      	bne.n	8000b7e <__swsetup_r+0x26>
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
 8000bf6:	0781      	lsls	r1, r0, #30
 8000bf8:	bf58      	it	pl
 8000bfa:	6963      	ldrpl	r3, [r4, #20]
 8000bfc:	60a3      	str	r3, [r4, #8]
 8000bfe:	e7f4      	b.n	8000bea <__swsetup_r+0x92>
 8000c00:	2000      	movs	r0, #0
 8000c02:	e7f7      	b.n	8000bf4 <__swsetup_r+0x9c>
 8000c04:	2000005c 	.word	0x2000005c

08000c08 <memset>:
 8000c08:	4402      	add	r2, r0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d100      	bne.n	8000c12 <memset+0xa>
 8000c10:	4770      	bx	lr
 8000c12:	f803 1b01 	strb.w	r1, [r3], #1
 8000c16:	e7f9      	b.n	8000c0c <memset+0x4>

08000c18 <_close_r>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	4d06      	ldr	r5, [pc, #24]	; (8000c34 <_close_r+0x1c>)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4608      	mov	r0, r1
 8000c22:	602b      	str	r3, [r5, #0]
 8000c24:	f7ff fd7b 	bl	800071e <_close>
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	d102      	bne.n	8000c32 <_close_r+0x1a>
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	b103      	cbz	r3, 8000c32 <_close_r+0x1a>
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	bd38      	pop	{r3, r4, r5, pc}
 8000c34:	2000020c 	.word	0x2000020c

08000c38 <_lseek_r>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	4d07      	ldr	r5, [pc, #28]	; (8000c58 <_lseek_r+0x20>)
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	4611      	mov	r1, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	602a      	str	r2, [r5, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	f7ff fd8d 	bl	8000766 <_lseek>
 8000c4c:	1c43      	adds	r3, r0, #1
 8000c4e:	d102      	bne.n	8000c56 <_lseek_r+0x1e>
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	b103      	cbz	r3, 8000c56 <_lseek_r+0x1e>
 8000c54:	6023      	str	r3, [r4, #0]
 8000c56:	bd38      	pop	{r3, r4, r5, pc}
 8000c58:	2000020c 	.word	0x2000020c

08000c5c <_read_r>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4d07      	ldr	r5, [pc, #28]	; (8000c7c <_read_r+0x20>)
 8000c60:	4604      	mov	r4, r0
 8000c62:	4608      	mov	r0, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	602a      	str	r2, [r5, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f7ff fd1e 	bl	80006ac <_read>
 8000c70:	1c43      	adds	r3, r0, #1
 8000c72:	d102      	bne.n	8000c7a <_read_r+0x1e>
 8000c74:	682b      	ldr	r3, [r5, #0]
 8000c76:	b103      	cbz	r3, 8000c7a <_read_r+0x1e>
 8000c78:	6023      	str	r3, [r4, #0]
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	2000020c 	.word	0x2000020c

08000c80 <_write_r>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	4d07      	ldr	r5, [pc, #28]	; (8000ca0 <_write_r+0x20>)
 8000c84:	4604      	mov	r4, r0
 8000c86:	4608      	mov	r0, r1
 8000c88:	4611      	mov	r1, r2
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	602a      	str	r2, [r5, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f7ff fd29 	bl	80006e6 <_write>
 8000c94:	1c43      	adds	r3, r0, #1
 8000c96:	d102      	bne.n	8000c9e <_write_r+0x1e>
 8000c98:	682b      	ldr	r3, [r5, #0]
 8000c9a:	b103      	cbz	r3, 8000c9e <_write_r+0x1e>
 8000c9c:	6023      	str	r3, [r4, #0]
 8000c9e:	bd38      	pop	{r3, r4, r5, pc}
 8000ca0:	2000020c 	.word	0x2000020c

08000ca4 <__errno>:
 8000ca4:	4b01      	ldr	r3, [pc, #4]	; (8000cac <__errno+0x8>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000005c 	.word	0x2000005c

08000cb0 <__libc_init_array>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	4d0d      	ldr	r5, [pc, #52]	; (8000ce8 <__libc_init_array+0x38>)
 8000cb4:	4c0d      	ldr	r4, [pc, #52]	; (8000cec <__libc_init_array+0x3c>)
 8000cb6:	1b64      	subs	r4, r4, r5
 8000cb8:	10a4      	asrs	r4, r4, #2
 8000cba:	2600      	movs	r6, #0
 8000cbc:	42a6      	cmp	r6, r4
 8000cbe:	d109      	bne.n	8000cd4 <__libc_init_array+0x24>
 8000cc0:	4d0b      	ldr	r5, [pc, #44]	; (8000cf0 <__libc_init_array+0x40>)
 8000cc2:	4c0c      	ldr	r4, [pc, #48]	; (8000cf4 <__libc_init_array+0x44>)
 8000cc4:	f000 fa4e 	bl	8001164 <_init>
 8000cc8:	1b64      	subs	r4, r4, r5
 8000cca:	10a4      	asrs	r4, r4, #2
 8000ccc:	2600      	movs	r6, #0
 8000cce:	42a6      	cmp	r6, r4
 8000cd0:	d105      	bne.n	8000cde <__libc_init_array+0x2e>
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd8:	4798      	blx	r3
 8000cda:	3601      	adds	r6, #1
 8000cdc:	e7ee      	b.n	8000cbc <__libc_init_array+0xc>
 8000cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce2:	4798      	blx	r3
 8000ce4:	3601      	adds	r6, #1
 8000ce6:	e7f2      	b.n	8000cce <__libc_init_array+0x1e>
 8000ce8:	080011c0 	.word	0x080011c0
 8000cec:	080011c0 	.word	0x080011c0
 8000cf0:	080011c0 	.word	0x080011c0
 8000cf4:	080011c4 	.word	0x080011c4

08000cf8 <__retarget_lock_acquire_recursive>:
 8000cf8:	4770      	bx	lr

08000cfa <__retarget_lock_release_recursive>:
 8000cfa:	4770      	bx	lr

08000cfc <_free_r>:
 8000cfc:	b538      	push	{r3, r4, r5, lr}
 8000cfe:	4605      	mov	r5, r0
 8000d00:	2900      	cmp	r1, #0
 8000d02:	d041      	beq.n	8000d88 <_free_r+0x8c>
 8000d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d08:	1f0c      	subs	r4, r1, #4
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bfb8      	it	lt
 8000d0e:	18e4      	addlt	r4, r4, r3
 8000d10:	f000 f8de 	bl	8000ed0 <__malloc_lock>
 8000d14:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <_free_r+0x90>)
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	b933      	cbnz	r3, 8000d28 <_free_r+0x2c>
 8000d1a:	6063      	str	r3, [r4, #4]
 8000d1c:	6014      	str	r4, [r2, #0]
 8000d1e:	4628      	mov	r0, r5
 8000d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d24:	f000 b8da 	b.w	8000edc <__malloc_unlock>
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	d908      	bls.n	8000d3e <_free_r+0x42>
 8000d2c:	6820      	ldr	r0, [r4, #0]
 8000d2e:	1821      	adds	r1, r4, r0
 8000d30:	428b      	cmp	r3, r1
 8000d32:	bf01      	itttt	eq
 8000d34:	6819      	ldreq	r1, [r3, #0]
 8000d36:	685b      	ldreq	r3, [r3, #4]
 8000d38:	1809      	addeq	r1, r1, r0
 8000d3a:	6021      	streq	r1, [r4, #0]
 8000d3c:	e7ed      	b.n	8000d1a <_free_r+0x1e>
 8000d3e:	461a      	mov	r2, r3
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	b10b      	cbz	r3, 8000d48 <_free_r+0x4c>
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d9fa      	bls.n	8000d3e <_free_r+0x42>
 8000d48:	6811      	ldr	r1, [r2, #0]
 8000d4a:	1850      	adds	r0, r2, r1
 8000d4c:	42a0      	cmp	r0, r4
 8000d4e:	d10b      	bne.n	8000d68 <_free_r+0x6c>
 8000d50:	6820      	ldr	r0, [r4, #0]
 8000d52:	4401      	add	r1, r0
 8000d54:	1850      	adds	r0, r2, r1
 8000d56:	4283      	cmp	r3, r0
 8000d58:	6011      	str	r1, [r2, #0]
 8000d5a:	d1e0      	bne.n	8000d1e <_free_r+0x22>
 8000d5c:	6818      	ldr	r0, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	6053      	str	r3, [r2, #4]
 8000d62:	4408      	add	r0, r1
 8000d64:	6010      	str	r0, [r2, #0]
 8000d66:	e7da      	b.n	8000d1e <_free_r+0x22>
 8000d68:	d902      	bls.n	8000d70 <_free_r+0x74>
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	602b      	str	r3, [r5, #0]
 8000d6e:	e7d6      	b.n	8000d1e <_free_r+0x22>
 8000d70:	6820      	ldr	r0, [r4, #0]
 8000d72:	1821      	adds	r1, r4, r0
 8000d74:	428b      	cmp	r3, r1
 8000d76:	bf04      	itt	eq
 8000d78:	6819      	ldreq	r1, [r3, #0]
 8000d7a:	685b      	ldreq	r3, [r3, #4]
 8000d7c:	6063      	str	r3, [r4, #4]
 8000d7e:	bf04      	itt	eq
 8000d80:	1809      	addeq	r1, r1, r0
 8000d82:	6021      	streq	r1, [r4, #0]
 8000d84:	6054      	str	r4, [r2, #4]
 8000d86:	e7ca      	b.n	8000d1e <_free_r+0x22>
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000214 	.word	0x20000214

08000d90 <sbrk_aligned>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	4e0e      	ldr	r6, [pc, #56]	; (8000dcc <sbrk_aligned+0x3c>)
 8000d94:	460c      	mov	r4, r1
 8000d96:	6831      	ldr	r1, [r6, #0]
 8000d98:	4605      	mov	r5, r0
 8000d9a:	b911      	cbnz	r1, 8000da2 <sbrk_aligned+0x12>
 8000d9c:	f000 f9d2 	bl	8001144 <_sbrk_r>
 8000da0:	6030      	str	r0, [r6, #0]
 8000da2:	4621      	mov	r1, r4
 8000da4:	4628      	mov	r0, r5
 8000da6:	f000 f9cd 	bl	8001144 <_sbrk_r>
 8000daa:	1c43      	adds	r3, r0, #1
 8000dac:	d00a      	beq.n	8000dc4 <sbrk_aligned+0x34>
 8000dae:	1cc4      	adds	r4, r0, #3
 8000db0:	f024 0403 	bic.w	r4, r4, #3
 8000db4:	42a0      	cmp	r0, r4
 8000db6:	d007      	beq.n	8000dc8 <sbrk_aligned+0x38>
 8000db8:	1a21      	subs	r1, r4, r0
 8000dba:	4628      	mov	r0, r5
 8000dbc:	f000 f9c2 	bl	8001144 <_sbrk_r>
 8000dc0:	3001      	adds	r0, #1
 8000dc2:	d101      	bne.n	8000dc8 <sbrk_aligned+0x38>
 8000dc4:	f04f 34ff 	mov.w	r4, #4294967295
 8000dc8:	4620      	mov	r0, r4
 8000dca:	bd70      	pop	{r4, r5, r6, pc}
 8000dcc:	20000218 	.word	0x20000218

08000dd0 <_malloc_r>:
 8000dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dd4:	1ccd      	adds	r5, r1, #3
 8000dd6:	f025 0503 	bic.w	r5, r5, #3
 8000dda:	3508      	adds	r5, #8
 8000ddc:	2d0c      	cmp	r5, #12
 8000dde:	bf38      	it	cc
 8000de0:	250c      	movcc	r5, #12
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	4607      	mov	r7, r0
 8000de6:	db01      	blt.n	8000dec <_malloc_r+0x1c>
 8000de8:	42a9      	cmp	r1, r5
 8000dea:	d905      	bls.n	8000df8 <_malloc_r+0x28>
 8000dec:	230c      	movs	r3, #12
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	2600      	movs	r6, #0
 8000df2:	4630      	mov	r0, r6
 8000df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ecc <_malloc_r+0xfc>
 8000dfc:	f000 f868 	bl	8000ed0 <__malloc_lock>
 8000e00:	f8d8 3000 	ldr.w	r3, [r8]
 8000e04:	461c      	mov	r4, r3
 8000e06:	bb5c      	cbnz	r4, 8000e60 <_malloc_r+0x90>
 8000e08:	4629      	mov	r1, r5
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	f7ff ffc0 	bl	8000d90 <sbrk_aligned>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	4604      	mov	r4, r0
 8000e14:	d155      	bne.n	8000ec2 <_malloc_r+0xf2>
 8000e16:	f8d8 4000 	ldr.w	r4, [r8]
 8000e1a:	4626      	mov	r6, r4
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d145      	bne.n	8000eac <_malloc_r+0xdc>
 8000e20:	2c00      	cmp	r4, #0
 8000e22:	d048      	beq.n	8000eb6 <_malloc_r+0xe6>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	4631      	mov	r1, r6
 8000e28:	4638      	mov	r0, r7
 8000e2a:	eb04 0903 	add.w	r9, r4, r3
 8000e2e:	f000 f989 	bl	8001144 <_sbrk_r>
 8000e32:	4581      	cmp	r9, r0
 8000e34:	d13f      	bne.n	8000eb6 <_malloc_r+0xe6>
 8000e36:	6821      	ldr	r1, [r4, #0]
 8000e38:	1a6d      	subs	r5, r5, r1
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	f7ff ffa7 	bl	8000d90 <sbrk_aligned>
 8000e42:	3001      	adds	r0, #1
 8000e44:	d037      	beq.n	8000eb6 <_malloc_r+0xe6>
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	442b      	add	r3, r5
 8000e4a:	6023      	str	r3, [r4, #0]
 8000e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d038      	beq.n	8000ec6 <_malloc_r+0xf6>
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	42a2      	cmp	r2, r4
 8000e58:	d12b      	bne.n	8000eb2 <_malloc_r+0xe2>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	e00f      	b.n	8000e80 <_malloc_r+0xb0>
 8000e60:	6822      	ldr	r2, [r4, #0]
 8000e62:	1b52      	subs	r2, r2, r5
 8000e64:	d41f      	bmi.n	8000ea6 <_malloc_r+0xd6>
 8000e66:	2a0b      	cmp	r2, #11
 8000e68:	d917      	bls.n	8000e9a <_malloc_r+0xca>
 8000e6a:	1961      	adds	r1, r4, r5
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	6025      	str	r5, [r4, #0]
 8000e70:	bf18      	it	ne
 8000e72:	6059      	strne	r1, [r3, #4]
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	bf08      	it	eq
 8000e78:	f8c8 1000 	streq.w	r1, [r8]
 8000e7c:	5162      	str	r2, [r4, r5]
 8000e7e:	604b      	str	r3, [r1, #4]
 8000e80:	4638      	mov	r0, r7
 8000e82:	f104 060b 	add.w	r6, r4, #11
 8000e86:	f000 f829 	bl	8000edc <__malloc_unlock>
 8000e8a:	f026 0607 	bic.w	r6, r6, #7
 8000e8e:	1d23      	adds	r3, r4, #4
 8000e90:	1af2      	subs	r2, r6, r3
 8000e92:	d0ae      	beq.n	8000df2 <_malloc_r+0x22>
 8000e94:	1b9b      	subs	r3, r3, r6
 8000e96:	50a3      	str	r3, [r4, r2]
 8000e98:	e7ab      	b.n	8000df2 <_malloc_r+0x22>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	6862      	ldr	r2, [r4, #4]
 8000e9e:	d1dd      	bne.n	8000e5c <_malloc_r+0x8c>
 8000ea0:	f8c8 2000 	str.w	r2, [r8]
 8000ea4:	e7ec      	b.n	8000e80 <_malloc_r+0xb0>
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	6864      	ldr	r4, [r4, #4]
 8000eaa:	e7ac      	b.n	8000e06 <_malloc_r+0x36>
 8000eac:	4634      	mov	r4, r6
 8000eae:	6876      	ldr	r6, [r6, #4]
 8000eb0:	e7b4      	b.n	8000e1c <_malloc_r+0x4c>
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7cc      	b.n	8000e50 <_malloc_r+0x80>
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4638      	mov	r0, r7
 8000ebc:	f000 f80e 	bl	8000edc <__malloc_unlock>
 8000ec0:	e797      	b.n	8000df2 <_malloc_r+0x22>
 8000ec2:	6025      	str	r5, [r4, #0]
 8000ec4:	e7dc      	b.n	8000e80 <_malloc_r+0xb0>
 8000ec6:	605b      	str	r3, [r3, #4]
 8000ec8:	deff      	udf	#255	; 0xff
 8000eca:	bf00      	nop
 8000ecc:	20000214 	.word	0x20000214

08000ed0 <__malloc_lock>:
 8000ed0:	4801      	ldr	r0, [pc, #4]	; (8000ed8 <__malloc_lock+0x8>)
 8000ed2:	f7ff bf11 	b.w	8000cf8 <__retarget_lock_acquire_recursive>
 8000ed6:	bf00      	nop
 8000ed8:	20000210 	.word	0x20000210

08000edc <__malloc_unlock>:
 8000edc:	4801      	ldr	r0, [pc, #4]	; (8000ee4 <__malloc_unlock+0x8>)
 8000ede:	f7ff bf0c 	b.w	8000cfa <__retarget_lock_release_recursive>
 8000ee2:	bf00      	nop
 8000ee4:	20000210 	.word	0x20000210

08000ee8 <__sflush_r>:
 8000ee8:	898a      	ldrh	r2, [r1, #12]
 8000eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eec:	4605      	mov	r5, r0
 8000eee:	0710      	lsls	r0, r2, #28
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	d457      	bmi.n	8000fa4 <__sflush_r+0xbc>
 8000ef4:	684b      	ldr	r3, [r1, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	dc04      	bgt.n	8000f04 <__sflush_r+0x1c>
 8000efa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dc01      	bgt.n	8000f04 <__sflush_r+0x1c>
 8000f00:	2000      	movs	r0, #0
 8000f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f06:	2e00      	cmp	r6, #0
 8000f08:	d0fa      	beq.n	8000f00 <__sflush_r+0x18>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f10:	682f      	ldr	r7, [r5, #0]
 8000f12:	6a21      	ldr	r1, [r4, #32]
 8000f14:	602b      	str	r3, [r5, #0]
 8000f16:	d032      	beq.n	8000f7e <__sflush_r+0x96>
 8000f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f1a:	89a3      	ldrh	r3, [r4, #12]
 8000f1c:	075a      	lsls	r2, r3, #29
 8000f1e:	d505      	bpl.n	8000f2c <__sflush_r+0x44>
 8000f20:	6863      	ldr	r3, [r4, #4]
 8000f22:	1ac0      	subs	r0, r0, r3
 8000f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f26:	b10b      	cbz	r3, 8000f2c <__sflush_r+0x44>
 8000f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f2a:	1ac0      	subs	r0, r0, r3
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	4602      	mov	r2, r0
 8000f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f32:	6a21      	ldr	r1, [r4, #32]
 8000f34:	4628      	mov	r0, r5
 8000f36:	47b0      	blx	r6
 8000f38:	1c43      	adds	r3, r0, #1
 8000f3a:	89a3      	ldrh	r3, [r4, #12]
 8000f3c:	d106      	bne.n	8000f4c <__sflush_r+0x64>
 8000f3e:	6829      	ldr	r1, [r5, #0]
 8000f40:	291d      	cmp	r1, #29
 8000f42:	d82b      	bhi.n	8000f9c <__sflush_r+0xb4>
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <__sflush_r+0x100>)
 8000f46:	410a      	asrs	r2, r1
 8000f48:	07d6      	lsls	r6, r2, #31
 8000f4a:	d427      	bmi.n	8000f9c <__sflush_r+0xb4>
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6062      	str	r2, [r4, #4]
 8000f50:	04d9      	lsls	r1, r3, #19
 8000f52:	6922      	ldr	r2, [r4, #16]
 8000f54:	6022      	str	r2, [r4, #0]
 8000f56:	d504      	bpl.n	8000f62 <__sflush_r+0x7a>
 8000f58:	1c42      	adds	r2, r0, #1
 8000f5a:	d101      	bne.n	8000f60 <__sflush_r+0x78>
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	b903      	cbnz	r3, 8000f62 <__sflush_r+0x7a>
 8000f60:	6560      	str	r0, [r4, #84]	; 0x54
 8000f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f64:	602f      	str	r7, [r5, #0]
 8000f66:	2900      	cmp	r1, #0
 8000f68:	d0ca      	beq.n	8000f00 <__sflush_r+0x18>
 8000f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d002      	beq.n	8000f78 <__sflush_r+0x90>
 8000f72:	4628      	mov	r0, r5
 8000f74:	f7ff fec2 	bl	8000cfc <_free_r>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8000f7c:	e7c1      	b.n	8000f02 <__sflush_r+0x1a>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4628      	mov	r0, r5
 8000f82:	47b0      	blx	r6
 8000f84:	1c41      	adds	r1, r0, #1
 8000f86:	d1c8      	bne.n	8000f1a <__sflush_r+0x32>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0c5      	beq.n	8000f1a <__sflush_r+0x32>
 8000f8e:	2b1d      	cmp	r3, #29
 8000f90:	d001      	beq.n	8000f96 <__sflush_r+0xae>
 8000f92:	2b16      	cmp	r3, #22
 8000f94:	d101      	bne.n	8000f9a <__sflush_r+0xb2>
 8000f96:	602f      	str	r7, [r5, #0]
 8000f98:	e7b2      	b.n	8000f00 <__sflush_r+0x18>
 8000f9a:	89a3      	ldrh	r3, [r4, #12]
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa0:	81a3      	strh	r3, [r4, #12]
 8000fa2:	e7ae      	b.n	8000f02 <__sflush_r+0x1a>
 8000fa4:	690f      	ldr	r7, [r1, #16]
 8000fa6:	2f00      	cmp	r7, #0
 8000fa8:	d0aa      	beq.n	8000f00 <__sflush_r+0x18>
 8000faa:	0793      	lsls	r3, r2, #30
 8000fac:	680e      	ldr	r6, [r1, #0]
 8000fae:	bf08      	it	eq
 8000fb0:	694b      	ldreq	r3, [r1, #20]
 8000fb2:	600f      	str	r7, [r1, #0]
 8000fb4:	bf18      	it	ne
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	1bf6      	subs	r6, r6, r7
 8000fba:	608b      	str	r3, [r1, #8]
 8000fbc:	2e00      	cmp	r6, #0
 8000fbe:	dd9f      	ble.n	8000f00 <__sflush_r+0x18>
 8000fc0:	6a21      	ldr	r1, [r4, #32]
 8000fc2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000fc6:	4633      	mov	r3, r6
 8000fc8:	463a      	mov	r2, r7
 8000fca:	4628      	mov	r0, r5
 8000fcc:	47e0      	blx	ip
 8000fce:	2800      	cmp	r0, #0
 8000fd0:	dc06      	bgt.n	8000fe0 <__sflush_r+0xf8>
 8000fd2:	89a3      	ldrh	r3, [r4, #12]
 8000fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd8:	81a3      	strh	r3, [r4, #12]
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	e790      	b.n	8000f02 <__sflush_r+0x1a>
 8000fe0:	4407      	add	r7, r0
 8000fe2:	1a36      	subs	r6, r6, r0
 8000fe4:	e7ea      	b.n	8000fbc <__sflush_r+0xd4>
 8000fe6:	bf00      	nop
 8000fe8:	dfbffffe 	.word	0xdfbffffe

08000fec <_fflush_r>:
 8000fec:	b538      	push	{r3, r4, r5, lr}
 8000fee:	690b      	ldr	r3, [r1, #16]
 8000ff0:	4605      	mov	r5, r0
 8000ff2:	460c      	mov	r4, r1
 8000ff4:	b913      	cbnz	r3, 8000ffc <_fflush_r+0x10>
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	b118      	cbz	r0, 8001006 <_fflush_r+0x1a>
 8000ffe:	6a03      	ldr	r3, [r0, #32]
 8001000:	b90b      	cbnz	r3, 8001006 <_fflush_r+0x1a>
 8001002:	f7ff fc97 	bl	8000934 <__sinit>
 8001006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f3      	beq.n	8000ff6 <_fflush_r+0xa>
 800100e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001010:	07d0      	lsls	r0, r2, #31
 8001012:	d404      	bmi.n	800101e <_fflush_r+0x32>
 8001014:	0599      	lsls	r1, r3, #22
 8001016:	d402      	bmi.n	800101e <_fflush_r+0x32>
 8001018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800101a:	f7ff fe6d 	bl	8000cf8 <__retarget_lock_acquire_recursive>
 800101e:	4628      	mov	r0, r5
 8001020:	4621      	mov	r1, r4
 8001022:	f7ff ff61 	bl	8000ee8 <__sflush_r>
 8001026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001028:	07da      	lsls	r2, r3, #31
 800102a:	4605      	mov	r5, r0
 800102c:	d4e4      	bmi.n	8000ff8 <_fflush_r+0xc>
 800102e:	89a3      	ldrh	r3, [r4, #12]
 8001030:	059b      	lsls	r3, r3, #22
 8001032:	d4e1      	bmi.n	8000ff8 <_fflush_r+0xc>
 8001034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001036:	f7ff fe60 	bl	8000cfa <__retarget_lock_release_recursive>
 800103a:	e7dd      	b.n	8000ff8 <_fflush_r+0xc>

0800103c <__swhatbuf_r>:
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	460c      	mov	r4, r1
 8001040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001044:	2900      	cmp	r1, #0
 8001046:	b096      	sub	sp, #88	; 0x58
 8001048:	4615      	mov	r5, r2
 800104a:	461e      	mov	r6, r3
 800104c:	da0d      	bge.n	800106a <__swhatbuf_r+0x2e>
 800104e:	89a3      	ldrh	r3, [r4, #12]
 8001050:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001054:	f04f 0100 	mov.w	r1, #0
 8001058:	bf0c      	ite	eq
 800105a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800105e:	2340      	movne	r3, #64	; 0x40
 8001060:	2000      	movs	r0, #0
 8001062:	6031      	str	r1, [r6, #0]
 8001064:	602b      	str	r3, [r5, #0]
 8001066:	b016      	add	sp, #88	; 0x58
 8001068:	bd70      	pop	{r4, r5, r6, pc}
 800106a:	466a      	mov	r2, sp
 800106c:	f000 f848 	bl	8001100 <_fstat_r>
 8001070:	2800      	cmp	r0, #0
 8001072:	dbec      	blt.n	800104e <__swhatbuf_r+0x12>
 8001074:	9901      	ldr	r1, [sp, #4]
 8001076:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800107a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800107e:	4259      	negs	r1, r3
 8001080:	4159      	adcs	r1, r3
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	e7eb      	b.n	8001060 <__swhatbuf_r+0x24>

08001088 <__smakebuf_r>:
 8001088:	898b      	ldrh	r3, [r1, #12]
 800108a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800108c:	079d      	lsls	r5, r3, #30
 800108e:	4606      	mov	r6, r0
 8001090:	460c      	mov	r4, r1
 8001092:	d507      	bpl.n	80010a4 <__smakebuf_r+0x1c>
 8001094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	6123      	str	r3, [r4, #16]
 800109c:	2301      	movs	r3, #1
 800109e:	6163      	str	r3, [r4, #20]
 80010a0:	b002      	add	sp, #8
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
 80010a4:	ab01      	add	r3, sp, #4
 80010a6:	466a      	mov	r2, sp
 80010a8:	f7ff ffc8 	bl	800103c <__swhatbuf_r>
 80010ac:	9900      	ldr	r1, [sp, #0]
 80010ae:	4605      	mov	r5, r0
 80010b0:	4630      	mov	r0, r6
 80010b2:	f7ff fe8d 	bl	8000dd0 <_malloc_r>
 80010b6:	b948      	cbnz	r0, 80010cc <__smakebuf_r+0x44>
 80010b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010bc:	059a      	lsls	r2, r3, #22
 80010be:	d4ef      	bmi.n	80010a0 <__smakebuf_r+0x18>
 80010c0:	f023 0303 	bic.w	r3, r3, #3
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	81a3      	strh	r3, [r4, #12]
 80010ca:	e7e3      	b.n	8001094 <__smakebuf_r+0xc>
 80010cc:	89a3      	ldrh	r3, [r4, #12]
 80010ce:	6020      	str	r0, [r4, #0]
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	81a3      	strh	r3, [r4, #12]
 80010d6:	9b00      	ldr	r3, [sp, #0]
 80010d8:	6163      	str	r3, [r4, #20]
 80010da:	9b01      	ldr	r3, [sp, #4]
 80010dc:	6120      	str	r0, [r4, #16]
 80010de:	b15b      	cbz	r3, 80010f8 <__smakebuf_r+0x70>
 80010e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010e4:	4630      	mov	r0, r6
 80010e6:	f000 f81d 	bl	8001124 <_isatty_r>
 80010ea:	b128      	cbz	r0, 80010f8 <__smakebuf_r+0x70>
 80010ec:	89a3      	ldrh	r3, [r4, #12]
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	81a3      	strh	r3, [r4, #12]
 80010f8:	89a3      	ldrh	r3, [r4, #12]
 80010fa:	431d      	orrs	r5, r3
 80010fc:	81a5      	strh	r5, [r4, #12]
 80010fe:	e7cf      	b.n	80010a0 <__smakebuf_r+0x18>

08001100 <_fstat_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4d07      	ldr	r5, [pc, #28]	; (8001120 <_fstat_r+0x20>)
 8001104:	2300      	movs	r3, #0
 8001106:	4604      	mov	r4, r0
 8001108:	4608      	mov	r0, r1
 800110a:	4611      	mov	r1, r2
 800110c:	602b      	str	r3, [r5, #0]
 800110e:	f7ff fb11 	bl	8000734 <_fstat>
 8001112:	1c43      	adds	r3, r0, #1
 8001114:	d102      	bne.n	800111c <_fstat_r+0x1c>
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	b103      	cbz	r3, 800111c <_fstat_r+0x1c>
 800111a:	6023      	str	r3, [r4, #0]
 800111c:	bd38      	pop	{r3, r4, r5, pc}
 800111e:	bf00      	nop
 8001120:	2000020c 	.word	0x2000020c

08001124 <_isatty_r>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4d06      	ldr	r5, [pc, #24]	; (8001140 <_isatty_r+0x1c>)
 8001128:	2300      	movs	r3, #0
 800112a:	4604      	mov	r4, r0
 800112c:	4608      	mov	r0, r1
 800112e:	602b      	str	r3, [r5, #0]
 8001130:	f7ff fb0f 	bl	8000752 <_isatty>
 8001134:	1c43      	adds	r3, r0, #1
 8001136:	d102      	bne.n	800113e <_isatty_r+0x1a>
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	b103      	cbz	r3, 800113e <_isatty_r+0x1a>
 800113c:	6023      	str	r3, [r4, #0]
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	2000020c 	.word	0x2000020c

08001144 <_sbrk_r>:
 8001144:	b538      	push	{r3, r4, r5, lr}
 8001146:	4d06      	ldr	r5, [pc, #24]	; (8001160 <_sbrk_r+0x1c>)
 8001148:	2300      	movs	r3, #0
 800114a:	4604      	mov	r4, r0
 800114c:	4608      	mov	r0, r1
 800114e:	602b      	str	r3, [r5, #0]
 8001150:	f7ff fb16 	bl	8000780 <_sbrk>
 8001154:	1c43      	adds	r3, r0, #1
 8001156:	d102      	bne.n	800115e <_sbrk_r+0x1a>
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	b103      	cbz	r3, 800115e <_sbrk_r+0x1a>
 800115c:	6023      	str	r3, [r4, #0]
 800115e:	bd38      	pop	{r3, r4, r5, pc}
 8001160:	2000020c 	.word	0x2000020c

08001164 <_init>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	bf00      	nop
 8001168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116a:	bc08      	pop	{r3}
 800116c:	469e      	mov	lr, r3
 800116e:	4770      	bx	lr

08001170 <_fini>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr
