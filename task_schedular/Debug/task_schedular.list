
task_schedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fa4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800114c  0800114c  0001114c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001190  08001190  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001190  08001190  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001190  08001190  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001b0  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000d11  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004f4  00000000  00000000  00020dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001d0  00000000  00000000  000212d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000144  00000000  00000000  000214a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002db7  00000000  00000000  000215e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001b56  00000000  00000000  0002439b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009c52  00000000  00000000  00025ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000c48  00000000  00000000  0002fb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0003078c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001134 	.word	0x08001134

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000060 	.word	0x20000060
 80001e4:	08001134 	.word	0x08001134

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>



}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <led_off+0x2c>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40020c14 	.word	0x40020c14

080002e4 <main>:

TCB_t user_tasks[MAX_TASKS];


int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	enable_processor_fault();
 80002e8:	f000 f912 	bl	8000510 <enable_processor_fault>

	init_schedular_stack(SCHED_STACK_START);
 80002ec:	4807      	ldr	r0, [pc, #28]	; (800030c <main+0x28>)
 80002ee:	f000 f88b 	bl	8000408 <init_schedular_stack>

	init_tasks_stack();
 80002f2:	f000 f88f 	bl	8000414 <init_tasks_stack>

	led_init_all();
 80002f6:	f7ff ff8b 	bl	8000210 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 f84f 	bl	80003a0 <init_systick_timer>

	switch_sp_to_psp();
 8000302:	f000 f95d 	bl	80005c0 <switch_sp_to_psp>

	task1_handler();
 8000306:	f000 f803 	bl	8000310 <task1_handler>
    /* Loop forever */
	for(;;);
 800030a:	e7fe      	b.n	800030a <main+0x26>
 800030c:	2001f000 	.word	0x2001f000

08000310 <task1_handler>:
}

void task1_handler(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 8000314:	200c      	movs	r0, #12
 8000316:	f7ff ffb5 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <task1_handler+0x20>)
 800031c:	f7ff ff64 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000320:	200c      	movs	r0, #12
 8000322:	f7ff ffc7 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 8000326:	4802      	ldr	r0, [pc, #8]	; (8000330 <task1_handler+0x20>)
 8000328:	f7ff ff5e 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 800032c:	e7f2      	b.n	8000314 <task1_handler+0x4>
 800032e:	bf00      	nop
 8000330:	001312d0 	.word	0x001312d0

08000334 <task2_handler>:
	}
}

void task2_handler(void){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 8000338:	200d      	movs	r0, #13
 800033a:	f7ff ffa3 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <task2_handler+0x20>)
 8000340:	f7ff ff52 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000344:	200d      	movs	r0, #13
 8000346:	f7ff ffb5 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 800034a:	4802      	ldr	r0, [pc, #8]	; (8000354 <task2_handler+0x20>)
 800034c:	f7ff ff4c 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000350:	e7f2      	b.n	8000338 <task2_handler+0x4>
 8000352:	bf00      	nop
 8000354:	00098968 	.word	0x00098968

08000358 <task3_handler>:
		}
}
void task3_handler(void){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 800035c:	200f      	movs	r0, #15
 800035e:	f7ff ff91 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <task3_handler+0x20>)
 8000364:	f7ff ff40 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 8000368:	200f      	movs	r0, #15
 800036a:	f7ff ffa3 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 800036e:	4802      	ldr	r0, [pc, #8]	; (8000378 <task3_handler+0x20>)
 8000370:	f7ff ff3a 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 8000374:	e7f2      	b.n	800035c <task3_handler+0x4>
 8000376:	bf00      	nop
 8000378:	0004c4b4 	.word	0x0004c4b4

0800037c <task4_handler>:
		}
}
void task4_handler(void){
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 8000380:	200e      	movs	r0, #14
 8000382:	f7ff ff7f 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <task4_handler+0x20>)
 8000388:	f7ff ff2e 	bl	80001e8 <delay>
		led_off(LED_RED);
 800038c:	200e      	movs	r0, #14
 800038e:	f7ff ff91 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 8000392:	4802      	ldr	r0, [pc, #8]	; (800039c <task4_handler+0x20>)
 8000394:	f7ff ff28 	bl	80001e8 <delay>
		led_on(LED_RED);
 8000398:	e7f2      	b.n	8000380 <task4_handler+0x4>
 800039a:	bf00      	nop
 800039c:	0002625a 	.word	0x0002625a

080003a0 <init_systick_timer>:
		}
}


void init_systick_timer(uint32_t tick_hz){
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // SysTick Reload Value Register
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <init_systick_timer+0x5c>)
 80003aa:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // SysTick Control and Status Register
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <init_systick_timer+0x60>)
 80003ae:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
 80003b0:	4a14      	ldr	r2, [pc, #80]	; (8000404 <init_systick_timer+0x64>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	3b01      	subs	r3, #1
 80003ba:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]

	//Load the value into SVR
	*pSRVR |= count_value;
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	431a      	orrs	r2, r3
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= (1 << 1); // Enables SysTick exception request
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 0202 	orr.w	r2, r3, #2
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Indicates the clock source, processor clock source
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0204 	orr.w	r2, r3, #4
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	601a      	str	r2, [r3, #0]

	//enable systick
	*pSCSR |= (1 << 0);//enables the counter
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0201 	orr.w	r2, r3, #1
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	601a      	str	r2, [r3, #0]

}
 80003f2:	bf00      	nop
 80003f4:	371c      	adds	r7, #28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	e000e014 	.word	0xe000e014
 8000400:	e000e010 	.word	0xe000e010
 8000404:	00f42400 	.word	0x00f42400

08000408 <init_schedular_stack>:

__attribute__((naked)) void init_schedular_stack(uint32_t sched_top_of_stack){
 8000408:	4603      	mov	r3, r0
	//__asm volatile("MSR MSP,R0");
	__asm volatile("MSR MSP,%0": : "r"(sched_top_of_stack) : );
 800040a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800040e:	4770      	bx	lr
}
 8000410:	bf00      	nop
	...

08000414 <init_tasks_stack>:




void init_tasks_stack(void){
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_RUNNING_STATE;
 800041a:	4b34      	ldr	r3, [pc, #208]	; (80004ec <init_tasks_stack+0xd8>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
	user_tasks[1].current_state = TASK_RUNNING_STATE;
 8000420:	4b32      	ldr	r3, [pc, #200]	; (80004ec <init_tasks_stack+0xd8>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
	user_tasks[2].current_state = TASK_RUNNING_STATE;
 8000426:	4b31      	ldr	r3, [pc, #196]	; (80004ec <init_tasks_stack+0xd8>)
 8000428:	2200      	movs	r2, #0
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_RUNNING_STATE;
 800042c:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <init_tasks_stack+0xd8>)
 800042e:	2200      	movs	r2, #0
 8000430:	639a      	str	r2, [r3, #56]	; 0x38

	user_tasks[0].psp_value = T1_STACK_START;
 8000432:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <init_tasks_stack+0xd8>)
 8000434:	4a2e      	ldr	r2, [pc, #184]	; (80004f0 <init_tasks_stack+0xdc>)
 8000436:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T2_STACK_START;
 8000438:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <init_tasks_stack+0xd8>)
 800043a:	4a2e      	ldr	r2, [pc, #184]	; (80004f4 <init_tasks_stack+0xe0>)
 800043c:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T3_STACK_START;
 800043e:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <init_tasks_stack+0xd8>)
 8000440:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <init_tasks_stack+0xe4>)
 8000442:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T4_STACK_START;
 8000444:	4b29      	ldr	r3, [pc, #164]	; (80004ec <init_tasks_stack+0xd8>)
 8000446:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <init_tasks_stack+0xe8>)
 8000448:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = task1_handler;
 800044a:	4b28      	ldr	r3, [pc, #160]	; (80004ec <init_tasks_stack+0xd8>)
 800044c:	4a2c      	ldr	r2, [pc, #176]	; (8000500 <init_tasks_stack+0xec>)
 800044e:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task2_handler;
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <init_tasks_stack+0xd8>)
 8000452:	4a2c      	ldr	r2, [pc, #176]	; (8000504 <init_tasks_stack+0xf0>)
 8000454:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task3_handler;
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <init_tasks_stack+0xd8>)
 8000458:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <init_tasks_stack+0xf4>)
 800045a:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task4_handler;
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <init_tasks_stack+0xd8>)
 800045e:	4a2b      	ldr	r2, [pc, #172]	; (800050c <init_tasks_stack+0xf8>)
 8000460:	63da      	str	r2, [r3, #60]	; 0x3c

	uint32_t *pPSP;
	for (int i = 0; i < MAX_TASKS; i++) {
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	e037      	b.n	80004d8 <init_tasks_stack+0xc4>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000468:	4a20      	ldr	r2, [pc, #128]	; (80004ec <init_tasks_stack+0xd8>)
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	011b      	lsls	r3, r3, #4
 800046e:	4413      	add	r3, r2
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3b04      	subs	r3, #4
 8000478:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000480:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3b04      	subs	r3, #4
 8000486:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;//0x01000000
 8000488:	4a18      	ldr	r2, [pc, #96]	; (80004ec <init_tasks_stack+0xd8>)
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	4413      	add	r3, r2
 8000490:	330c      	adds	r3, #12
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3b04      	subs	r3, #4
 800049e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;//0x01000000
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f06f 0202 	mvn.w	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++) {
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e008      	b.n	80004c0 <init_tasks_stack+0xac>
			pPSP--; //R0 - R12
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3b04      	subs	r3, #4
 80004b2:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3301      	adds	r3, #1
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	ddf3      	ble.n	80004ae <init_tasks_stack+0x9a>
		}


		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	4908      	ldr	r1, [pc, #32]	; (80004ec <init_tasks_stack+0xd8>)
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	440b      	add	r3, r1
 80004d0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	ddc4      	ble.n	8000468 <init_tasks_stack+0x54>


	}

}
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	20020000 	.word	0x20020000
 80004f4:	2001fc00 	.word	0x2001fc00
 80004f8:	2001f800 	.word	0x2001f800
 80004fc:	2001f400 	.word	0x2001f400
 8000500:	08000311 	.word	0x08000311
 8000504:	08000335 	.word	0x08000335
 8000508:	08000359 	.word	0x08000359
 800050c:	0800037d 	.word	0x0800037d

08000510 <enable_processor_fault>:


void enable_processor_fault(void){
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <enable_processor_fault+0x38>)
 8000518:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);//mem manage
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);//bus fault
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);//usage fault
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	e000ed24 	.word	0xe000ed24

0800054c <get_psp_value>:


uint32_t get_psp_value(void){
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <get_psp_value+0x18>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <get_psp_value+0x1c>)
 8000556:	011b      	lsls	r3, r3, #4
 8000558:	4413      	add	r3, r2
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20000078 	.word	0x20000078
 8000568:	2000007c 	.word	0x2000007c

0800056c <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <save_psp_value+0x20>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <save_psp_value+0x24>)
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	4413      	add	r3, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000078 	.word	0x20000078
 8000590:	2000007c 	.word	0x2000007c

08000594 <update_next_task>:

void update_next_task(){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	current_task++;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <update_next_task+0x28>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <update_next_task+0x28>)
 80005a2:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <update_next_task+0x28>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f003 0303 	and.w	r3, r3, #3
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b03      	ldr	r3, [pc, #12]	; (80005bc <update_next_task+0x28>)
 80005b0:	701a      	strb	r2, [r3, #0]
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000078 	.word	0x20000078

080005c0 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//1. initialize the PSP with TASK1 stack start
	//get the value if psp of current_task
	__asm volatile("PUSH {LR}");//preserved LR which connects back to main
 80005c0:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80005c2:	f7ff ffc3 	bl	800054c <get_psp_value>
	__asm volatile("MSR PSP, R0");//initialize psp
 80005c6:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");//pops back LR value
 80005ca:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0x02");
 80005ce:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80005d2:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80005d6:	4770      	bx	lr

}
 80005d8:	bf00      	nop

080005da <SysTick_Handler>:



__attribute__((naked)) void SysTick_Handler(void){
	//Save the context of current task
	__asm volatile("MRS R0,PSP");
 80005da:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!,{R4-R11}");
 80005de:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80005e2:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 80005e4:	f7ff ffc2 	bl	800056c <save_psp_value>

	//Retrive the context of next task
	__asm volatile("BL update_next_task");
 80005e8:	f7ff ffd4 	bl	8000594 <update_next_task>
	__asm volatile("BL get_psp_value");
 80005ec:	f7ff ffae 	bl	800054c <get_psp_value>
	__asm volatile("LDMIA R0,{R4-R11}");
 80005f0:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");
 80005f4:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80005f8:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80005fc:	4770      	bx	lr

}
 80005fe:	bf00      	nop

08000600 <HardFault_Handler>:

//Implement fault handlers
void HardFault_Handler(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 8000604:	4801      	ldr	r0, [pc, #4]	; (800060c <HardFault_Handler+0xc>)
 8000606:	f000 fa07 	bl	8000a18 <puts>
	while(1);
 800060a:	e7fe      	b.n	800060a <HardFault_Handler+0xa>
 800060c:	0800114c 	.word	0x0800114c

08000610 <MemManage_Handler>:
}
void MemManage_Handler(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	printf("Exception: MemManage\n");
 8000614:	4801      	ldr	r0, [pc, #4]	; (800061c <MemManage_Handler+0xc>)
 8000616:	f000 f9ff 	bl	8000a18 <puts>
	while(1);
 800061a:	e7fe      	b.n	800061a <MemManage_Handler+0xa>
 800061c:	08001164 	.word	0x08001164

08000620 <BusFault_Handler>:
}
void BusFault_Handler(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 8000624:	4801      	ldr	r0, [pc, #4]	; (800062c <BusFault_Handler+0xc>)
 8000626:	f000 f9f7 	bl	8000a18 <puts>
	while(1);
 800062a:	e7fe      	b.n	800062a <BusFault_Handler+0xa>
 800062c:	0800117c 	.word	0x0800117c

08000630 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <ITM_SendChar+0x44>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <ITM_SendChar+0x44>)
 8000640:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000644:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <ITM_SendChar+0x48>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <ITM_SendChar+0x48>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000652:	bf00      	nop
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f8      	beq.n	8000654 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000662:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	6013      	str	r3, [r2, #0]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	e000edfc 	.word	0xe000edfc
 8000678:	e0000e00 	.word	0xe0000e00

0800067c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	e00a      	b.n	80006a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800068e:	f3af 8000 	nop.w
 8000692:	4601      	mov	r1, r0
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	60ba      	str	r2, [r7, #8]
 800069a:	b2ca      	uxtb	r2, r1
 800069c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbf0      	blt.n	800068e <_read+0x12>
  }

  return len;
 80006ac:	687b      	ldr	r3, [r7, #4]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e009      	b.n	80006dc <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffad 	bl	8000630 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbf1      	blt.n	80006c8 <_write+0x12>
  }
  return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <_close>:

int _close(int file)
{
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000714:	605a      	str	r2, [r3, #4]
  return 0;
 8000716:	2300      	movs	r3, #0
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <_isatty>:

int _isatty(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
	...

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f000 fa78 	bl	8000c74 <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <_sbrk+0x64>)
 80007a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20020000 	.word	0x20020000
 80007b0:	00000400 	.word	0x00000400
 80007b4:	200000bc 	.word	0x200000bc
 80007b8:	20000210 	.word	0x20000210

080007bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490d      	ldr	r1, [pc, #52]	; (80007fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0a      	ldr	r4, [pc, #40]	; (8000808 <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ea:	f000 fa49 	bl	8000c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fd79 	bl	80002e4 <main>

080007f2 <LoopForever>:

LoopForever:
  b LoopForever
 80007f2:	e7fe      	b.n	80007f2 <LoopForever>
  ldr   r0, =_estack
 80007f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000800:	08001198 	.word	0x08001198
  ldr r2, =_sbss
 8000804:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000808:	2000020c 	.word	0x2000020c

0800080c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC_IRQHandler>
	...

08000810 <std>:
 8000810:	2300      	movs	r3, #0
 8000812:	b510      	push	{r4, lr}
 8000814:	4604      	mov	r4, r0
 8000816:	e9c0 3300 	strd	r3, r3, [r0]
 800081a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800081e:	6083      	str	r3, [r0, #8]
 8000820:	8181      	strh	r1, [r0, #12]
 8000822:	6643      	str	r3, [r0, #100]	; 0x64
 8000824:	81c2      	strh	r2, [r0, #14]
 8000826:	6183      	str	r3, [r0, #24]
 8000828:	4619      	mov	r1, r3
 800082a:	2208      	movs	r2, #8
 800082c:	305c      	adds	r0, #92	; 0x5c
 800082e:	f000 f9d3 	bl	8000bd8 <memset>
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <std+0x38>)
 8000834:	6263      	str	r3, [r4, #36]	; 0x24
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <std+0x3c>)
 8000838:	62a3      	str	r3, [r4, #40]	; 0x28
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <std+0x40>)
 800083c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <std+0x44>)
 8000840:	6224      	str	r4, [r4, #32]
 8000842:	6323      	str	r3, [r4, #48]	; 0x30
 8000844:	bd10      	pop	{r4, pc}
 8000846:	bf00      	nop
 8000848:	08000a29 	.word	0x08000a29
 800084c:	08000a4b 	.word	0x08000a4b
 8000850:	08000a83 	.word	0x08000a83
 8000854:	08000aa7 	.word	0x08000aa7

08000858 <stdio_exit_handler>:
 8000858:	4a02      	ldr	r2, [pc, #8]	; (8000864 <stdio_exit_handler+0xc>)
 800085a:	4903      	ldr	r1, [pc, #12]	; (8000868 <stdio_exit_handler+0x10>)
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <stdio_exit_handler+0x14>)
 800085e:	f000 b869 	b.w	8000934 <_fwalk_sglue>
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000
 8000868:	08000fbd 	.word	0x08000fbd
 800086c:	2000000c 	.word	0x2000000c

08000870 <cleanup_stdio>:
 8000870:	6841      	ldr	r1, [r0, #4]
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <cleanup_stdio+0x34>)
 8000874:	4299      	cmp	r1, r3
 8000876:	b510      	push	{r4, lr}
 8000878:	4604      	mov	r4, r0
 800087a:	d001      	beq.n	8000880 <cleanup_stdio+0x10>
 800087c:	f000 fb9e 	bl	8000fbc <_fflush_r>
 8000880:	68a1      	ldr	r1, [r4, #8]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <cleanup_stdio+0x38>)
 8000884:	4299      	cmp	r1, r3
 8000886:	d002      	beq.n	800088e <cleanup_stdio+0x1e>
 8000888:	4620      	mov	r0, r4
 800088a:	f000 fb97 	bl	8000fbc <_fflush_r>
 800088e:	68e1      	ldr	r1, [r4, #12]
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <cleanup_stdio+0x3c>)
 8000892:	4299      	cmp	r1, r3
 8000894:	d004      	beq.n	80008a0 <cleanup_stdio+0x30>
 8000896:	4620      	mov	r0, r4
 8000898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800089c:	f000 bb8e 	b.w	8000fbc <_fflush_r>
 80008a0:	bd10      	pop	{r4, pc}
 80008a2:	bf00      	nop
 80008a4:	200000c0 	.word	0x200000c0
 80008a8:	20000128 	.word	0x20000128
 80008ac:	20000190 	.word	0x20000190

080008b0 <global_stdio_init.part.0>:
 80008b0:	b510      	push	{r4, lr}
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <global_stdio_init.part.0+0x30>)
 80008b4:	4c0b      	ldr	r4, [pc, #44]	; (80008e4 <global_stdio_init.part.0+0x34>)
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <global_stdio_init.part.0+0x38>)
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	4620      	mov	r0, r4
 80008bc:	2200      	movs	r2, #0
 80008be:	2104      	movs	r1, #4
 80008c0:	f7ff ffa6 	bl	8000810 <std>
 80008c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80008c8:	2201      	movs	r2, #1
 80008ca:	2109      	movs	r1, #9
 80008cc:	f7ff ffa0 	bl	8000810 <std>
 80008d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80008d4:	2202      	movs	r2, #2
 80008d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008da:	2112      	movs	r1, #18
 80008dc:	f7ff bf98 	b.w	8000810 <std>
 80008e0:	200001f8 	.word	0x200001f8
 80008e4:	200000c0 	.word	0x200000c0
 80008e8:	08000859 	.word	0x08000859

080008ec <__sfp_lock_acquire>:
 80008ec:	4801      	ldr	r0, [pc, #4]	; (80008f4 <__sfp_lock_acquire+0x8>)
 80008ee:	f000 b9eb 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 80008f2:	bf00      	nop
 80008f4:	20000201 	.word	0x20000201

080008f8 <__sfp_lock_release>:
 80008f8:	4801      	ldr	r0, [pc, #4]	; (8000900 <__sfp_lock_release+0x8>)
 80008fa:	f000 b9e6 	b.w	8000cca <__retarget_lock_release_recursive>
 80008fe:	bf00      	nop
 8000900:	20000201 	.word	0x20000201

08000904 <__sinit>:
 8000904:	b510      	push	{r4, lr}
 8000906:	4604      	mov	r4, r0
 8000908:	f7ff fff0 	bl	80008ec <__sfp_lock_acquire>
 800090c:	6a23      	ldr	r3, [r4, #32]
 800090e:	b11b      	cbz	r3, 8000918 <__sinit+0x14>
 8000910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000914:	f7ff bff0 	b.w	80008f8 <__sfp_lock_release>
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__sinit+0x28>)
 800091a:	6223      	str	r3, [r4, #32]
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__sinit+0x2c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1f5      	bne.n	8000910 <__sinit+0xc>
 8000924:	f7ff ffc4 	bl	80008b0 <global_stdio_init.part.0>
 8000928:	e7f2      	b.n	8000910 <__sinit+0xc>
 800092a:	bf00      	nop
 800092c:	08000871 	.word	0x08000871
 8000930:	200001f8 	.word	0x200001f8

08000934 <_fwalk_sglue>:
 8000934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000938:	4607      	mov	r7, r0
 800093a:	4688      	mov	r8, r1
 800093c:	4614      	mov	r4, r2
 800093e:	2600      	movs	r6, #0
 8000940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000944:	f1b9 0901 	subs.w	r9, r9, #1
 8000948:	d505      	bpl.n	8000956 <_fwalk_sglue+0x22>
 800094a:	6824      	ldr	r4, [r4, #0]
 800094c:	2c00      	cmp	r4, #0
 800094e:	d1f7      	bne.n	8000940 <_fwalk_sglue+0xc>
 8000950:	4630      	mov	r0, r6
 8000952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000956:	89ab      	ldrh	r3, [r5, #12]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d907      	bls.n	800096c <_fwalk_sglue+0x38>
 800095c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000960:	3301      	adds	r3, #1
 8000962:	d003      	beq.n	800096c <_fwalk_sglue+0x38>
 8000964:	4629      	mov	r1, r5
 8000966:	4638      	mov	r0, r7
 8000968:	47c0      	blx	r8
 800096a:	4306      	orrs	r6, r0
 800096c:	3568      	adds	r5, #104	; 0x68
 800096e:	e7e9      	b.n	8000944 <_fwalk_sglue+0x10>

08000970 <_puts_r>:
 8000970:	6a03      	ldr	r3, [r0, #32]
 8000972:	b570      	push	{r4, r5, r6, lr}
 8000974:	6884      	ldr	r4, [r0, #8]
 8000976:	4605      	mov	r5, r0
 8000978:	460e      	mov	r6, r1
 800097a:	b90b      	cbnz	r3, 8000980 <_puts_r+0x10>
 800097c:	f7ff ffc2 	bl	8000904 <__sinit>
 8000980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000982:	07db      	lsls	r3, r3, #31
 8000984:	d405      	bmi.n	8000992 <_puts_r+0x22>
 8000986:	89a3      	ldrh	r3, [r4, #12]
 8000988:	0598      	lsls	r0, r3, #22
 800098a:	d402      	bmi.n	8000992 <_puts_r+0x22>
 800098c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800098e:	f000 f99b 	bl	8000cc8 <__retarget_lock_acquire_recursive>
 8000992:	89a3      	ldrh	r3, [r4, #12]
 8000994:	0719      	lsls	r1, r3, #28
 8000996:	d513      	bpl.n	80009c0 <_puts_r+0x50>
 8000998:	6923      	ldr	r3, [r4, #16]
 800099a:	b18b      	cbz	r3, 80009c0 <_puts_r+0x50>
 800099c:	3e01      	subs	r6, #1
 800099e:	68a3      	ldr	r3, [r4, #8]
 80009a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80009a4:	3b01      	subs	r3, #1
 80009a6:	60a3      	str	r3, [r4, #8]
 80009a8:	b9e9      	cbnz	r1, 80009e6 <_puts_r+0x76>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da2e      	bge.n	8000a0c <_puts_r+0x9c>
 80009ae:	4622      	mov	r2, r4
 80009b0:	210a      	movs	r1, #10
 80009b2:	4628      	mov	r0, r5
 80009b4:	f000 f87b 	bl	8000aae <__swbuf_r>
 80009b8:	3001      	adds	r0, #1
 80009ba:	d007      	beq.n	80009cc <_puts_r+0x5c>
 80009bc:	250a      	movs	r5, #10
 80009be:	e007      	b.n	80009d0 <_puts_r+0x60>
 80009c0:	4621      	mov	r1, r4
 80009c2:	4628      	mov	r0, r5
 80009c4:	f000 f8b0 	bl	8000b28 <__swsetup_r>
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d0e7      	beq.n	800099c <_puts_r+0x2c>
 80009cc:	f04f 35ff 	mov.w	r5, #4294967295
 80009d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009d2:	07da      	lsls	r2, r3, #31
 80009d4:	d405      	bmi.n	80009e2 <_puts_r+0x72>
 80009d6:	89a3      	ldrh	r3, [r4, #12]
 80009d8:	059b      	lsls	r3, r3, #22
 80009da:	d402      	bmi.n	80009e2 <_puts_r+0x72>
 80009dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009de:	f000 f974 	bl	8000cca <__retarget_lock_release_recursive>
 80009e2:	4628      	mov	r0, r5
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da04      	bge.n	80009f4 <_puts_r+0x84>
 80009ea:	69a2      	ldr	r2, [r4, #24]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dc06      	bgt.n	80009fe <_puts_r+0x8e>
 80009f0:	290a      	cmp	r1, #10
 80009f2:	d004      	beq.n	80009fe <_puts_r+0x8e>
 80009f4:	6823      	ldr	r3, [r4, #0]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	6022      	str	r2, [r4, #0]
 80009fa:	7019      	strb	r1, [r3, #0]
 80009fc:	e7cf      	b.n	800099e <_puts_r+0x2e>
 80009fe:	4622      	mov	r2, r4
 8000a00:	4628      	mov	r0, r5
 8000a02:	f000 f854 	bl	8000aae <__swbuf_r>
 8000a06:	3001      	adds	r0, #1
 8000a08:	d1c9      	bne.n	800099e <_puts_r+0x2e>
 8000a0a:	e7df      	b.n	80009cc <_puts_r+0x5c>
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	250a      	movs	r5, #10
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	6022      	str	r2, [r4, #0]
 8000a14:	701d      	strb	r5, [r3, #0]
 8000a16:	e7db      	b.n	80009d0 <_puts_r+0x60>

08000a18 <puts>:
 8000a18:	4b02      	ldr	r3, [pc, #8]	; (8000a24 <puts+0xc>)
 8000a1a:	4601      	mov	r1, r0
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	f7ff bfa7 	b.w	8000970 <_puts_r>
 8000a22:	bf00      	nop
 8000a24:	20000058 	.word	0x20000058

08000a28 <__sread>:
 8000a28:	b510      	push	{r4, lr}
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a30:	f000 f8fc 	bl	8000c2c <_read_r>
 8000a34:	2800      	cmp	r0, #0
 8000a36:	bfab      	itete	ge
 8000a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8000a3c:	181b      	addge	r3, r3, r0
 8000a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a42:	bfac      	ite	ge
 8000a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a46:	81a3      	strhlt	r3, [r4, #12]
 8000a48:	bd10      	pop	{r4, pc}

08000a4a <__swrite>:
 8000a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a4e:	461f      	mov	r7, r3
 8000a50:	898b      	ldrh	r3, [r1, #12]
 8000a52:	05db      	lsls	r3, r3, #23
 8000a54:	4605      	mov	r5, r0
 8000a56:	460c      	mov	r4, r1
 8000a58:	4616      	mov	r6, r2
 8000a5a:	d505      	bpl.n	8000a68 <__swrite+0x1e>
 8000a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a60:	2302      	movs	r3, #2
 8000a62:	2200      	movs	r2, #0
 8000a64:	f000 f8d0 	bl	8000c08 <_lseek_r>
 8000a68:	89a3      	ldrh	r3, [r4, #12]
 8000a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a72:	81a3      	strh	r3, [r4, #12]
 8000a74:	4632      	mov	r2, r6
 8000a76:	463b      	mov	r3, r7
 8000a78:	4628      	mov	r0, r5
 8000a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a7e:	f000 b8e7 	b.w	8000c50 <_write_r>

08000a82 <__sseek>:
 8000a82:	b510      	push	{r4, lr}
 8000a84:	460c      	mov	r4, r1
 8000a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a8a:	f000 f8bd 	bl	8000c08 <_lseek_r>
 8000a8e:	1c43      	adds	r3, r0, #1
 8000a90:	89a3      	ldrh	r3, [r4, #12]
 8000a92:	bf15      	itete	ne
 8000a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a9e:	81a3      	strheq	r3, [r4, #12]
 8000aa0:	bf18      	it	ne
 8000aa2:	81a3      	strhne	r3, [r4, #12]
 8000aa4:	bd10      	pop	{r4, pc}

08000aa6 <__sclose>:
 8000aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aaa:	f000 b89d 	b.w	8000be8 <_close_r>

08000aae <__swbuf_r>:
 8000aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab0:	460e      	mov	r6, r1
 8000ab2:	4614      	mov	r4, r2
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	b118      	cbz	r0, 8000ac0 <__swbuf_r+0x12>
 8000ab8:	6a03      	ldr	r3, [r0, #32]
 8000aba:	b90b      	cbnz	r3, 8000ac0 <__swbuf_r+0x12>
 8000abc:	f7ff ff22 	bl	8000904 <__sinit>
 8000ac0:	69a3      	ldr	r3, [r4, #24]
 8000ac2:	60a3      	str	r3, [r4, #8]
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	071a      	lsls	r2, r3, #28
 8000ac8:	d525      	bpl.n	8000b16 <__swbuf_r+0x68>
 8000aca:	6923      	ldr	r3, [r4, #16]
 8000acc:	b31b      	cbz	r3, 8000b16 <__swbuf_r+0x68>
 8000ace:	6823      	ldr	r3, [r4, #0]
 8000ad0:	6922      	ldr	r2, [r4, #16]
 8000ad2:	1a98      	subs	r0, r3, r2
 8000ad4:	6963      	ldr	r3, [r4, #20]
 8000ad6:	b2f6      	uxtb	r6, r6
 8000ad8:	4283      	cmp	r3, r0
 8000ada:	4637      	mov	r7, r6
 8000adc:	dc04      	bgt.n	8000ae8 <__swbuf_r+0x3a>
 8000ade:	4621      	mov	r1, r4
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	f000 fa6b 	bl	8000fbc <_fflush_r>
 8000ae6:	b9e0      	cbnz	r0, 8000b22 <__swbuf_r+0x74>
 8000ae8:	68a3      	ldr	r3, [r4, #8]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	60a3      	str	r3, [r4, #8]
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	6022      	str	r2, [r4, #0]
 8000af4:	701e      	strb	r6, [r3, #0]
 8000af6:	6962      	ldr	r2, [r4, #20]
 8000af8:	1c43      	adds	r3, r0, #1
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d004      	beq.n	8000b08 <__swbuf_r+0x5a>
 8000afe:	89a3      	ldrh	r3, [r4, #12]
 8000b00:	07db      	lsls	r3, r3, #31
 8000b02:	d506      	bpl.n	8000b12 <__swbuf_r+0x64>
 8000b04:	2e0a      	cmp	r6, #10
 8000b06:	d104      	bne.n	8000b12 <__swbuf_r+0x64>
 8000b08:	4621      	mov	r1, r4
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f000 fa56 	bl	8000fbc <_fflush_r>
 8000b10:	b938      	cbnz	r0, 8000b22 <__swbuf_r+0x74>
 8000b12:	4638      	mov	r0, r7
 8000b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b16:	4621      	mov	r1, r4
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f000 f805 	bl	8000b28 <__swsetup_r>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d0d5      	beq.n	8000ace <__swbuf_r+0x20>
 8000b22:	f04f 37ff 	mov.w	r7, #4294967295
 8000b26:	e7f4      	b.n	8000b12 <__swbuf_r+0x64>

08000b28 <__swsetup_r>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <__swsetup_r+0xac>)
 8000b2c:	4605      	mov	r5, r0
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	460c      	mov	r4, r1
 8000b32:	b118      	cbz	r0, 8000b3c <__swsetup_r+0x14>
 8000b34:	6a03      	ldr	r3, [r0, #32]
 8000b36:	b90b      	cbnz	r3, 8000b3c <__swsetup_r+0x14>
 8000b38:	f7ff fee4 	bl	8000904 <__sinit>
 8000b3c:	89a3      	ldrh	r3, [r4, #12]
 8000b3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b42:	0718      	lsls	r0, r3, #28
 8000b44:	d422      	bmi.n	8000b8c <__swsetup_r+0x64>
 8000b46:	06d9      	lsls	r1, r3, #27
 8000b48:	d407      	bmi.n	8000b5a <__swsetup_r+0x32>
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	602b      	str	r3, [r5, #0]
 8000b4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b52:	81a3      	strh	r3, [r4, #12]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	e034      	b.n	8000bc4 <__swsetup_r+0x9c>
 8000b5a:	0758      	lsls	r0, r3, #29
 8000b5c:	d512      	bpl.n	8000b84 <__swsetup_r+0x5c>
 8000b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b60:	b141      	cbz	r1, 8000b74 <__swsetup_r+0x4c>
 8000b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d002      	beq.n	8000b70 <__swsetup_r+0x48>
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 f8ae 	bl	8000ccc <_free_r>
 8000b70:	2300      	movs	r3, #0
 8000b72:	6363      	str	r3, [r4, #52]	; 0x34
 8000b74:	89a3      	ldrh	r3, [r4, #12]
 8000b76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b7a:	81a3      	strh	r3, [r4, #12]
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	6063      	str	r3, [r4, #4]
 8000b80:	6923      	ldr	r3, [r4, #16]
 8000b82:	6023      	str	r3, [r4, #0]
 8000b84:	89a3      	ldrh	r3, [r4, #12]
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	81a3      	strh	r3, [r4, #12]
 8000b8c:	6923      	ldr	r3, [r4, #16]
 8000b8e:	b94b      	cbnz	r3, 8000ba4 <__swsetup_r+0x7c>
 8000b90:	89a3      	ldrh	r3, [r4, #12]
 8000b92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9a:	d003      	beq.n	8000ba4 <__swsetup_r+0x7c>
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f000 fa5a 	bl	8001058 <__smakebuf_r>
 8000ba4:	89a0      	ldrh	r0, [r4, #12]
 8000ba6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000baa:	f010 0301 	ands.w	r3, r0, #1
 8000bae:	d00a      	beq.n	8000bc6 <__swsetup_r+0x9e>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60a3      	str	r3, [r4, #8]
 8000bb4:	6963      	ldr	r3, [r4, #20]
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	61a3      	str	r3, [r4, #24]
 8000bba:	6923      	ldr	r3, [r4, #16]
 8000bbc:	b943      	cbnz	r3, 8000bd0 <__swsetup_r+0xa8>
 8000bbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000bc2:	d1c4      	bne.n	8000b4e <__swsetup_r+0x26>
 8000bc4:	bd38      	pop	{r3, r4, r5, pc}
 8000bc6:	0781      	lsls	r1, r0, #30
 8000bc8:	bf58      	it	pl
 8000bca:	6963      	ldrpl	r3, [r4, #20]
 8000bcc:	60a3      	str	r3, [r4, #8]
 8000bce:	e7f4      	b.n	8000bba <__swsetup_r+0x92>
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e7f7      	b.n	8000bc4 <__swsetup_r+0x9c>
 8000bd4:	20000058 	.word	0x20000058

08000bd8 <memset>:
 8000bd8:	4402      	add	r2, r0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d100      	bne.n	8000be2 <memset+0xa>
 8000be0:	4770      	bx	lr
 8000be2:	f803 1b01 	strb.w	r1, [r3], #1
 8000be6:	e7f9      	b.n	8000bdc <memset+0x4>

08000be8 <_close_r>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	4d06      	ldr	r5, [pc, #24]	; (8000c04 <_close_r+0x1c>)
 8000bec:	2300      	movs	r3, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	602b      	str	r3, [r5, #0]
 8000bf4:	f7ff fd7b 	bl	80006ee <_close>
 8000bf8:	1c43      	adds	r3, r0, #1
 8000bfa:	d102      	bne.n	8000c02 <_close_r+0x1a>
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	b103      	cbz	r3, 8000c02 <_close_r+0x1a>
 8000c00:	6023      	str	r3, [r4, #0]
 8000c02:	bd38      	pop	{r3, r4, r5, pc}
 8000c04:	200001fc 	.word	0x200001fc

08000c08 <_lseek_r>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	4d07      	ldr	r5, [pc, #28]	; (8000c28 <_lseek_r+0x20>)
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	4608      	mov	r0, r1
 8000c10:	4611      	mov	r1, r2
 8000c12:	2200      	movs	r2, #0
 8000c14:	602a      	str	r2, [r5, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	f7ff fd8d 	bl	8000736 <_lseek>
 8000c1c:	1c43      	adds	r3, r0, #1
 8000c1e:	d102      	bne.n	8000c26 <_lseek_r+0x1e>
 8000c20:	682b      	ldr	r3, [r5, #0]
 8000c22:	b103      	cbz	r3, 8000c26 <_lseek_r+0x1e>
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	bd38      	pop	{r3, r4, r5, pc}
 8000c28:	200001fc 	.word	0x200001fc

08000c2c <_read_r>:
 8000c2c:	b538      	push	{r3, r4, r5, lr}
 8000c2e:	4d07      	ldr	r5, [pc, #28]	; (8000c4c <_read_r+0x20>)
 8000c30:	4604      	mov	r4, r0
 8000c32:	4608      	mov	r0, r1
 8000c34:	4611      	mov	r1, r2
 8000c36:	2200      	movs	r2, #0
 8000c38:	602a      	str	r2, [r5, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f7ff fd1e 	bl	800067c <_read>
 8000c40:	1c43      	adds	r3, r0, #1
 8000c42:	d102      	bne.n	8000c4a <_read_r+0x1e>
 8000c44:	682b      	ldr	r3, [r5, #0]
 8000c46:	b103      	cbz	r3, 8000c4a <_read_r+0x1e>
 8000c48:	6023      	str	r3, [r4, #0]
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}
 8000c4c:	200001fc 	.word	0x200001fc

08000c50 <_write_r>:
 8000c50:	b538      	push	{r3, r4, r5, lr}
 8000c52:	4d07      	ldr	r5, [pc, #28]	; (8000c70 <_write_r+0x20>)
 8000c54:	4604      	mov	r4, r0
 8000c56:	4608      	mov	r0, r1
 8000c58:	4611      	mov	r1, r2
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	602a      	str	r2, [r5, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f7ff fd29 	bl	80006b6 <_write>
 8000c64:	1c43      	adds	r3, r0, #1
 8000c66:	d102      	bne.n	8000c6e <_write_r+0x1e>
 8000c68:	682b      	ldr	r3, [r5, #0]
 8000c6a:	b103      	cbz	r3, 8000c6e <_write_r+0x1e>
 8000c6c:	6023      	str	r3, [r4, #0]
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
 8000c70:	200001fc 	.word	0x200001fc

08000c74 <__errno>:
 8000c74:	4b01      	ldr	r3, [pc, #4]	; (8000c7c <__errno+0x8>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000058 	.word	0x20000058

08000c80 <__libc_init_array>:
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	4d0d      	ldr	r5, [pc, #52]	; (8000cb8 <__libc_init_array+0x38>)
 8000c84:	4c0d      	ldr	r4, [pc, #52]	; (8000cbc <__libc_init_array+0x3c>)
 8000c86:	1b64      	subs	r4, r4, r5
 8000c88:	10a4      	asrs	r4, r4, #2
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	42a6      	cmp	r6, r4
 8000c8e:	d109      	bne.n	8000ca4 <__libc_init_array+0x24>
 8000c90:	4d0b      	ldr	r5, [pc, #44]	; (8000cc0 <__libc_init_array+0x40>)
 8000c92:	4c0c      	ldr	r4, [pc, #48]	; (8000cc4 <__libc_init_array+0x44>)
 8000c94:	f000 fa4e 	bl	8001134 <_init>
 8000c98:	1b64      	subs	r4, r4, r5
 8000c9a:	10a4      	asrs	r4, r4, #2
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	42a6      	cmp	r6, r4
 8000ca0:	d105      	bne.n	8000cae <__libc_init_array+0x2e>
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
 8000ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca8:	4798      	blx	r3
 8000caa:	3601      	adds	r6, #1
 8000cac:	e7ee      	b.n	8000c8c <__libc_init_array+0xc>
 8000cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb2:	4798      	blx	r3
 8000cb4:	3601      	adds	r6, #1
 8000cb6:	e7f2      	b.n	8000c9e <__libc_init_array+0x1e>
 8000cb8:	08001190 	.word	0x08001190
 8000cbc:	08001190 	.word	0x08001190
 8000cc0:	08001190 	.word	0x08001190
 8000cc4:	08001194 	.word	0x08001194

08000cc8 <__retarget_lock_acquire_recursive>:
 8000cc8:	4770      	bx	lr

08000cca <__retarget_lock_release_recursive>:
 8000cca:	4770      	bx	lr

08000ccc <_free_r>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	4605      	mov	r5, r0
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	d041      	beq.n	8000d58 <_free_r+0x8c>
 8000cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cd8:	1f0c      	subs	r4, r1, #4
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bfb8      	it	lt
 8000cde:	18e4      	addlt	r4, r4, r3
 8000ce0:	f000 f8de 	bl	8000ea0 <__malloc_lock>
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <_free_r+0x90>)
 8000ce6:	6813      	ldr	r3, [r2, #0]
 8000ce8:	b933      	cbnz	r3, 8000cf8 <_free_r+0x2c>
 8000cea:	6063      	str	r3, [r4, #4]
 8000cec:	6014      	str	r4, [r2, #0]
 8000cee:	4628      	mov	r0, r5
 8000cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf4:	f000 b8da 	b.w	8000eac <__malloc_unlock>
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	d908      	bls.n	8000d0e <_free_r+0x42>
 8000cfc:	6820      	ldr	r0, [r4, #0]
 8000cfe:	1821      	adds	r1, r4, r0
 8000d00:	428b      	cmp	r3, r1
 8000d02:	bf01      	itttt	eq
 8000d04:	6819      	ldreq	r1, [r3, #0]
 8000d06:	685b      	ldreq	r3, [r3, #4]
 8000d08:	1809      	addeq	r1, r1, r0
 8000d0a:	6021      	streq	r1, [r4, #0]
 8000d0c:	e7ed      	b.n	8000cea <_free_r+0x1e>
 8000d0e:	461a      	mov	r2, r3
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	b10b      	cbz	r3, 8000d18 <_free_r+0x4c>
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	d9fa      	bls.n	8000d0e <_free_r+0x42>
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	1850      	adds	r0, r2, r1
 8000d1c:	42a0      	cmp	r0, r4
 8000d1e:	d10b      	bne.n	8000d38 <_free_r+0x6c>
 8000d20:	6820      	ldr	r0, [r4, #0]
 8000d22:	4401      	add	r1, r0
 8000d24:	1850      	adds	r0, r2, r1
 8000d26:	4283      	cmp	r3, r0
 8000d28:	6011      	str	r1, [r2, #0]
 8000d2a:	d1e0      	bne.n	8000cee <_free_r+0x22>
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	6053      	str	r3, [r2, #4]
 8000d32:	4408      	add	r0, r1
 8000d34:	6010      	str	r0, [r2, #0]
 8000d36:	e7da      	b.n	8000cee <_free_r+0x22>
 8000d38:	d902      	bls.n	8000d40 <_free_r+0x74>
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	602b      	str	r3, [r5, #0]
 8000d3e:	e7d6      	b.n	8000cee <_free_r+0x22>
 8000d40:	6820      	ldr	r0, [r4, #0]
 8000d42:	1821      	adds	r1, r4, r0
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf04      	itt	eq
 8000d48:	6819      	ldreq	r1, [r3, #0]
 8000d4a:	685b      	ldreq	r3, [r3, #4]
 8000d4c:	6063      	str	r3, [r4, #4]
 8000d4e:	bf04      	itt	eq
 8000d50:	1809      	addeq	r1, r1, r0
 8000d52:	6021      	streq	r1, [r4, #0]
 8000d54:	6054      	str	r4, [r2, #4]
 8000d56:	e7ca      	b.n	8000cee <_free_r+0x22>
 8000d58:	bd38      	pop	{r3, r4, r5, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000204 	.word	0x20000204

08000d60 <sbrk_aligned>:
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	4e0e      	ldr	r6, [pc, #56]	; (8000d9c <sbrk_aligned+0x3c>)
 8000d64:	460c      	mov	r4, r1
 8000d66:	6831      	ldr	r1, [r6, #0]
 8000d68:	4605      	mov	r5, r0
 8000d6a:	b911      	cbnz	r1, 8000d72 <sbrk_aligned+0x12>
 8000d6c:	f000 f9d2 	bl	8001114 <_sbrk_r>
 8000d70:	6030      	str	r0, [r6, #0]
 8000d72:	4621      	mov	r1, r4
 8000d74:	4628      	mov	r0, r5
 8000d76:	f000 f9cd 	bl	8001114 <_sbrk_r>
 8000d7a:	1c43      	adds	r3, r0, #1
 8000d7c:	d00a      	beq.n	8000d94 <sbrk_aligned+0x34>
 8000d7e:	1cc4      	adds	r4, r0, #3
 8000d80:	f024 0403 	bic.w	r4, r4, #3
 8000d84:	42a0      	cmp	r0, r4
 8000d86:	d007      	beq.n	8000d98 <sbrk_aligned+0x38>
 8000d88:	1a21      	subs	r1, r4, r0
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f000 f9c2 	bl	8001114 <_sbrk_r>
 8000d90:	3001      	adds	r0, #1
 8000d92:	d101      	bne.n	8000d98 <sbrk_aligned+0x38>
 8000d94:	f04f 34ff 	mov.w	r4, #4294967295
 8000d98:	4620      	mov	r0, r4
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
 8000d9c:	20000208 	.word	0x20000208

08000da0 <_malloc_r>:
 8000da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000da4:	1ccd      	adds	r5, r1, #3
 8000da6:	f025 0503 	bic.w	r5, r5, #3
 8000daa:	3508      	adds	r5, #8
 8000dac:	2d0c      	cmp	r5, #12
 8000dae:	bf38      	it	cc
 8000db0:	250c      	movcc	r5, #12
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	4607      	mov	r7, r0
 8000db6:	db01      	blt.n	8000dbc <_malloc_r+0x1c>
 8000db8:	42a9      	cmp	r1, r5
 8000dba:	d905      	bls.n	8000dc8 <_malloc_r+0x28>
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	2600      	movs	r6, #0
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000e9c <_malloc_r+0xfc>
 8000dcc:	f000 f868 	bl	8000ea0 <__malloc_lock>
 8000dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8000dd4:	461c      	mov	r4, r3
 8000dd6:	bb5c      	cbnz	r4, 8000e30 <_malloc_r+0x90>
 8000dd8:	4629      	mov	r1, r5
 8000dda:	4638      	mov	r0, r7
 8000ddc:	f7ff ffc0 	bl	8000d60 <sbrk_aligned>
 8000de0:	1c43      	adds	r3, r0, #1
 8000de2:	4604      	mov	r4, r0
 8000de4:	d155      	bne.n	8000e92 <_malloc_r+0xf2>
 8000de6:	f8d8 4000 	ldr.w	r4, [r8]
 8000dea:	4626      	mov	r6, r4
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d145      	bne.n	8000e7c <_malloc_r+0xdc>
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d048      	beq.n	8000e86 <_malloc_r+0xe6>
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	4631      	mov	r1, r6
 8000df8:	4638      	mov	r0, r7
 8000dfa:	eb04 0903 	add.w	r9, r4, r3
 8000dfe:	f000 f989 	bl	8001114 <_sbrk_r>
 8000e02:	4581      	cmp	r9, r0
 8000e04:	d13f      	bne.n	8000e86 <_malloc_r+0xe6>
 8000e06:	6821      	ldr	r1, [r4, #0]
 8000e08:	1a6d      	subs	r5, r5, r1
 8000e0a:	4629      	mov	r1, r5
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	f7ff ffa7 	bl	8000d60 <sbrk_aligned>
 8000e12:	3001      	adds	r0, #1
 8000e14:	d037      	beq.n	8000e86 <_malloc_r+0xe6>
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	442b      	add	r3, r5
 8000e1a:	6023      	str	r3, [r4, #0]
 8000e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d038      	beq.n	8000e96 <_malloc_r+0xf6>
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	42a2      	cmp	r2, r4
 8000e28:	d12b      	bne.n	8000e82 <_malloc_r+0xe2>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	e00f      	b.n	8000e50 <_malloc_r+0xb0>
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	1b52      	subs	r2, r2, r5
 8000e34:	d41f      	bmi.n	8000e76 <_malloc_r+0xd6>
 8000e36:	2a0b      	cmp	r2, #11
 8000e38:	d917      	bls.n	8000e6a <_malloc_r+0xca>
 8000e3a:	1961      	adds	r1, r4, r5
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	6025      	str	r5, [r4, #0]
 8000e40:	bf18      	it	ne
 8000e42:	6059      	strne	r1, [r3, #4]
 8000e44:	6863      	ldr	r3, [r4, #4]
 8000e46:	bf08      	it	eq
 8000e48:	f8c8 1000 	streq.w	r1, [r8]
 8000e4c:	5162      	str	r2, [r4, r5]
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	4638      	mov	r0, r7
 8000e52:	f104 060b 	add.w	r6, r4, #11
 8000e56:	f000 f829 	bl	8000eac <__malloc_unlock>
 8000e5a:	f026 0607 	bic.w	r6, r6, #7
 8000e5e:	1d23      	adds	r3, r4, #4
 8000e60:	1af2      	subs	r2, r6, r3
 8000e62:	d0ae      	beq.n	8000dc2 <_malloc_r+0x22>
 8000e64:	1b9b      	subs	r3, r3, r6
 8000e66:	50a3      	str	r3, [r4, r2]
 8000e68:	e7ab      	b.n	8000dc2 <_malloc_r+0x22>
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	6862      	ldr	r2, [r4, #4]
 8000e6e:	d1dd      	bne.n	8000e2c <_malloc_r+0x8c>
 8000e70:	f8c8 2000 	str.w	r2, [r8]
 8000e74:	e7ec      	b.n	8000e50 <_malloc_r+0xb0>
 8000e76:	4623      	mov	r3, r4
 8000e78:	6864      	ldr	r4, [r4, #4]
 8000e7a:	e7ac      	b.n	8000dd6 <_malloc_r+0x36>
 8000e7c:	4634      	mov	r4, r6
 8000e7e:	6876      	ldr	r6, [r6, #4]
 8000e80:	e7b4      	b.n	8000dec <_malloc_r+0x4c>
 8000e82:	4613      	mov	r3, r2
 8000e84:	e7cc      	b.n	8000e20 <_malloc_r+0x80>
 8000e86:	230c      	movs	r3, #12
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4638      	mov	r0, r7
 8000e8c:	f000 f80e 	bl	8000eac <__malloc_unlock>
 8000e90:	e797      	b.n	8000dc2 <_malloc_r+0x22>
 8000e92:	6025      	str	r5, [r4, #0]
 8000e94:	e7dc      	b.n	8000e50 <_malloc_r+0xb0>
 8000e96:	605b      	str	r3, [r3, #4]
 8000e98:	deff      	udf	#255	; 0xff
 8000e9a:	bf00      	nop
 8000e9c:	20000204 	.word	0x20000204

08000ea0 <__malloc_lock>:
 8000ea0:	4801      	ldr	r0, [pc, #4]	; (8000ea8 <__malloc_lock+0x8>)
 8000ea2:	f7ff bf11 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 8000ea6:	bf00      	nop
 8000ea8:	20000200 	.word	0x20000200

08000eac <__malloc_unlock>:
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <__malloc_unlock+0x8>)
 8000eae:	f7ff bf0c 	b.w	8000cca <__retarget_lock_release_recursive>
 8000eb2:	bf00      	nop
 8000eb4:	20000200 	.word	0x20000200

08000eb8 <__sflush_r>:
 8000eb8:	898a      	ldrh	r2, [r1, #12]
 8000eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebc:	4605      	mov	r5, r0
 8000ebe:	0710      	lsls	r0, r2, #28
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	d457      	bmi.n	8000f74 <__sflush_r+0xbc>
 8000ec4:	684b      	ldr	r3, [r1, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dc04      	bgt.n	8000ed4 <__sflush_r+0x1c>
 8000eca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	dc01      	bgt.n	8000ed4 <__sflush_r+0x1c>
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d0fa      	beq.n	8000ed0 <__sflush_r+0x18>
 8000eda:	2300      	movs	r3, #0
 8000edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ee0:	682f      	ldr	r7, [r5, #0]
 8000ee2:	6a21      	ldr	r1, [r4, #32]
 8000ee4:	602b      	str	r3, [r5, #0]
 8000ee6:	d032      	beq.n	8000f4e <__sflush_r+0x96>
 8000ee8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000eea:	89a3      	ldrh	r3, [r4, #12]
 8000eec:	075a      	lsls	r2, r3, #29
 8000eee:	d505      	bpl.n	8000efc <__sflush_r+0x44>
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	1ac0      	subs	r0, r0, r3
 8000ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ef6:	b10b      	cbz	r3, 8000efc <__sflush_r+0x44>
 8000ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000efa:	1ac0      	subs	r0, r0, r3
 8000efc:	2300      	movs	r3, #0
 8000efe:	4602      	mov	r2, r0
 8000f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f02:	6a21      	ldr	r1, [r4, #32]
 8000f04:	4628      	mov	r0, r5
 8000f06:	47b0      	blx	r6
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	89a3      	ldrh	r3, [r4, #12]
 8000f0c:	d106      	bne.n	8000f1c <__sflush_r+0x64>
 8000f0e:	6829      	ldr	r1, [r5, #0]
 8000f10:	291d      	cmp	r1, #29
 8000f12:	d82b      	bhi.n	8000f6c <__sflush_r+0xb4>
 8000f14:	4a28      	ldr	r2, [pc, #160]	; (8000fb8 <__sflush_r+0x100>)
 8000f16:	410a      	asrs	r2, r1
 8000f18:	07d6      	lsls	r6, r2, #31
 8000f1a:	d427      	bmi.n	8000f6c <__sflush_r+0xb4>
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6062      	str	r2, [r4, #4]
 8000f20:	04d9      	lsls	r1, r3, #19
 8000f22:	6922      	ldr	r2, [r4, #16]
 8000f24:	6022      	str	r2, [r4, #0]
 8000f26:	d504      	bpl.n	8000f32 <__sflush_r+0x7a>
 8000f28:	1c42      	adds	r2, r0, #1
 8000f2a:	d101      	bne.n	8000f30 <__sflush_r+0x78>
 8000f2c:	682b      	ldr	r3, [r5, #0]
 8000f2e:	b903      	cbnz	r3, 8000f32 <__sflush_r+0x7a>
 8000f30:	6560      	str	r0, [r4, #84]	; 0x54
 8000f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f34:	602f      	str	r7, [r5, #0]
 8000f36:	2900      	cmp	r1, #0
 8000f38:	d0ca      	beq.n	8000ed0 <__sflush_r+0x18>
 8000f3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	d002      	beq.n	8000f48 <__sflush_r+0x90>
 8000f42:	4628      	mov	r0, r5
 8000f44:	f7ff fec2 	bl	8000ccc <_free_r>
 8000f48:	2000      	movs	r0, #0
 8000f4a:	6360      	str	r0, [r4, #52]	; 0x34
 8000f4c:	e7c1      	b.n	8000ed2 <__sflush_r+0x1a>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4628      	mov	r0, r5
 8000f52:	47b0      	blx	r6
 8000f54:	1c41      	adds	r1, r0, #1
 8000f56:	d1c8      	bne.n	8000eea <__sflush_r+0x32>
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0c5      	beq.n	8000eea <__sflush_r+0x32>
 8000f5e:	2b1d      	cmp	r3, #29
 8000f60:	d001      	beq.n	8000f66 <__sflush_r+0xae>
 8000f62:	2b16      	cmp	r3, #22
 8000f64:	d101      	bne.n	8000f6a <__sflush_r+0xb2>
 8000f66:	602f      	str	r7, [r5, #0]
 8000f68:	e7b2      	b.n	8000ed0 <__sflush_r+0x18>
 8000f6a:	89a3      	ldrh	r3, [r4, #12]
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f70:	81a3      	strh	r3, [r4, #12]
 8000f72:	e7ae      	b.n	8000ed2 <__sflush_r+0x1a>
 8000f74:	690f      	ldr	r7, [r1, #16]
 8000f76:	2f00      	cmp	r7, #0
 8000f78:	d0aa      	beq.n	8000ed0 <__sflush_r+0x18>
 8000f7a:	0793      	lsls	r3, r2, #30
 8000f7c:	680e      	ldr	r6, [r1, #0]
 8000f7e:	bf08      	it	eq
 8000f80:	694b      	ldreq	r3, [r1, #20]
 8000f82:	600f      	str	r7, [r1, #0]
 8000f84:	bf18      	it	ne
 8000f86:	2300      	movne	r3, #0
 8000f88:	1bf6      	subs	r6, r6, r7
 8000f8a:	608b      	str	r3, [r1, #8]
 8000f8c:	2e00      	cmp	r6, #0
 8000f8e:	dd9f      	ble.n	8000ed0 <__sflush_r+0x18>
 8000f90:	6a21      	ldr	r1, [r4, #32]
 8000f92:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000f96:	4633      	mov	r3, r6
 8000f98:	463a      	mov	r2, r7
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	47e0      	blx	ip
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	dc06      	bgt.n	8000fb0 <__sflush_r+0xf8>
 8000fa2:	89a3      	ldrh	r3, [r4, #12]
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	81a3      	strh	r3, [r4, #12]
 8000faa:	f04f 30ff 	mov.w	r0, #4294967295
 8000fae:	e790      	b.n	8000ed2 <__sflush_r+0x1a>
 8000fb0:	4407      	add	r7, r0
 8000fb2:	1a36      	subs	r6, r6, r0
 8000fb4:	e7ea      	b.n	8000f8c <__sflush_r+0xd4>
 8000fb6:	bf00      	nop
 8000fb8:	dfbffffe 	.word	0xdfbffffe

08000fbc <_fflush_r>:
 8000fbc:	b538      	push	{r3, r4, r5, lr}
 8000fbe:	690b      	ldr	r3, [r1, #16]
 8000fc0:	4605      	mov	r5, r0
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	b913      	cbnz	r3, 8000fcc <_fflush_r+0x10>
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	4628      	mov	r0, r5
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	b118      	cbz	r0, 8000fd6 <_fflush_r+0x1a>
 8000fce:	6a03      	ldr	r3, [r0, #32]
 8000fd0:	b90b      	cbnz	r3, 8000fd6 <_fflush_r+0x1a>
 8000fd2:	f7ff fc97 	bl	8000904 <__sinit>
 8000fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f3      	beq.n	8000fc6 <_fflush_r+0xa>
 8000fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000fe0:	07d0      	lsls	r0, r2, #31
 8000fe2:	d404      	bmi.n	8000fee <_fflush_r+0x32>
 8000fe4:	0599      	lsls	r1, r3, #22
 8000fe6:	d402      	bmi.n	8000fee <_fflush_r+0x32>
 8000fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fea:	f7ff fe6d 	bl	8000cc8 <__retarget_lock_acquire_recursive>
 8000fee:	4628      	mov	r0, r5
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	f7ff ff61 	bl	8000eb8 <__sflush_r>
 8000ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ff8:	07da      	lsls	r2, r3, #31
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	d4e4      	bmi.n	8000fc8 <_fflush_r+0xc>
 8000ffe:	89a3      	ldrh	r3, [r4, #12]
 8001000:	059b      	lsls	r3, r3, #22
 8001002:	d4e1      	bmi.n	8000fc8 <_fflush_r+0xc>
 8001004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001006:	f7ff fe60 	bl	8000cca <__retarget_lock_release_recursive>
 800100a:	e7dd      	b.n	8000fc8 <_fflush_r+0xc>

0800100c <__swhatbuf_r>:
 800100c:	b570      	push	{r4, r5, r6, lr}
 800100e:	460c      	mov	r4, r1
 8001010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001014:	2900      	cmp	r1, #0
 8001016:	b096      	sub	sp, #88	; 0x58
 8001018:	4615      	mov	r5, r2
 800101a:	461e      	mov	r6, r3
 800101c:	da0d      	bge.n	800103a <__swhatbuf_r+0x2e>
 800101e:	89a3      	ldrh	r3, [r4, #12]
 8001020:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001024:	f04f 0100 	mov.w	r1, #0
 8001028:	bf0c      	ite	eq
 800102a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800102e:	2340      	movne	r3, #64	; 0x40
 8001030:	2000      	movs	r0, #0
 8001032:	6031      	str	r1, [r6, #0]
 8001034:	602b      	str	r3, [r5, #0]
 8001036:	b016      	add	sp, #88	; 0x58
 8001038:	bd70      	pop	{r4, r5, r6, pc}
 800103a:	466a      	mov	r2, sp
 800103c:	f000 f848 	bl	80010d0 <_fstat_r>
 8001040:	2800      	cmp	r0, #0
 8001042:	dbec      	blt.n	800101e <__swhatbuf_r+0x12>
 8001044:	9901      	ldr	r1, [sp, #4]
 8001046:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800104a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800104e:	4259      	negs	r1, r3
 8001050:	4159      	adcs	r1, r3
 8001052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001056:	e7eb      	b.n	8001030 <__swhatbuf_r+0x24>

08001058 <__smakebuf_r>:
 8001058:	898b      	ldrh	r3, [r1, #12]
 800105a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800105c:	079d      	lsls	r5, r3, #30
 800105e:	4606      	mov	r6, r0
 8001060:	460c      	mov	r4, r1
 8001062:	d507      	bpl.n	8001074 <__smakebuf_r+0x1c>
 8001064:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	6123      	str	r3, [r4, #16]
 800106c:	2301      	movs	r3, #1
 800106e:	6163      	str	r3, [r4, #20]
 8001070:	b002      	add	sp, #8
 8001072:	bd70      	pop	{r4, r5, r6, pc}
 8001074:	ab01      	add	r3, sp, #4
 8001076:	466a      	mov	r2, sp
 8001078:	f7ff ffc8 	bl	800100c <__swhatbuf_r>
 800107c:	9900      	ldr	r1, [sp, #0]
 800107e:	4605      	mov	r5, r0
 8001080:	4630      	mov	r0, r6
 8001082:	f7ff fe8d 	bl	8000da0 <_malloc_r>
 8001086:	b948      	cbnz	r0, 800109c <__smakebuf_r+0x44>
 8001088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800108c:	059a      	lsls	r2, r3, #22
 800108e:	d4ef      	bmi.n	8001070 <__smakebuf_r+0x18>
 8001090:	f023 0303 	bic.w	r3, r3, #3
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	81a3      	strh	r3, [r4, #12]
 800109a:	e7e3      	b.n	8001064 <__smakebuf_r+0xc>
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	6020      	str	r0, [r4, #0]
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	81a3      	strh	r3, [r4, #12]
 80010a6:	9b00      	ldr	r3, [sp, #0]
 80010a8:	6163      	str	r3, [r4, #20]
 80010aa:	9b01      	ldr	r3, [sp, #4]
 80010ac:	6120      	str	r0, [r4, #16]
 80010ae:	b15b      	cbz	r3, 80010c8 <__smakebuf_r+0x70>
 80010b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010b4:	4630      	mov	r0, r6
 80010b6:	f000 f81d 	bl	80010f4 <_isatty_r>
 80010ba:	b128      	cbz	r0, 80010c8 <__smakebuf_r+0x70>
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	f023 0303 	bic.w	r3, r3, #3
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	81a3      	strh	r3, [r4, #12]
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	431d      	orrs	r5, r3
 80010cc:	81a5      	strh	r5, [r4, #12]
 80010ce:	e7cf      	b.n	8001070 <__smakebuf_r+0x18>

080010d0 <_fstat_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4d07      	ldr	r5, [pc, #28]	; (80010f0 <_fstat_r+0x20>)
 80010d4:	2300      	movs	r3, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	602b      	str	r3, [r5, #0]
 80010de:	f7ff fb11 	bl	8000704 <_fstat>
 80010e2:	1c43      	adds	r3, r0, #1
 80010e4:	d102      	bne.n	80010ec <_fstat_r+0x1c>
 80010e6:	682b      	ldr	r3, [r5, #0]
 80010e8:	b103      	cbz	r3, 80010ec <_fstat_r+0x1c>
 80010ea:	6023      	str	r3, [r4, #0]
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
 80010ee:	bf00      	nop
 80010f0:	200001fc 	.word	0x200001fc

080010f4 <_isatty_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	4d06      	ldr	r5, [pc, #24]	; (8001110 <_isatty_r+0x1c>)
 80010f8:	2300      	movs	r3, #0
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	602b      	str	r3, [r5, #0]
 8001100:	f7ff fb0f 	bl	8000722 <_isatty>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d102      	bne.n	800110e <_isatty_r+0x1a>
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	b103      	cbz	r3, 800110e <_isatty_r+0x1a>
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	200001fc 	.word	0x200001fc

08001114 <_sbrk_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4d06      	ldr	r5, [pc, #24]	; (8001130 <_sbrk_r+0x1c>)
 8001118:	2300      	movs	r3, #0
 800111a:	4604      	mov	r4, r0
 800111c:	4608      	mov	r0, r1
 800111e:	602b      	str	r3, [r5, #0]
 8001120:	f7ff fb16 	bl	8000750 <_sbrk>
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	d102      	bne.n	800112e <_sbrk_r+0x1a>
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	b103      	cbz	r3, 800112e <_sbrk_r+0x1a>
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	bd38      	pop	{r3, r4, r5, pc}
 8001130:	200001fc 	.word	0x200001fc

08001134 <_init>:
 8001134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001136:	bf00      	nop
 8001138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113a:	bc08      	pop	{r3}
 800113c:	469e      	mov	lr, r3
 800113e:	4770      	bx	lr

08001140 <_fini>:
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	bf00      	nop
 8001144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001146:	bc08      	pop	{r3}
 8001148:	469e      	mov	lr, r3
 800114a:	4770      	bx	lr
