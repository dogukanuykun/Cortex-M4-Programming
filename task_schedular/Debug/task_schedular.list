
task_schedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d7c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f68  08000f68  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f68  08000f68  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f68  08000f68  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08000f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000180  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000afb  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000003af  00000000  00000000  00020bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000188  00000000  00000000  00020f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000113  00000000  00000000  00021110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002cf6  00000000  00000000  00021223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000162f  00000000  00000000  00023f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009a7b  00000000  00000000  00025548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b54  00000000  00000000  0002efc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0002fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f0c 	.word	0x08000f0c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000070 	.word	0x20000070
 80001e4:	08000f0c 	.word	0x08000f0c

080001e8 <main>:


uint8_t current_task = 0; // task1 is running

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	enable_processor_fault();
 80001ec:	f000 f8b2 	bl	8000354 <enable_processor_fault>

	init_schedular_stack(SCHED_STACK_START);
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0x3c>)
 80001f2:	f000 f863 	bl	80002bc <init_schedular_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80001f6:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <main+0x40>)
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <main+0x44>)
 80001fa:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <main+0x48>)
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <main+0x44>)
 8000200:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 8000202:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <main+0x4c>)
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <main+0x44>)
 8000206:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <main+0x50>)
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <main+0x44>)
 800020c:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 800020e:	f000 f85b 	bl	80002c8 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f000 f81d 	bl	8000254 <init_systick_timer>

	switch_sp_to_psp();
 800021a:	f000 f8c9 	bl	80003b0 <switch_sp_to_psp>

	task1_handler();
 800021e:	f000 f80d 	bl	800023c <task1_handler>
    /* Loop forever */
	for(;;);
 8000222:	e7fe      	b.n	8000222 <main+0x3a>
 8000224:	2001f000 	.word	0x2001f000
 8000228:	0800023d 	.word	0x0800023d
 800022c:	20000088 	.word	0x20000088
 8000230:	08000243 	.word	0x08000243
 8000234:	08000249 	.word	0x08000249
 8000238:	0800024f 	.word	0x0800024f

0800023c <task1_handler>:
}

void task1_handler(void){
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	while(1){
 8000240:	e7fe      	b.n	8000240 <task1_handler+0x4>

08000242 <task2_handler>:

	}
}

void task2_handler(void){
 8000242:	b480      	push	{r7}
 8000244:	af00      	add	r7, sp, #0
	while(1){
 8000246:	e7fe      	b.n	8000246 <task2_handler+0x4>

08000248 <task3_handler>:

		}
}
void task3_handler(void){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	while(1){
 800024c:	e7fe      	b.n	800024c <task3_handler+0x4>

0800024e <task4_handler>:

		}
}
void task4_handler(void){
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0
	while(1){
 8000252:	e7fe      	b.n	8000252 <task4_handler+0x4>

08000254 <init_systick_timer>:

		}
}


void init_systick_timer(uint32_t tick_hz){
 8000254:	b480      	push	{r7}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // SysTick Reload Value Register
 800025c:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <init_systick_timer+0x5c>)
 800025e:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // SysTick Control and Status Register
 8000260:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <init_systick_timer+0x60>)
 8000262:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <init_systick_timer+0x64>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	fbb2 f3f3 	udiv	r3, r2, r3
 800026c:	3b01      	subs	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]

	//Load the value into SVR
	*pSRVR |= count_value;
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	431a      	orrs	r2, r3
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= (1 << 1); // Enables SysTick exception request
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f043 0202 	orr.w	r2, r3, #2
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Indicates the clock source, processor clock source
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f043 0204 	orr.w	r2, r3, #4
 8000296:	693b      	ldr	r3, [r7, #16]
 8000298:	601a      	str	r2, [r3, #0]

	//enable systick
	*pSCSR |= (1 << 0);//enables the counter
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0201 	orr.w	r2, r3, #1
 80002a2:	693b      	ldr	r3, [r7, #16]
 80002a4:	601a      	str	r2, [r3, #0]

}
 80002a6:	bf00      	nop
 80002a8:	371c      	adds	r7, #28
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	e000e014 	.word	0xe000e014
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	00f42400 	.word	0x00f42400

080002bc <init_schedular_stack>:

__attribute__((naked)) void init_schedular_stack(uint32_t sched_top_of_stack){
 80002bc:	4603      	mov	r3, r0
	//__asm volatile("MSR MSP,R0");
	__asm volatile("MSR MSP,%0": : "r"(sched_top_of_stack) : );
 80002be:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002c2:	4770      	bx	lr
}
 80002c4:	bf00      	nop
	...

080002c8 <init_tasks_stack>:


void init_tasks_stack(void){
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0

	uint32_t *pPSP;
	for (int i = 0; i < MAX_TASKS; i++) {
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	e032      	b.n	800033a <init_tasks_stack+0x72>
		pPSP = (uint32_t*)psp_of_tasks[i];
 80002d4:	4a1d      	ldr	r2, [pc, #116]	; (800034c <init_tasks_stack+0x84>)
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3b04      	subs	r3, #4
 80002e2:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002ea:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3b04      	subs	r3, #4
 80002f0:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];//0x01000000
 80002f2:	4a17      	ldr	r2, [pc, #92]	; (8000350 <init_tasks_stack+0x88>)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	3b04      	subs	r3, #4
 8000302:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;//0x01000000
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f06f 0202 	mvn.w	r2, #2
 800030a:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++) {
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	e008      	b.n	8000324 <init_tasks_stack+0x5c>
			pPSP--; //R0 - R12
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	3b04      	subs	r3, #4
 8000316:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3301      	adds	r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b0c      	cmp	r3, #12
 8000328:	ddf3      	ble.n	8000312 <init_tasks_stack+0x4a>
		}


		psp_of_tasks[i] = (uint32_t)pPSP;
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	4907      	ldr	r1, [pc, #28]	; (800034c <init_tasks_stack+0x84>)
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < MAX_TASKS; i++) {
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	3301      	adds	r3, #1
 8000338:	60bb      	str	r3, [r7, #8]
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	2b03      	cmp	r3, #3
 800033e:	ddc9      	ble.n	80002d4 <init_tasks_stack+0xc>


	}

}
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000000 	.word	0x20000000
 8000350:	20000088 	.word	0x20000088

08000354 <enable_processor_fault>:


void enable_processor_fault(void){
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <enable_processor_fault+0x38>)
 800035c:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);//mem manage
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);//bus fault
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);//usage fault
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	601a      	str	r2, [r3, #0]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	e000ed24 	.word	0xe000ed24

08000390 <get_psp_value>:


uint32_t get_psp_value(void){
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <get_psp_value+0x18>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <get_psp_value+0x1c>)
 800039c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	20000098 	.word	0x20000098
 80003ac:	20000000 	.word	0x20000000

080003b0 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//1. initialize the PSP with TASK1 stack start
	//get the value if psp of current_task
	__asm volatile("PUSH {LR}");//preserved LR which connects back to main
 80003b0:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80003b2:	f7ff ffed 	bl	8000390 <get_psp_value>
	__asm volatile("MSR PSP, R0");//initialize psp
 80003b6:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");//pops back LR value
 80003ba:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0x02");
 80003be:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80003c2:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80003c6:	4770      	bx	lr

}
 80003c8:	bf00      	nop

080003ca <SysTick_Handler>:

void SysTick_Handler(void){
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
	...

080003d8 <HardFault_Handler>:

//Implement fault handlers
void HardFault_Handler(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 80003dc:	4801      	ldr	r0, [pc, #4]	; (80003e4 <HardFault_Handler+0xc>)
 80003de:	f000 fa07 	bl	80007f0 <puts>
	while(1);
 80003e2:	e7fe      	b.n	80003e2 <HardFault_Handler+0xa>
 80003e4:	08000f24 	.word	0x08000f24

080003e8 <MemManage_Handler>:
}
void MemManage_Handler(void){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	printf("Exception: MemManage\n");
 80003ec:	4801      	ldr	r0, [pc, #4]	; (80003f4 <MemManage_Handler+0xc>)
 80003ee:	f000 f9ff 	bl	80007f0 <puts>
	while(1);
 80003f2:	e7fe      	b.n	80003f2 <MemManage_Handler+0xa>
 80003f4:	08000f3c 	.word	0x08000f3c

080003f8 <BusFault_Handler>:
}
void BusFault_Handler(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 80003fc:	4801      	ldr	r0, [pc, #4]	; (8000404 <BusFault_Handler+0xc>)
 80003fe:	f000 f9f7 	bl	80007f0 <puts>
	while(1);
 8000402:	e7fe      	b.n	8000402 <BusFault_Handler+0xa>
 8000404:	08000f54 	.word	0x08000f54

08000408 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <ITM_SendChar+0x44>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a0d      	ldr	r2, [pc, #52]	; (800044c <ITM_SendChar+0x44>)
 8000418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800041c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <ITM_SendChar+0x48>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <ITM_SendChar+0x48>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800042a:	bf00      	nop
 800042c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f8      	beq.n	800042c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800043a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	6013      	str	r3, [r2, #0]
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	e000edfc 	.word	0xe000edfc
 8000450:	e0000e00 	.word	0xe0000e00

08000454 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e00a      	b.n	800047c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000466:	f3af 8000 	nop.w
 800046a:	4601      	mov	r1, r0
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	1c5a      	adds	r2, r3, #1
 8000470:	60ba      	str	r2, [r7, #8]
 8000472:	b2ca      	uxtb	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	3301      	adds	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	dbf0      	blt.n	8000466 <_read+0x12>
  }

  return len;
 8000484:	687b      	ldr	r3, [r7, #4]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b086      	sub	sp, #24
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	e009      	b.n	80004b4 <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	1c5a      	adds	r2, r3, #1
 80004a4:	60ba      	str	r2, [r7, #8]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ffad 	bl	8000408 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	3301      	adds	r3, #1
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	dbf1      	blt.n	80004a0 <_write+0x12>
  }
  return len;
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <_close>:

int _close(int file)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ec:	605a      	str	r2, [r3, #4]
  return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <_isatty>:

int _isatty(int file)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000502:	2301      	movs	r3, #1
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800050e:	b480      	push	{r7}
 8000510:	b085      	sub	sp, #20
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800051a:	2300      	movs	r3, #0
}
 800051c:	4618      	mov	r0, r3
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
	...

08000528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <_sbrk+0x5c>)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_sbrk+0x60>)
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <_sbrk+0x64>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <_sbrk+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d207      	bcs.n	8000568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000558:	f000 fa78 	bl	8000a4c <__errno>
 800055c:	4603      	mov	r3, r0
 800055e:	220c      	movs	r2, #12
 8000560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	e009      	b.n	800057c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <_sbrk+0x64>)
 8000578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20020000 	.word	0x20020000
 8000588:	00000400 	.word	0x00000400
 800058c:	2000009c 	.word	0x2000009c
 8000590:	200001f0 	.word	0x200001f0

08000594 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000596:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000598:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800059e:	490d      	ldr	r1, [pc, #52]	; (80005d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <LoopForever+0xe>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b4:	4c0a      	ldr	r4, [pc, #40]	; (80005e0 <LoopForever+0x16>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c2:	f000 fa49 	bl	8000a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff fe0f 	bl	80001e8 <main>

080005ca <LoopForever>:

LoopForever:
  b LoopForever
 80005ca:	e7fe      	b.n	80005ca <LoopForever>
  ldr   r0, =_estack
 80005cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80005d8:	08000f70 	.word	0x08000f70
  ldr r2, =_sbss
 80005dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80005e0:	200001ec 	.word	0x200001ec

080005e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC_IRQHandler>
	...

080005e8 <std>:
 80005e8:	2300      	movs	r3, #0
 80005ea:	b510      	push	{r4, lr}
 80005ec:	4604      	mov	r4, r0
 80005ee:	e9c0 3300 	strd	r3, r3, [r0]
 80005f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005f6:	6083      	str	r3, [r0, #8]
 80005f8:	8181      	strh	r1, [r0, #12]
 80005fa:	6643      	str	r3, [r0, #100]	; 0x64
 80005fc:	81c2      	strh	r2, [r0, #14]
 80005fe:	6183      	str	r3, [r0, #24]
 8000600:	4619      	mov	r1, r3
 8000602:	2208      	movs	r2, #8
 8000604:	305c      	adds	r0, #92	; 0x5c
 8000606:	f000 f9d3 	bl	80009b0 <memset>
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <std+0x38>)
 800060c:	6263      	str	r3, [r4, #36]	; 0x24
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <std+0x3c>)
 8000610:	62a3      	str	r3, [r4, #40]	; 0x28
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <std+0x40>)
 8000614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <std+0x44>)
 8000618:	6224      	str	r4, [r4, #32]
 800061a:	6323      	str	r3, [r4, #48]	; 0x30
 800061c:	bd10      	pop	{r4, pc}
 800061e:	bf00      	nop
 8000620:	08000801 	.word	0x08000801
 8000624:	08000823 	.word	0x08000823
 8000628:	0800085b 	.word	0x0800085b
 800062c:	0800087f 	.word	0x0800087f

08000630 <stdio_exit_handler>:
 8000630:	4a02      	ldr	r2, [pc, #8]	; (800063c <stdio_exit_handler+0xc>)
 8000632:	4903      	ldr	r1, [pc, #12]	; (8000640 <stdio_exit_handler+0x10>)
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <stdio_exit_handler+0x14>)
 8000636:	f000 b869 	b.w	800070c <_fwalk_sglue>
 800063a:	bf00      	nop
 800063c:	20000010 	.word	0x20000010
 8000640:	08000d95 	.word	0x08000d95
 8000644:	2000001c 	.word	0x2000001c

08000648 <cleanup_stdio>:
 8000648:	6841      	ldr	r1, [r0, #4]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <cleanup_stdio+0x34>)
 800064c:	4299      	cmp	r1, r3
 800064e:	b510      	push	{r4, lr}
 8000650:	4604      	mov	r4, r0
 8000652:	d001      	beq.n	8000658 <cleanup_stdio+0x10>
 8000654:	f000 fb9e 	bl	8000d94 <_fflush_r>
 8000658:	68a1      	ldr	r1, [r4, #8]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <cleanup_stdio+0x38>)
 800065c:	4299      	cmp	r1, r3
 800065e:	d002      	beq.n	8000666 <cleanup_stdio+0x1e>
 8000660:	4620      	mov	r0, r4
 8000662:	f000 fb97 	bl	8000d94 <_fflush_r>
 8000666:	68e1      	ldr	r1, [r4, #12]
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <cleanup_stdio+0x3c>)
 800066a:	4299      	cmp	r1, r3
 800066c:	d004      	beq.n	8000678 <cleanup_stdio+0x30>
 800066e:	4620      	mov	r0, r4
 8000670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000674:	f000 bb8e 	b.w	8000d94 <_fflush_r>
 8000678:	bd10      	pop	{r4, pc}
 800067a:	bf00      	nop
 800067c:	200000a0 	.word	0x200000a0
 8000680:	20000108 	.word	0x20000108
 8000684:	20000170 	.word	0x20000170

08000688 <global_stdio_init.part.0>:
 8000688:	b510      	push	{r4, lr}
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <global_stdio_init.part.0+0x30>)
 800068c:	4c0b      	ldr	r4, [pc, #44]	; (80006bc <global_stdio_init.part.0+0x34>)
 800068e:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <global_stdio_init.part.0+0x38>)
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	4620      	mov	r0, r4
 8000694:	2200      	movs	r2, #0
 8000696:	2104      	movs	r1, #4
 8000698:	f7ff ffa6 	bl	80005e8 <std>
 800069c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006a0:	2201      	movs	r2, #1
 80006a2:	2109      	movs	r1, #9
 80006a4:	f7ff ffa0 	bl	80005e8 <std>
 80006a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006ac:	2202      	movs	r2, #2
 80006ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b2:	2112      	movs	r1, #18
 80006b4:	f7ff bf98 	b.w	80005e8 <std>
 80006b8:	200001d8 	.word	0x200001d8
 80006bc:	200000a0 	.word	0x200000a0
 80006c0:	08000631 	.word	0x08000631

080006c4 <__sfp_lock_acquire>:
 80006c4:	4801      	ldr	r0, [pc, #4]	; (80006cc <__sfp_lock_acquire+0x8>)
 80006c6:	f000 b9eb 	b.w	8000aa0 <__retarget_lock_acquire_recursive>
 80006ca:	bf00      	nop
 80006cc:	200001e1 	.word	0x200001e1

080006d0 <__sfp_lock_release>:
 80006d0:	4801      	ldr	r0, [pc, #4]	; (80006d8 <__sfp_lock_release+0x8>)
 80006d2:	f000 b9e6 	b.w	8000aa2 <__retarget_lock_release_recursive>
 80006d6:	bf00      	nop
 80006d8:	200001e1 	.word	0x200001e1

080006dc <__sinit>:
 80006dc:	b510      	push	{r4, lr}
 80006de:	4604      	mov	r4, r0
 80006e0:	f7ff fff0 	bl	80006c4 <__sfp_lock_acquire>
 80006e4:	6a23      	ldr	r3, [r4, #32]
 80006e6:	b11b      	cbz	r3, 80006f0 <__sinit+0x14>
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	f7ff bff0 	b.w	80006d0 <__sfp_lock_release>
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__sinit+0x28>)
 80006f2:	6223      	str	r3, [r4, #32]
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__sinit+0x2c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f5      	bne.n	80006e8 <__sinit+0xc>
 80006fc:	f7ff ffc4 	bl	8000688 <global_stdio_init.part.0>
 8000700:	e7f2      	b.n	80006e8 <__sinit+0xc>
 8000702:	bf00      	nop
 8000704:	08000649 	.word	0x08000649
 8000708:	200001d8 	.word	0x200001d8

0800070c <_fwalk_sglue>:
 800070c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000710:	4607      	mov	r7, r0
 8000712:	4688      	mov	r8, r1
 8000714:	4614      	mov	r4, r2
 8000716:	2600      	movs	r6, #0
 8000718:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800071c:	f1b9 0901 	subs.w	r9, r9, #1
 8000720:	d505      	bpl.n	800072e <_fwalk_sglue+0x22>
 8000722:	6824      	ldr	r4, [r4, #0]
 8000724:	2c00      	cmp	r4, #0
 8000726:	d1f7      	bne.n	8000718 <_fwalk_sglue+0xc>
 8000728:	4630      	mov	r0, r6
 800072a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800072e:	89ab      	ldrh	r3, [r5, #12]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d907      	bls.n	8000744 <_fwalk_sglue+0x38>
 8000734:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000738:	3301      	adds	r3, #1
 800073a:	d003      	beq.n	8000744 <_fwalk_sglue+0x38>
 800073c:	4629      	mov	r1, r5
 800073e:	4638      	mov	r0, r7
 8000740:	47c0      	blx	r8
 8000742:	4306      	orrs	r6, r0
 8000744:	3568      	adds	r5, #104	; 0x68
 8000746:	e7e9      	b.n	800071c <_fwalk_sglue+0x10>

08000748 <_puts_r>:
 8000748:	6a03      	ldr	r3, [r0, #32]
 800074a:	b570      	push	{r4, r5, r6, lr}
 800074c:	6884      	ldr	r4, [r0, #8]
 800074e:	4605      	mov	r5, r0
 8000750:	460e      	mov	r6, r1
 8000752:	b90b      	cbnz	r3, 8000758 <_puts_r+0x10>
 8000754:	f7ff ffc2 	bl	80006dc <__sinit>
 8000758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800075a:	07db      	lsls	r3, r3, #31
 800075c:	d405      	bmi.n	800076a <_puts_r+0x22>
 800075e:	89a3      	ldrh	r3, [r4, #12]
 8000760:	0598      	lsls	r0, r3, #22
 8000762:	d402      	bmi.n	800076a <_puts_r+0x22>
 8000764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000766:	f000 f99b 	bl	8000aa0 <__retarget_lock_acquire_recursive>
 800076a:	89a3      	ldrh	r3, [r4, #12]
 800076c:	0719      	lsls	r1, r3, #28
 800076e:	d513      	bpl.n	8000798 <_puts_r+0x50>
 8000770:	6923      	ldr	r3, [r4, #16]
 8000772:	b18b      	cbz	r3, 8000798 <_puts_r+0x50>
 8000774:	3e01      	subs	r6, #1
 8000776:	68a3      	ldr	r3, [r4, #8]
 8000778:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800077c:	3b01      	subs	r3, #1
 800077e:	60a3      	str	r3, [r4, #8]
 8000780:	b9e9      	cbnz	r1, 80007be <_puts_r+0x76>
 8000782:	2b00      	cmp	r3, #0
 8000784:	da2e      	bge.n	80007e4 <_puts_r+0x9c>
 8000786:	4622      	mov	r2, r4
 8000788:	210a      	movs	r1, #10
 800078a:	4628      	mov	r0, r5
 800078c:	f000 f87b 	bl	8000886 <__swbuf_r>
 8000790:	3001      	adds	r0, #1
 8000792:	d007      	beq.n	80007a4 <_puts_r+0x5c>
 8000794:	250a      	movs	r5, #10
 8000796:	e007      	b.n	80007a8 <_puts_r+0x60>
 8000798:	4621      	mov	r1, r4
 800079a:	4628      	mov	r0, r5
 800079c:	f000 f8b0 	bl	8000900 <__swsetup_r>
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d0e7      	beq.n	8000774 <_puts_r+0x2c>
 80007a4:	f04f 35ff 	mov.w	r5, #4294967295
 80007a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007aa:	07da      	lsls	r2, r3, #31
 80007ac:	d405      	bmi.n	80007ba <_puts_r+0x72>
 80007ae:	89a3      	ldrh	r3, [r4, #12]
 80007b0:	059b      	lsls	r3, r3, #22
 80007b2:	d402      	bmi.n	80007ba <_puts_r+0x72>
 80007b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007b6:	f000 f974 	bl	8000aa2 <__retarget_lock_release_recursive>
 80007ba:	4628      	mov	r0, r5
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da04      	bge.n	80007cc <_puts_r+0x84>
 80007c2:	69a2      	ldr	r2, [r4, #24]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dc06      	bgt.n	80007d6 <_puts_r+0x8e>
 80007c8:	290a      	cmp	r1, #10
 80007ca:	d004      	beq.n	80007d6 <_puts_r+0x8e>
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	6022      	str	r2, [r4, #0]
 80007d2:	7019      	strb	r1, [r3, #0]
 80007d4:	e7cf      	b.n	8000776 <_puts_r+0x2e>
 80007d6:	4622      	mov	r2, r4
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f854 	bl	8000886 <__swbuf_r>
 80007de:	3001      	adds	r0, #1
 80007e0:	d1c9      	bne.n	8000776 <_puts_r+0x2e>
 80007e2:	e7df      	b.n	80007a4 <_puts_r+0x5c>
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	250a      	movs	r5, #10
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	6022      	str	r2, [r4, #0]
 80007ec:	701d      	strb	r5, [r3, #0]
 80007ee:	e7db      	b.n	80007a8 <_puts_r+0x60>

080007f0 <puts>:
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <puts+0xc>)
 80007f2:	4601      	mov	r1, r0
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	f7ff bfa7 	b.w	8000748 <_puts_r>
 80007fa:	bf00      	nop
 80007fc:	20000068 	.word	0x20000068

08000800 <__sread>:
 8000800:	b510      	push	{r4, lr}
 8000802:	460c      	mov	r4, r1
 8000804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000808:	f000 f8fc 	bl	8000a04 <_read_r>
 800080c:	2800      	cmp	r0, #0
 800080e:	bfab      	itete	ge
 8000810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000812:	89a3      	ldrhlt	r3, [r4, #12]
 8000814:	181b      	addge	r3, r3, r0
 8000816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800081a:	bfac      	ite	ge
 800081c:	6563      	strge	r3, [r4, #84]	; 0x54
 800081e:	81a3      	strhlt	r3, [r4, #12]
 8000820:	bd10      	pop	{r4, pc}

08000822 <__swrite>:
 8000822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000826:	461f      	mov	r7, r3
 8000828:	898b      	ldrh	r3, [r1, #12]
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	4605      	mov	r5, r0
 800082e:	460c      	mov	r4, r1
 8000830:	4616      	mov	r6, r2
 8000832:	d505      	bpl.n	8000840 <__swrite+0x1e>
 8000834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000838:	2302      	movs	r3, #2
 800083a:	2200      	movs	r2, #0
 800083c:	f000 f8d0 	bl	80009e0 <_lseek_r>
 8000840:	89a3      	ldrh	r3, [r4, #12]
 8000842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800084a:	81a3      	strh	r3, [r4, #12]
 800084c:	4632      	mov	r2, r6
 800084e:	463b      	mov	r3, r7
 8000850:	4628      	mov	r0, r5
 8000852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000856:	f000 b8e7 	b.w	8000a28 <_write_r>

0800085a <__sseek>:
 800085a:	b510      	push	{r4, lr}
 800085c:	460c      	mov	r4, r1
 800085e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000862:	f000 f8bd 	bl	80009e0 <_lseek_r>
 8000866:	1c43      	adds	r3, r0, #1
 8000868:	89a3      	ldrh	r3, [r4, #12]
 800086a:	bf15      	itete	ne
 800086c:	6560      	strne	r0, [r4, #84]	; 0x54
 800086e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000872:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000876:	81a3      	strheq	r3, [r4, #12]
 8000878:	bf18      	it	ne
 800087a:	81a3      	strhne	r3, [r4, #12]
 800087c:	bd10      	pop	{r4, pc}

0800087e <__sclose>:
 800087e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000882:	f000 b89d 	b.w	80009c0 <_close_r>

08000886 <__swbuf_r>:
 8000886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000888:	460e      	mov	r6, r1
 800088a:	4614      	mov	r4, r2
 800088c:	4605      	mov	r5, r0
 800088e:	b118      	cbz	r0, 8000898 <__swbuf_r+0x12>
 8000890:	6a03      	ldr	r3, [r0, #32]
 8000892:	b90b      	cbnz	r3, 8000898 <__swbuf_r+0x12>
 8000894:	f7ff ff22 	bl	80006dc <__sinit>
 8000898:	69a3      	ldr	r3, [r4, #24]
 800089a:	60a3      	str	r3, [r4, #8]
 800089c:	89a3      	ldrh	r3, [r4, #12]
 800089e:	071a      	lsls	r2, r3, #28
 80008a0:	d525      	bpl.n	80008ee <__swbuf_r+0x68>
 80008a2:	6923      	ldr	r3, [r4, #16]
 80008a4:	b31b      	cbz	r3, 80008ee <__swbuf_r+0x68>
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	6922      	ldr	r2, [r4, #16]
 80008aa:	1a98      	subs	r0, r3, r2
 80008ac:	6963      	ldr	r3, [r4, #20]
 80008ae:	b2f6      	uxtb	r6, r6
 80008b0:	4283      	cmp	r3, r0
 80008b2:	4637      	mov	r7, r6
 80008b4:	dc04      	bgt.n	80008c0 <__swbuf_r+0x3a>
 80008b6:	4621      	mov	r1, r4
 80008b8:	4628      	mov	r0, r5
 80008ba:	f000 fa6b 	bl	8000d94 <_fflush_r>
 80008be:	b9e0      	cbnz	r0, 80008fa <__swbuf_r+0x74>
 80008c0:	68a3      	ldr	r3, [r4, #8]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	60a3      	str	r3, [r4, #8]
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	6022      	str	r2, [r4, #0]
 80008cc:	701e      	strb	r6, [r3, #0]
 80008ce:	6962      	ldr	r2, [r4, #20]
 80008d0:	1c43      	adds	r3, r0, #1
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d004      	beq.n	80008e0 <__swbuf_r+0x5a>
 80008d6:	89a3      	ldrh	r3, [r4, #12]
 80008d8:	07db      	lsls	r3, r3, #31
 80008da:	d506      	bpl.n	80008ea <__swbuf_r+0x64>
 80008dc:	2e0a      	cmp	r6, #10
 80008de:	d104      	bne.n	80008ea <__swbuf_r+0x64>
 80008e0:	4621      	mov	r1, r4
 80008e2:	4628      	mov	r0, r5
 80008e4:	f000 fa56 	bl	8000d94 <_fflush_r>
 80008e8:	b938      	cbnz	r0, 80008fa <__swbuf_r+0x74>
 80008ea:	4638      	mov	r0, r7
 80008ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ee:	4621      	mov	r1, r4
 80008f0:	4628      	mov	r0, r5
 80008f2:	f000 f805 	bl	8000900 <__swsetup_r>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d0d5      	beq.n	80008a6 <__swbuf_r+0x20>
 80008fa:	f04f 37ff 	mov.w	r7, #4294967295
 80008fe:	e7f4      	b.n	80008ea <__swbuf_r+0x64>

08000900 <__swsetup_r>:
 8000900:	b538      	push	{r3, r4, r5, lr}
 8000902:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <__swsetup_r+0xac>)
 8000904:	4605      	mov	r5, r0
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	460c      	mov	r4, r1
 800090a:	b118      	cbz	r0, 8000914 <__swsetup_r+0x14>
 800090c:	6a03      	ldr	r3, [r0, #32]
 800090e:	b90b      	cbnz	r3, 8000914 <__swsetup_r+0x14>
 8000910:	f7ff fee4 	bl	80006dc <__sinit>
 8000914:	89a3      	ldrh	r3, [r4, #12]
 8000916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800091a:	0718      	lsls	r0, r3, #28
 800091c:	d422      	bmi.n	8000964 <__swsetup_r+0x64>
 800091e:	06d9      	lsls	r1, r3, #27
 8000920:	d407      	bmi.n	8000932 <__swsetup_r+0x32>
 8000922:	2309      	movs	r3, #9
 8000924:	602b      	str	r3, [r5, #0]
 8000926:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800092a:	81a3      	strh	r3, [r4, #12]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	e034      	b.n	800099c <__swsetup_r+0x9c>
 8000932:	0758      	lsls	r0, r3, #29
 8000934:	d512      	bpl.n	800095c <__swsetup_r+0x5c>
 8000936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000938:	b141      	cbz	r1, 800094c <__swsetup_r+0x4c>
 800093a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800093e:	4299      	cmp	r1, r3
 8000940:	d002      	beq.n	8000948 <__swsetup_r+0x48>
 8000942:	4628      	mov	r0, r5
 8000944:	f000 f8ae 	bl	8000aa4 <_free_r>
 8000948:	2300      	movs	r3, #0
 800094a:	6363      	str	r3, [r4, #52]	; 0x34
 800094c:	89a3      	ldrh	r3, [r4, #12]
 800094e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000952:	81a3      	strh	r3, [r4, #12]
 8000954:	2300      	movs	r3, #0
 8000956:	6063      	str	r3, [r4, #4]
 8000958:	6923      	ldr	r3, [r4, #16]
 800095a:	6023      	str	r3, [r4, #0]
 800095c:	89a3      	ldrh	r3, [r4, #12]
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	81a3      	strh	r3, [r4, #12]
 8000964:	6923      	ldr	r3, [r4, #16]
 8000966:	b94b      	cbnz	r3, 800097c <__swsetup_r+0x7c>
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800096e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000972:	d003      	beq.n	800097c <__swsetup_r+0x7c>
 8000974:	4621      	mov	r1, r4
 8000976:	4628      	mov	r0, r5
 8000978:	f000 fa5a 	bl	8000e30 <__smakebuf_r>
 800097c:	89a0      	ldrh	r0, [r4, #12]
 800097e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000982:	f010 0301 	ands.w	r3, r0, #1
 8000986:	d00a      	beq.n	800099e <__swsetup_r+0x9e>
 8000988:	2300      	movs	r3, #0
 800098a:	60a3      	str	r3, [r4, #8]
 800098c:	6963      	ldr	r3, [r4, #20]
 800098e:	425b      	negs	r3, r3
 8000990:	61a3      	str	r3, [r4, #24]
 8000992:	6923      	ldr	r3, [r4, #16]
 8000994:	b943      	cbnz	r3, 80009a8 <__swsetup_r+0xa8>
 8000996:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800099a:	d1c4      	bne.n	8000926 <__swsetup_r+0x26>
 800099c:	bd38      	pop	{r3, r4, r5, pc}
 800099e:	0781      	lsls	r1, r0, #30
 80009a0:	bf58      	it	pl
 80009a2:	6963      	ldrpl	r3, [r4, #20]
 80009a4:	60a3      	str	r3, [r4, #8]
 80009a6:	e7f4      	b.n	8000992 <__swsetup_r+0x92>
 80009a8:	2000      	movs	r0, #0
 80009aa:	e7f7      	b.n	800099c <__swsetup_r+0x9c>
 80009ac:	20000068 	.word	0x20000068

080009b0 <memset>:
 80009b0:	4402      	add	r2, r0
 80009b2:	4603      	mov	r3, r0
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d100      	bne.n	80009ba <memset+0xa>
 80009b8:	4770      	bx	lr
 80009ba:	f803 1b01 	strb.w	r1, [r3], #1
 80009be:	e7f9      	b.n	80009b4 <memset+0x4>

080009c0 <_close_r>:
 80009c0:	b538      	push	{r3, r4, r5, lr}
 80009c2:	4d06      	ldr	r5, [pc, #24]	; (80009dc <_close_r+0x1c>)
 80009c4:	2300      	movs	r3, #0
 80009c6:	4604      	mov	r4, r0
 80009c8:	4608      	mov	r0, r1
 80009ca:	602b      	str	r3, [r5, #0]
 80009cc:	f7ff fd7b 	bl	80004c6 <_close>
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	d102      	bne.n	80009da <_close_r+0x1a>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	b103      	cbz	r3, 80009da <_close_r+0x1a>
 80009d8:	6023      	str	r3, [r4, #0]
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	200001dc 	.word	0x200001dc

080009e0 <_lseek_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4d07      	ldr	r5, [pc, #28]	; (8000a00 <_lseek_r+0x20>)
 80009e4:	4604      	mov	r4, r0
 80009e6:	4608      	mov	r0, r1
 80009e8:	4611      	mov	r1, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	602a      	str	r2, [r5, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	f7ff fd8d 	bl	800050e <_lseek>
 80009f4:	1c43      	adds	r3, r0, #1
 80009f6:	d102      	bne.n	80009fe <_lseek_r+0x1e>
 80009f8:	682b      	ldr	r3, [r5, #0]
 80009fa:	b103      	cbz	r3, 80009fe <_lseek_r+0x1e>
 80009fc:	6023      	str	r3, [r4, #0]
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
 8000a00:	200001dc 	.word	0x200001dc

08000a04 <_read_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	4d07      	ldr	r5, [pc, #28]	; (8000a24 <_read_r+0x20>)
 8000a08:	4604      	mov	r4, r0
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	2200      	movs	r2, #0
 8000a10:	602a      	str	r2, [r5, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	f7ff fd1e 	bl	8000454 <_read>
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	d102      	bne.n	8000a22 <_read_r+0x1e>
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	b103      	cbz	r3, 8000a22 <_read_r+0x1e>
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
 8000a24:	200001dc 	.word	0x200001dc

08000a28 <_write_r>:
 8000a28:	b538      	push	{r3, r4, r5, lr}
 8000a2a:	4d07      	ldr	r5, [pc, #28]	; (8000a48 <_write_r+0x20>)
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	4608      	mov	r0, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	2200      	movs	r2, #0
 8000a34:	602a      	str	r2, [r5, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	f7ff fd29 	bl	800048e <_write>
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	d102      	bne.n	8000a46 <_write_r+0x1e>
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	b103      	cbz	r3, 8000a46 <_write_r+0x1e>
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	200001dc 	.word	0x200001dc

08000a4c <__errno>:
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <__errno+0x8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000068 	.word	0x20000068

08000a58 <__libc_init_array>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4d0d      	ldr	r5, [pc, #52]	; (8000a90 <__libc_init_array+0x38>)
 8000a5c:	4c0d      	ldr	r4, [pc, #52]	; (8000a94 <__libc_init_array+0x3c>)
 8000a5e:	1b64      	subs	r4, r4, r5
 8000a60:	10a4      	asrs	r4, r4, #2
 8000a62:	2600      	movs	r6, #0
 8000a64:	42a6      	cmp	r6, r4
 8000a66:	d109      	bne.n	8000a7c <__libc_init_array+0x24>
 8000a68:	4d0b      	ldr	r5, [pc, #44]	; (8000a98 <__libc_init_array+0x40>)
 8000a6a:	4c0c      	ldr	r4, [pc, #48]	; (8000a9c <__libc_init_array+0x44>)
 8000a6c:	f000 fa4e 	bl	8000f0c <_init>
 8000a70:	1b64      	subs	r4, r4, r5
 8000a72:	10a4      	asrs	r4, r4, #2
 8000a74:	2600      	movs	r6, #0
 8000a76:	42a6      	cmp	r6, r4
 8000a78:	d105      	bne.n	8000a86 <__libc_init_array+0x2e>
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a80:	4798      	blx	r3
 8000a82:	3601      	adds	r6, #1
 8000a84:	e7ee      	b.n	8000a64 <__libc_init_array+0xc>
 8000a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8a:	4798      	blx	r3
 8000a8c:	3601      	adds	r6, #1
 8000a8e:	e7f2      	b.n	8000a76 <__libc_init_array+0x1e>
 8000a90:	08000f68 	.word	0x08000f68
 8000a94:	08000f68 	.word	0x08000f68
 8000a98:	08000f68 	.word	0x08000f68
 8000a9c:	08000f6c 	.word	0x08000f6c

08000aa0 <__retarget_lock_acquire_recursive>:
 8000aa0:	4770      	bx	lr

08000aa2 <__retarget_lock_release_recursive>:
 8000aa2:	4770      	bx	lr

08000aa4 <_free_r>:
 8000aa4:	b538      	push	{r3, r4, r5, lr}
 8000aa6:	4605      	mov	r5, r0
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d041      	beq.n	8000b30 <_free_r+0x8c>
 8000aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ab0:	1f0c      	subs	r4, r1, #4
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	bfb8      	it	lt
 8000ab6:	18e4      	addlt	r4, r4, r3
 8000ab8:	f000 f8de 	bl	8000c78 <__malloc_lock>
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <_free_r+0x90>)
 8000abe:	6813      	ldr	r3, [r2, #0]
 8000ac0:	b933      	cbnz	r3, 8000ad0 <_free_r+0x2c>
 8000ac2:	6063      	str	r3, [r4, #4]
 8000ac4:	6014      	str	r4, [r2, #0]
 8000ac6:	4628      	mov	r0, r5
 8000ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000acc:	f000 b8da 	b.w	8000c84 <__malloc_unlock>
 8000ad0:	42a3      	cmp	r3, r4
 8000ad2:	d908      	bls.n	8000ae6 <_free_r+0x42>
 8000ad4:	6820      	ldr	r0, [r4, #0]
 8000ad6:	1821      	adds	r1, r4, r0
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	bf01      	itttt	eq
 8000adc:	6819      	ldreq	r1, [r3, #0]
 8000ade:	685b      	ldreq	r3, [r3, #4]
 8000ae0:	1809      	addeq	r1, r1, r0
 8000ae2:	6021      	streq	r1, [r4, #0]
 8000ae4:	e7ed      	b.n	8000ac2 <_free_r+0x1e>
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	b10b      	cbz	r3, 8000af0 <_free_r+0x4c>
 8000aec:	42a3      	cmp	r3, r4
 8000aee:	d9fa      	bls.n	8000ae6 <_free_r+0x42>
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	1850      	adds	r0, r2, r1
 8000af4:	42a0      	cmp	r0, r4
 8000af6:	d10b      	bne.n	8000b10 <_free_r+0x6c>
 8000af8:	6820      	ldr	r0, [r4, #0]
 8000afa:	4401      	add	r1, r0
 8000afc:	1850      	adds	r0, r2, r1
 8000afe:	4283      	cmp	r3, r0
 8000b00:	6011      	str	r1, [r2, #0]
 8000b02:	d1e0      	bne.n	8000ac6 <_free_r+0x22>
 8000b04:	6818      	ldr	r0, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	6053      	str	r3, [r2, #4]
 8000b0a:	4408      	add	r0, r1
 8000b0c:	6010      	str	r0, [r2, #0]
 8000b0e:	e7da      	b.n	8000ac6 <_free_r+0x22>
 8000b10:	d902      	bls.n	8000b18 <_free_r+0x74>
 8000b12:	230c      	movs	r3, #12
 8000b14:	602b      	str	r3, [r5, #0]
 8000b16:	e7d6      	b.n	8000ac6 <_free_r+0x22>
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	1821      	adds	r1, r4, r0
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	bf04      	itt	eq
 8000b20:	6819      	ldreq	r1, [r3, #0]
 8000b22:	685b      	ldreq	r3, [r3, #4]
 8000b24:	6063      	str	r3, [r4, #4]
 8000b26:	bf04      	itt	eq
 8000b28:	1809      	addeq	r1, r1, r0
 8000b2a:	6021      	streq	r1, [r4, #0]
 8000b2c:	6054      	str	r4, [r2, #4]
 8000b2e:	e7ca      	b.n	8000ac6 <_free_r+0x22>
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop
 8000b34:	200001e4 	.word	0x200001e4

08000b38 <sbrk_aligned>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4e0e      	ldr	r6, [pc, #56]	; (8000b74 <sbrk_aligned+0x3c>)
 8000b3c:	460c      	mov	r4, r1
 8000b3e:	6831      	ldr	r1, [r6, #0]
 8000b40:	4605      	mov	r5, r0
 8000b42:	b911      	cbnz	r1, 8000b4a <sbrk_aligned+0x12>
 8000b44:	f000 f9d2 	bl	8000eec <_sbrk_r>
 8000b48:	6030      	str	r0, [r6, #0]
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	f000 f9cd 	bl	8000eec <_sbrk_r>
 8000b52:	1c43      	adds	r3, r0, #1
 8000b54:	d00a      	beq.n	8000b6c <sbrk_aligned+0x34>
 8000b56:	1cc4      	adds	r4, r0, #3
 8000b58:	f024 0403 	bic.w	r4, r4, #3
 8000b5c:	42a0      	cmp	r0, r4
 8000b5e:	d007      	beq.n	8000b70 <sbrk_aligned+0x38>
 8000b60:	1a21      	subs	r1, r4, r0
 8000b62:	4628      	mov	r0, r5
 8000b64:	f000 f9c2 	bl	8000eec <_sbrk_r>
 8000b68:	3001      	adds	r0, #1
 8000b6a:	d101      	bne.n	8000b70 <sbrk_aligned+0x38>
 8000b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8000b70:	4620      	mov	r0, r4
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	200001e8 	.word	0x200001e8

08000b78 <_malloc_r>:
 8000b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b7c:	1ccd      	adds	r5, r1, #3
 8000b7e:	f025 0503 	bic.w	r5, r5, #3
 8000b82:	3508      	adds	r5, #8
 8000b84:	2d0c      	cmp	r5, #12
 8000b86:	bf38      	it	cc
 8000b88:	250c      	movcc	r5, #12
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	4607      	mov	r7, r0
 8000b8e:	db01      	blt.n	8000b94 <_malloc_r+0x1c>
 8000b90:	42a9      	cmp	r1, r5
 8000b92:	d905      	bls.n	8000ba0 <_malloc_r+0x28>
 8000b94:	230c      	movs	r3, #12
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	2600      	movs	r6, #0
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c74 <_malloc_r+0xfc>
 8000ba4:	f000 f868 	bl	8000c78 <__malloc_lock>
 8000ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bac:	461c      	mov	r4, r3
 8000bae:	bb5c      	cbnz	r4, 8000c08 <_malloc_r+0x90>
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	f7ff ffc0 	bl	8000b38 <sbrk_aligned>
 8000bb8:	1c43      	adds	r3, r0, #1
 8000bba:	4604      	mov	r4, r0
 8000bbc:	d155      	bne.n	8000c6a <_malloc_r+0xf2>
 8000bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8000bc2:	4626      	mov	r6, r4
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d145      	bne.n	8000c54 <_malloc_r+0xdc>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d048      	beq.n	8000c5e <_malloc_r+0xe6>
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	4631      	mov	r1, r6
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	eb04 0903 	add.w	r9, r4, r3
 8000bd6:	f000 f989 	bl	8000eec <_sbrk_r>
 8000bda:	4581      	cmp	r9, r0
 8000bdc:	d13f      	bne.n	8000c5e <_malloc_r+0xe6>
 8000bde:	6821      	ldr	r1, [r4, #0]
 8000be0:	1a6d      	subs	r5, r5, r1
 8000be2:	4629      	mov	r1, r5
 8000be4:	4638      	mov	r0, r7
 8000be6:	f7ff ffa7 	bl	8000b38 <sbrk_aligned>
 8000bea:	3001      	adds	r0, #1
 8000bec:	d037      	beq.n	8000c5e <_malloc_r+0xe6>
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	442b      	add	r3, r5
 8000bf2:	6023      	str	r3, [r4, #0]
 8000bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d038      	beq.n	8000c6e <_malloc_r+0xf6>
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	42a2      	cmp	r2, r4
 8000c00:	d12b      	bne.n	8000c5a <_malloc_r+0xe2>
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	e00f      	b.n	8000c28 <_malloc_r+0xb0>
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	1b52      	subs	r2, r2, r5
 8000c0c:	d41f      	bmi.n	8000c4e <_malloc_r+0xd6>
 8000c0e:	2a0b      	cmp	r2, #11
 8000c10:	d917      	bls.n	8000c42 <_malloc_r+0xca>
 8000c12:	1961      	adds	r1, r4, r5
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	6025      	str	r5, [r4, #0]
 8000c18:	bf18      	it	ne
 8000c1a:	6059      	strne	r1, [r3, #4]
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	bf08      	it	eq
 8000c20:	f8c8 1000 	streq.w	r1, [r8]
 8000c24:	5162      	str	r2, [r4, r5]
 8000c26:	604b      	str	r3, [r1, #4]
 8000c28:	4638      	mov	r0, r7
 8000c2a:	f104 060b 	add.w	r6, r4, #11
 8000c2e:	f000 f829 	bl	8000c84 <__malloc_unlock>
 8000c32:	f026 0607 	bic.w	r6, r6, #7
 8000c36:	1d23      	adds	r3, r4, #4
 8000c38:	1af2      	subs	r2, r6, r3
 8000c3a:	d0ae      	beq.n	8000b9a <_malloc_r+0x22>
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	50a3      	str	r3, [r4, r2]
 8000c40:	e7ab      	b.n	8000b9a <_malloc_r+0x22>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	6862      	ldr	r2, [r4, #4]
 8000c46:	d1dd      	bne.n	8000c04 <_malloc_r+0x8c>
 8000c48:	f8c8 2000 	str.w	r2, [r8]
 8000c4c:	e7ec      	b.n	8000c28 <_malloc_r+0xb0>
 8000c4e:	4623      	mov	r3, r4
 8000c50:	6864      	ldr	r4, [r4, #4]
 8000c52:	e7ac      	b.n	8000bae <_malloc_r+0x36>
 8000c54:	4634      	mov	r4, r6
 8000c56:	6876      	ldr	r6, [r6, #4]
 8000c58:	e7b4      	b.n	8000bc4 <_malloc_r+0x4c>
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	e7cc      	b.n	8000bf8 <_malloc_r+0x80>
 8000c5e:	230c      	movs	r3, #12
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	4638      	mov	r0, r7
 8000c64:	f000 f80e 	bl	8000c84 <__malloc_unlock>
 8000c68:	e797      	b.n	8000b9a <_malloc_r+0x22>
 8000c6a:	6025      	str	r5, [r4, #0]
 8000c6c:	e7dc      	b.n	8000c28 <_malloc_r+0xb0>
 8000c6e:	605b      	str	r3, [r3, #4]
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	bf00      	nop
 8000c74:	200001e4 	.word	0x200001e4

08000c78 <__malloc_lock>:
 8000c78:	4801      	ldr	r0, [pc, #4]	; (8000c80 <__malloc_lock+0x8>)
 8000c7a:	f7ff bf11 	b.w	8000aa0 <__retarget_lock_acquire_recursive>
 8000c7e:	bf00      	nop
 8000c80:	200001e0 	.word	0x200001e0

08000c84 <__malloc_unlock>:
 8000c84:	4801      	ldr	r0, [pc, #4]	; (8000c8c <__malloc_unlock+0x8>)
 8000c86:	f7ff bf0c 	b.w	8000aa2 <__retarget_lock_release_recursive>
 8000c8a:	bf00      	nop
 8000c8c:	200001e0 	.word	0x200001e0

08000c90 <__sflush_r>:
 8000c90:	898a      	ldrh	r2, [r1, #12]
 8000c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c94:	4605      	mov	r5, r0
 8000c96:	0710      	lsls	r0, r2, #28
 8000c98:	460c      	mov	r4, r1
 8000c9a:	d457      	bmi.n	8000d4c <__sflush_r+0xbc>
 8000c9c:	684b      	ldr	r3, [r1, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	dc04      	bgt.n	8000cac <__sflush_r+0x1c>
 8000ca2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	dc01      	bgt.n	8000cac <__sflush_r+0x1c>
 8000ca8:	2000      	movs	r0, #0
 8000caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d0fa      	beq.n	8000ca8 <__sflush_r+0x18>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000cb8:	682f      	ldr	r7, [r5, #0]
 8000cba:	6a21      	ldr	r1, [r4, #32]
 8000cbc:	602b      	str	r3, [r5, #0]
 8000cbe:	d032      	beq.n	8000d26 <__sflush_r+0x96>
 8000cc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000cc2:	89a3      	ldrh	r3, [r4, #12]
 8000cc4:	075a      	lsls	r2, r3, #29
 8000cc6:	d505      	bpl.n	8000cd4 <__sflush_r+0x44>
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	1ac0      	subs	r0, r0, r3
 8000ccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cce:	b10b      	cbz	r3, 8000cd4 <__sflush_r+0x44>
 8000cd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cd2:	1ac0      	subs	r0, r0, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cda:	6a21      	ldr	r1, [r4, #32]
 8000cdc:	4628      	mov	r0, r5
 8000cde:	47b0      	blx	r6
 8000ce0:	1c43      	adds	r3, r0, #1
 8000ce2:	89a3      	ldrh	r3, [r4, #12]
 8000ce4:	d106      	bne.n	8000cf4 <__sflush_r+0x64>
 8000ce6:	6829      	ldr	r1, [r5, #0]
 8000ce8:	291d      	cmp	r1, #29
 8000cea:	d82b      	bhi.n	8000d44 <__sflush_r+0xb4>
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <__sflush_r+0x100>)
 8000cee:	410a      	asrs	r2, r1
 8000cf0:	07d6      	lsls	r6, r2, #31
 8000cf2:	d427      	bmi.n	8000d44 <__sflush_r+0xb4>
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6062      	str	r2, [r4, #4]
 8000cf8:	04d9      	lsls	r1, r3, #19
 8000cfa:	6922      	ldr	r2, [r4, #16]
 8000cfc:	6022      	str	r2, [r4, #0]
 8000cfe:	d504      	bpl.n	8000d0a <__sflush_r+0x7a>
 8000d00:	1c42      	adds	r2, r0, #1
 8000d02:	d101      	bne.n	8000d08 <__sflush_r+0x78>
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	b903      	cbnz	r3, 8000d0a <__sflush_r+0x7a>
 8000d08:	6560      	str	r0, [r4, #84]	; 0x54
 8000d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d0c:	602f      	str	r7, [r5, #0]
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d0ca      	beq.n	8000ca8 <__sflush_r+0x18>
 8000d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d16:	4299      	cmp	r1, r3
 8000d18:	d002      	beq.n	8000d20 <__sflush_r+0x90>
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f7ff fec2 	bl	8000aa4 <_free_r>
 8000d20:	2000      	movs	r0, #0
 8000d22:	6360      	str	r0, [r4, #52]	; 0x34
 8000d24:	e7c1      	b.n	8000caa <__sflush_r+0x1a>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4628      	mov	r0, r5
 8000d2a:	47b0      	blx	r6
 8000d2c:	1c41      	adds	r1, r0, #1
 8000d2e:	d1c8      	bne.n	8000cc2 <__sflush_r+0x32>
 8000d30:	682b      	ldr	r3, [r5, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0c5      	beq.n	8000cc2 <__sflush_r+0x32>
 8000d36:	2b1d      	cmp	r3, #29
 8000d38:	d001      	beq.n	8000d3e <__sflush_r+0xae>
 8000d3a:	2b16      	cmp	r3, #22
 8000d3c:	d101      	bne.n	8000d42 <__sflush_r+0xb2>
 8000d3e:	602f      	str	r7, [r5, #0]
 8000d40:	e7b2      	b.n	8000ca8 <__sflush_r+0x18>
 8000d42:	89a3      	ldrh	r3, [r4, #12]
 8000d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d48:	81a3      	strh	r3, [r4, #12]
 8000d4a:	e7ae      	b.n	8000caa <__sflush_r+0x1a>
 8000d4c:	690f      	ldr	r7, [r1, #16]
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d0aa      	beq.n	8000ca8 <__sflush_r+0x18>
 8000d52:	0793      	lsls	r3, r2, #30
 8000d54:	680e      	ldr	r6, [r1, #0]
 8000d56:	bf08      	it	eq
 8000d58:	694b      	ldreq	r3, [r1, #20]
 8000d5a:	600f      	str	r7, [r1, #0]
 8000d5c:	bf18      	it	ne
 8000d5e:	2300      	movne	r3, #0
 8000d60:	1bf6      	subs	r6, r6, r7
 8000d62:	608b      	str	r3, [r1, #8]
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	dd9f      	ble.n	8000ca8 <__sflush_r+0x18>
 8000d68:	6a21      	ldr	r1, [r4, #32]
 8000d6a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000d6e:	4633      	mov	r3, r6
 8000d70:	463a      	mov	r2, r7
 8000d72:	4628      	mov	r0, r5
 8000d74:	47e0      	blx	ip
 8000d76:	2800      	cmp	r0, #0
 8000d78:	dc06      	bgt.n	8000d88 <__sflush_r+0xf8>
 8000d7a:	89a3      	ldrh	r3, [r4, #12]
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	81a3      	strh	r3, [r4, #12]
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295
 8000d86:	e790      	b.n	8000caa <__sflush_r+0x1a>
 8000d88:	4407      	add	r7, r0
 8000d8a:	1a36      	subs	r6, r6, r0
 8000d8c:	e7ea      	b.n	8000d64 <__sflush_r+0xd4>
 8000d8e:	bf00      	nop
 8000d90:	dfbffffe 	.word	0xdfbffffe

08000d94 <_fflush_r>:
 8000d94:	b538      	push	{r3, r4, r5, lr}
 8000d96:	690b      	ldr	r3, [r1, #16]
 8000d98:	4605      	mov	r5, r0
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	b913      	cbnz	r3, 8000da4 <_fflush_r+0x10>
 8000d9e:	2500      	movs	r5, #0
 8000da0:	4628      	mov	r0, r5
 8000da2:	bd38      	pop	{r3, r4, r5, pc}
 8000da4:	b118      	cbz	r0, 8000dae <_fflush_r+0x1a>
 8000da6:	6a03      	ldr	r3, [r0, #32]
 8000da8:	b90b      	cbnz	r3, 8000dae <_fflush_r+0x1a>
 8000daa:	f7ff fc97 	bl	80006dc <__sinit>
 8000dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f3      	beq.n	8000d9e <_fflush_r+0xa>
 8000db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000db8:	07d0      	lsls	r0, r2, #31
 8000dba:	d404      	bmi.n	8000dc6 <_fflush_r+0x32>
 8000dbc:	0599      	lsls	r1, r3, #22
 8000dbe:	d402      	bmi.n	8000dc6 <_fflush_r+0x32>
 8000dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dc2:	f7ff fe6d 	bl	8000aa0 <__retarget_lock_acquire_recursive>
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	4621      	mov	r1, r4
 8000dca:	f7ff ff61 	bl	8000c90 <__sflush_r>
 8000dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dd0:	07da      	lsls	r2, r3, #31
 8000dd2:	4605      	mov	r5, r0
 8000dd4:	d4e4      	bmi.n	8000da0 <_fflush_r+0xc>
 8000dd6:	89a3      	ldrh	r3, [r4, #12]
 8000dd8:	059b      	lsls	r3, r3, #22
 8000dda:	d4e1      	bmi.n	8000da0 <_fflush_r+0xc>
 8000ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dde:	f7ff fe60 	bl	8000aa2 <__retarget_lock_release_recursive>
 8000de2:	e7dd      	b.n	8000da0 <_fflush_r+0xc>

08000de4 <__swhatbuf_r>:
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	460c      	mov	r4, r1
 8000de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dec:	2900      	cmp	r1, #0
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	4615      	mov	r5, r2
 8000df2:	461e      	mov	r6, r3
 8000df4:	da0d      	bge.n	8000e12 <__swhatbuf_r+0x2e>
 8000df6:	89a3      	ldrh	r3, [r4, #12]
 8000df8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000dfc:	f04f 0100 	mov.w	r1, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000e06:	2340      	movne	r3, #64	; 0x40
 8000e08:	2000      	movs	r0, #0
 8000e0a:	6031      	str	r1, [r6, #0]
 8000e0c:	602b      	str	r3, [r5, #0]
 8000e0e:	b016      	add	sp, #88	; 0x58
 8000e10:	bd70      	pop	{r4, r5, r6, pc}
 8000e12:	466a      	mov	r2, sp
 8000e14:	f000 f848 	bl	8000ea8 <_fstat_r>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	dbec      	blt.n	8000df6 <__swhatbuf_r+0x12>
 8000e1c:	9901      	ldr	r1, [sp, #4]
 8000e1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000e22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000e26:	4259      	negs	r1, r3
 8000e28:	4159      	adcs	r1, r3
 8000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2e:	e7eb      	b.n	8000e08 <__swhatbuf_r+0x24>

08000e30 <__smakebuf_r>:
 8000e30:	898b      	ldrh	r3, [r1, #12]
 8000e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e34:	079d      	lsls	r5, r3, #30
 8000e36:	4606      	mov	r6, r0
 8000e38:	460c      	mov	r4, r1
 8000e3a:	d507      	bpl.n	8000e4c <__smakebuf_r+0x1c>
 8000e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e40:	6023      	str	r3, [r4, #0]
 8000e42:	6123      	str	r3, [r4, #16]
 8000e44:	2301      	movs	r3, #1
 8000e46:	6163      	str	r3, [r4, #20]
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	ab01      	add	r3, sp, #4
 8000e4e:	466a      	mov	r2, sp
 8000e50:	f7ff ffc8 	bl	8000de4 <__swhatbuf_r>
 8000e54:	9900      	ldr	r1, [sp, #0]
 8000e56:	4605      	mov	r5, r0
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f7ff fe8d 	bl	8000b78 <_malloc_r>
 8000e5e:	b948      	cbnz	r0, 8000e74 <__smakebuf_r+0x44>
 8000e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e64:	059a      	lsls	r2, r3, #22
 8000e66:	d4ef      	bmi.n	8000e48 <__smakebuf_r+0x18>
 8000e68:	f023 0303 	bic.w	r3, r3, #3
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	81a3      	strh	r3, [r4, #12]
 8000e72:	e7e3      	b.n	8000e3c <__smakebuf_r+0xc>
 8000e74:	89a3      	ldrh	r3, [r4, #12]
 8000e76:	6020      	str	r0, [r4, #0]
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	81a3      	strh	r3, [r4, #12]
 8000e7e:	9b00      	ldr	r3, [sp, #0]
 8000e80:	6163      	str	r3, [r4, #20]
 8000e82:	9b01      	ldr	r3, [sp, #4]
 8000e84:	6120      	str	r0, [r4, #16]
 8000e86:	b15b      	cbz	r3, 8000ea0 <__smakebuf_r+0x70>
 8000e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	f000 f81d 	bl	8000ecc <_isatty_r>
 8000e92:	b128      	cbz	r0, 8000ea0 <__smakebuf_r+0x70>
 8000e94:	89a3      	ldrh	r3, [r4, #12]
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	81a3      	strh	r3, [r4, #12]
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	431d      	orrs	r5, r3
 8000ea4:	81a5      	strh	r5, [r4, #12]
 8000ea6:	e7cf      	b.n	8000e48 <__smakebuf_r+0x18>

08000ea8 <_fstat_r>:
 8000ea8:	b538      	push	{r3, r4, r5, lr}
 8000eaa:	4d07      	ldr	r5, [pc, #28]	; (8000ec8 <_fstat_r+0x20>)
 8000eac:	2300      	movs	r3, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	602b      	str	r3, [r5, #0]
 8000eb6:	f7ff fb11 	bl	80004dc <_fstat>
 8000eba:	1c43      	adds	r3, r0, #1
 8000ebc:	d102      	bne.n	8000ec4 <_fstat_r+0x1c>
 8000ebe:	682b      	ldr	r3, [r5, #0]
 8000ec0:	b103      	cbz	r3, 8000ec4 <_fstat_r+0x1c>
 8000ec2:	6023      	str	r3, [r4, #0]
 8000ec4:	bd38      	pop	{r3, r4, r5, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001dc 	.word	0x200001dc

08000ecc <_isatty_r>:
 8000ecc:	b538      	push	{r3, r4, r5, lr}
 8000ece:	4d06      	ldr	r5, [pc, #24]	; (8000ee8 <_isatty_r+0x1c>)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	602b      	str	r3, [r5, #0]
 8000ed8:	f7ff fb0f 	bl	80004fa <_isatty>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	d102      	bne.n	8000ee6 <_isatty_r+0x1a>
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	b103      	cbz	r3, 8000ee6 <_isatty_r+0x1a>
 8000ee4:	6023      	str	r3, [r4, #0]
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
 8000ee8:	200001dc 	.word	0x200001dc

08000eec <_sbrk_r>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	4d06      	ldr	r5, [pc, #24]	; (8000f08 <_sbrk_r+0x1c>)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4604      	mov	r4, r0
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	602b      	str	r3, [r5, #0]
 8000ef8:	f7ff fb16 	bl	8000528 <_sbrk>
 8000efc:	1c43      	adds	r3, r0, #1
 8000efe:	d102      	bne.n	8000f06 <_sbrk_r+0x1a>
 8000f00:	682b      	ldr	r3, [r5, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_sbrk_r+0x1a>
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
 8000f08:	200001dc 	.word	0x200001dc

08000f0c <_init>:
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	bf00      	nop
 8000f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f12:	bc08      	pop	{r3}
 8000f14:	469e      	mov	lr, r3
 8000f16:	4770      	bx	lr

08000f18 <_fini>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr
