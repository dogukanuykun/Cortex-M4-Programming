
task_schedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001118  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080012c0  080012c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001304  08001304  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001304  08001304  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001304  08001304  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001304  08001304  00011304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001308  08001308  00011308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800130c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000e06  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000598  00000000  00000000  00020ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000200  00000000  00000000  00021470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000169  00000000  00000000  00021670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002dc9  00000000  00000000  000217d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001c6e  00000000  00000000  000245a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009daa  00000000  00000000  00026210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d20  00000000  00000000  0002ffbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00030cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000060 	.word	0x20000060
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080012a8 	.word	0x080012a8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000064 	.word	0x20000064
 80001e4:	080012a8 	.word	0x080012a8

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <led_off+0x2c>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40020c14 	.word	0x40020c14

080002bc <main>:

TCB_t user_tasks[MAX_TASKS];


int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	enable_processor_fault();
 80002c0:	f000 f91a 	bl	80004f8 <enable_processor_fault>

	init_schedular_stack(SCHED_STACK_START);
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <main+0x28>)
 80002c6:	f000 f887 	bl	80003d8 <init_schedular_stack>

	init_tasks_stack();
 80002ca:	f000 f88b 	bl	80003e4 <init_tasks_stack>

	led_init_all();
 80002ce:	f7ff ff8b 	bl	80001e8 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 f84b 	bl	8000370 <init_systick_timer>

	switch_sp_to_psp();
 80002da:	f000 f993 	bl	8000604 <switch_sp_to_psp>

	task1_handler();
 80002de:	f000 f806 	bl	80002ee <task1_handler>
    /* Loop forever */
	for(;;);
 80002e2:	e7fe      	b.n	80002e2 <main+0x26>
 80002e4:	2001ec00 	.word	0x2001ec00

080002e8 <idle_task>:
}

void idle_task(void){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	while(1);
 80002ec:	e7fe      	b.n	80002ec <idle_task+0x4>

080002ee <task1_handler>:
}

void task1_handler(void){
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_GREEN);
 80002f2:	200c      	movs	r0, #12
 80002f4:	f7ff ffb2 	bl	800025c <led_on>
		task_delay(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 f9a2 	bl	8000644 <task_delay>
		led_off(LED_GREEN);
 8000300:	200c      	movs	r0, #12
 8000302:	f7ff ffc3 	bl	800028c <led_off>
		task_delay(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f000 f99b 	bl	8000644 <task_delay>
		led_on(LED_GREEN);
 800030e:	e7f0      	b.n	80002f2 <task1_handler+0x4>

08000310 <task2_handler>:
	}
}

void task2_handler(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_ORANGE);
 8000314:	200d      	movs	r0, #13
 8000316:	f7ff ffa1 	bl	800025c <led_on>
		task_delay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031e:	f000 f991 	bl	8000644 <task_delay>
		led_off(LED_ORANGE);
 8000322:	200d      	movs	r0, #13
 8000324:	f7ff ffb2 	bl	800028c <led_off>
		task_delay(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f000 f98a 	bl	8000644 <task_delay>
		led_on(LED_ORANGE);
 8000330:	e7f0      	b.n	8000314 <task2_handler+0x4>

08000332 <task3_handler>:
		}
}
void task3_handler(void){
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_BLUE);
 8000336:	200f      	movs	r0, #15
 8000338:	f7ff ff90 	bl	800025c <led_on>
		task_delay(250);
 800033c:	20fa      	movs	r0, #250	; 0xfa
 800033e:	f000 f981 	bl	8000644 <task_delay>
		led_off(LED_BLUE);
 8000342:	200f      	movs	r0, #15
 8000344:	f7ff ffa2 	bl	800028c <led_off>
		task_delay(250);
 8000348:	20fa      	movs	r0, #250	; 0xfa
 800034a:	f000 f97b 	bl	8000644 <task_delay>
		led_on(LED_BLUE);
 800034e:	e7f2      	b.n	8000336 <task3_handler+0x4>

08000350 <task4_handler>:
		}
}
void task4_handler(void){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	while(1){
		led_on(LED_RED);
 8000354:	200e      	movs	r0, #14
 8000356:	f7ff ff81 	bl	800025c <led_on>
		task_delay(125);
 800035a:	207d      	movs	r0, #125	; 0x7d
 800035c:	f000 f972 	bl	8000644 <task_delay>
		led_off(LED_RED);
 8000360:	200e      	movs	r0, #14
 8000362:	f7ff ff93 	bl	800028c <led_off>
		task_delay(125);
 8000366:	207d      	movs	r0, #125	; 0x7d
 8000368:	f000 f96c 	bl	8000644 <task_delay>
		led_on(LED_RED);
 800036c:	e7f2      	b.n	8000354 <task4_handler+0x4>
	...

08000370 <init_systick_timer>:
		}
}


void init_systick_timer(uint32_t tick_hz){
 8000370:	b480      	push	{r7}
 8000372:	b087      	sub	sp, #28
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; // SysTick Reload Value Register
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <init_systick_timer+0x5c>)
 800037a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010; // SysTick Control and Status Register
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <init_systick_timer+0x60>)
 800037e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz)-1;
 8000380:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <init_systick_timer+0x64>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	3b01      	subs	r3, #1
 800038a:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]

	//Load the value into SVR
	*pSRVR |= count_value;
 8000392:	697b      	ldr	r3, [r7, #20]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	431a      	orrs	r2, r3
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= (1 << 1); // Enables SysTick exception request
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f043 0202 	orr.w	r2, r3, #2
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // Indicates the clock source, processor clock source
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f043 0204 	orr.w	r2, r3, #4
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	601a      	str	r2, [r3, #0]

	//enable systick
	*pSCSR |= (1 << 0);//enables the counter
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	601a      	str	r2, [r3, #0]

}
 80003c2:	bf00      	nop
 80003c4:	371c      	adds	r7, #28
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	e000e014 	.word	0xe000e014
 80003d0:	e000e010 	.word	0xe000e010
 80003d4:	00f42400 	.word	0x00f42400

080003d8 <init_schedular_stack>:

__attribute__((naked)) void init_schedular_stack(uint32_t sched_top_of_stack){
 80003d8:	4603      	mov	r3, r0
	//__asm volatile("MSR MSP,R0");
	__asm volatile("MSR MSP,%0": : "r"(sched_top_of_stack) : );
 80003da:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003de:	4770      	bx	lr
}
 80003e0:	bf00      	nop
	...

080003e4 <init_tasks_stack>:




void init_tasks_stack(void){
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 80003ea:	4b38      	ldr	r3, [pc, #224]	; (80004cc <init_tasks_stack+0xe8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80003f0:	4b36      	ldr	r3, [pc, #216]	; (80004cc <init_tasks_stack+0xe8>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	619a      	str	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80003f6:	4b35      	ldr	r3, [pc, #212]	; (80004cc <init_tasks_stack+0xe8>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80003fc:	4b33      	ldr	r3, [pc, #204]	; (80004cc <init_tasks_stack+0xe8>)
 80003fe:	2200      	movs	r2, #0
 8000400:	639a      	str	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 8000402:	4b32      	ldr	r3, [pc, #200]	; (80004cc <init_tasks_stack+0xe8>)
 8000404:	2200      	movs	r2, #0
 8000406:	649a      	str	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000408:	4b30      	ldr	r3, [pc, #192]	; (80004cc <init_tasks_stack+0xe8>)
 800040a:	4a31      	ldr	r2, [pc, #196]	; (80004d0 <init_tasks_stack+0xec>)
 800040c:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 800040e:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <init_tasks_stack+0xe8>)
 8000410:	4a30      	ldr	r2, [pc, #192]	; (80004d4 <init_tasks_stack+0xf0>)
 8000412:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000414:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <init_tasks_stack+0xe8>)
 8000416:	4a30      	ldr	r2, [pc, #192]	; (80004d8 <init_tasks_stack+0xf4>)
 8000418:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 800041a:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <init_tasks_stack+0xe8>)
 800041c:	4a2f      	ldr	r2, [pc, #188]	; (80004dc <init_tasks_stack+0xf8>)
 800041e:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000420:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <init_tasks_stack+0xe8>)
 8000422:	4a2f      	ldr	r2, [pc, #188]	; (80004e0 <init_tasks_stack+0xfc>)
 8000424:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000426:	4b29      	ldr	r3, [pc, #164]	; (80004cc <init_tasks_stack+0xe8>)
 8000428:	4a2e      	ldr	r2, [pc, #184]	; (80004e4 <init_tasks_stack+0x100>)
 800042a:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800042c:	4b27      	ldr	r3, [pc, #156]	; (80004cc <init_tasks_stack+0xe8>)
 800042e:	4a2e      	ldr	r2, [pc, #184]	; (80004e8 <init_tasks_stack+0x104>)
 8000430:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <init_tasks_stack+0xe8>)
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <init_tasks_stack+0x108>)
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <init_tasks_stack+0xe8>)
 800043a:	4a2d      	ldr	r2, [pc, #180]	; (80004f0 <init_tasks_stack+0x10c>)
 800043c:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800043e:	4b23      	ldr	r3, [pc, #140]	; (80004cc <init_tasks_stack+0xe8>)
 8000440:	4a2c      	ldr	r2, [pc, #176]	; (80004f4 <init_tasks_stack+0x110>)
 8000442:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;
	for (int i = 0; i < MAX_TASKS; i++) {
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	e037      	b.n	80004ba <init_tasks_stack+0xd6>
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 800044a:	4a20      	ldr	r2, [pc, #128]	; (80004cc <init_tasks_stack+0xe8>)
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	4413      	add	r3, r2
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3b04      	subs	r3, #4
 800045a:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000462:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3b04      	subs	r3, #4
 8000468:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;//0x01000000
 800046a:	4a18      	ldr	r2, [pc, #96]	; (80004cc <init_tasks_stack+0xe8>)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	4413      	add	r3, r2
 8000472:	330c      	adds	r3, #12
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3b04      	subs	r3, #4
 8000480:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;//0x01000000
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f06f 0202 	mvn.w	r2, #2
 8000488:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++) {
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	e008      	b.n	80004a2 <init_tasks_stack+0xbe>
			pPSP--; //R0 - R12
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	3b04      	subs	r3, #4
 8000494:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3301      	adds	r3, #1
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b0c      	cmp	r3, #12
 80004a6:	ddf3      	ble.n	8000490 <init_tasks_stack+0xac>
		}


		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	4908      	ldr	r1, [pc, #32]	; (80004cc <init_tasks_stack+0xe8>)
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	011b      	lsls	r3, r3, #4
 80004b0:	440b      	add	r3, r1
 80004b2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++) {
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	ddc4      	ble.n	800044a <init_tasks_stack+0x66>

	}


}
 80004c0:	bf00      	nop
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000080 	.word	0x20000080
 80004d0:	2001f000 	.word	0x2001f000
 80004d4:	20020000 	.word	0x20020000
 80004d8:	2001fc00 	.word	0x2001fc00
 80004dc:	2001f800 	.word	0x2001f800
 80004e0:	2001f400 	.word	0x2001f400
 80004e4:	080002e9 	.word	0x080002e9
 80004e8:	080002ef 	.word	0x080002ef
 80004ec:	08000311 	.word	0x08000311
 80004f0:	08000333 	.word	0x08000333
 80004f4:	08000351 	.word	0x08000351

080004f8 <enable_processor_fault>:


void enable_processor_fault(void){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <enable_processor_fault+0x38>)
 8000500:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16);//mem manage
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17);//bus fault
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18);//usage fault
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	e000ed24 	.word	0xe000ed24

08000534 <get_psp_value>:


uint32_t get_psp_value(void){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <get_psp_value+0x18>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <get_psp_value+0x1c>)
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	4413      	add	r3, r2
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000000 	.word	0x20000000
 8000550:	20000080 	.word	0x20000080

08000554 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <save_psp_value+0x20>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <save_psp_value+0x24>)
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	4413      	add	r3, r2
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000
 8000578:	20000080 	.word	0x20000080

0800057c <update_next_task>:

void update_next_task(void){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 8000582:	23ff      	movs	r3, #255	; 0xff
 8000584:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	e024      	b.n	80005d6 <update_next_task+0x5a>
	{
		current_task++;
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <update_next_task+0x7c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <update_next_task+0x7c>)
 8000596:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <update_next_task+0x7c>)
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <update_next_task+0x80>)
 800059e:	fba3 1302 	umull	r1, r3, r3, r2
 80005a2:	0899      	lsrs	r1, r3, #2
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <update_next_task+0x7c>)
 80005b0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <update_next_task+0x7c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <update_next_task+0x84>)
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	4413      	add	r3, r2
 80005bc:	3308      	adds	r3, #8
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d103      	bne.n	80005d0 <update_next_task+0x54>
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <update_next_task+0x7c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d106      	bne.n	80005de <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	ddd7      	ble.n	800058c <update_next_task+0x10>
 80005dc:	e000      	b.n	80005e0 <update_next_task+0x64>
			break;
 80005de:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d002      	beq.n	80005ec <update_next_task+0x70>
		current_task = 0;
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <update_next_task+0x7c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	cccccccd 	.word	0xcccccccd
 8000600:	20000080 	.word	0x20000080

08000604 <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//1. initialize the PSP with TASK1 stack start
	//get the value if psp of current_task
	__asm volatile("PUSH {LR}");//preserved LR which connects back to main
 8000604:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 8000606:	f7ff ff95 	bl	8000534 <get_psp_value>
	__asm volatile("MSR PSP, R0");//initialize psp
 800060a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");//pops back LR value
 800060e:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0x02");
 8000612:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 8000616:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 800061a:	4770      	bx	lr

}
 800061c:	bf00      	nop
	...

08000620 <schedule>:

void schedule(void){
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04; // PendSV
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <schedule+0x20>)
 8000628:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	601a      	str	r2, [r3, #0]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	e000ed04 	.word	0xe000ed04

08000644 <task_delay>:



void task_delay(uint32_t tick_count){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	//disable interrupt
	INTERRUPT_DISABLE();
 800064c:	f04f 0001 	mov.w	r0, #1
 8000650:	f380 8810 	msr	PRIMASK, r0
	if (current_task) {
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <task_delay+0x54>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d015      	beq.n	8000688 <task_delay+0x44>
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <task_delay+0x58>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <task_delay+0x54>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	441a      	add	r2, r3
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <task_delay+0x5c>)
 800066c:	0103      	lsls	r3, r0, #4
 800066e:	440b      	add	r3, r1
 8000670:	3304      	adds	r3, #4
 8000672:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <task_delay+0x54>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <task_delay+0x5c>)
 800067a:	011b      	lsls	r3, r3, #4
 800067c:	4413      	add	r3, r2
 800067e:	3308      	adds	r3, #8
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	601a      	str	r2, [r3, #0]
		schedule();
 8000684:	f7ff ffcc 	bl	8000620 <schedule>
	}
	//enable interrupt
	INTERRUPT_ENABLE();
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	f380 8810 	msr	PRIMASK, r0
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000000 	.word	0x20000000
 800069c:	2000007c 	.word	0x2000007c
 80006a0:	20000080 	.word	0x20000080

080006a4 <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){
	//Save the context of current task
	__asm volatile("MRS R0,PSP");
 80006a4:	f3ef 8009 	mrs	r0, PSP
	__asm volatile("STMDB R0!,{R4-R11}");
 80006a8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80006ac:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 80006ae:	f7ff ff51 	bl	8000554 <save_psp_value>

	//Retrive the context of next task
	__asm volatile("BL update_next_task");
 80006b2:	f7ff ff63 	bl	800057c <update_next_task>
	__asm volatile("BL get_psp_value");
 80006b6:	f7ff ff3d 	bl	8000534 <get_psp_value>
	__asm volatile("LDMIA R0,{R4-R11}");
 80006ba:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("MSR PSP,R0");
 80006be:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80006c2:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80006c6:	4770      	bx	lr
}
 80006c8:	bf00      	nop
	...

080006cc <update_global_tick_count>:

void update_global_tick_count(){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	g_tick_count++;
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <update_global_tick_count+0x18>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a03      	ldr	r2, [pc, #12]	; (80006e4 <update_global_tick_count+0x18>)
 80006d8:	6013      	str	r3, [r2, #0]
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	2000007c 	.word	0x2000007c

080006e8 <unblock_tasks>:

void unblock_tasks(){
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006ee:	2301      	movs	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	e01b      	b.n	800072c <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <unblock_tasks+0x58>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	4413      	add	r3, r2
 80006fc:	3308      	adds	r3, #8
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d010      	beq.n	8000726 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 8000704:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <unblock_tasks+0x58>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	4413      	add	r3, r2
 800070c:	3304      	adds	r3, #4
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <unblock_tasks+0x5c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d106      	bne.n	8000726 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 8000718:	4a09      	ldr	r2, [pc, #36]	; (8000740 <unblock_tasks+0x58>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	4413      	add	r3, r2
 8000720:	3308      	adds	r3, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b04      	cmp	r3, #4
 8000730:	dde0      	ble.n	80006f4 <unblock_tasks+0xc>
			}
		}

	}
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000080 	.word	0x20000080
 8000744:	2000007c 	.word	0x2000007c

08000748 <SysTick_Handler>:

void SysTick_Handler(void){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <SysTick_Handler+0x28>)
 8000750:	607b      	str	r3, [r7, #4]

	update_global_tick_count();
 8000752:	f7ff ffbb 	bl	80006cc <update_global_tick_count>
	unblock_tasks();
 8000756:	f7ff ffc7 	bl	80006e8 <unblock_tasks>

	*pICSR |= (1 << 28);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000ed04 	.word	0xe000ed04

08000774 <HardFault_Handler>:

//Implement fault handlers
void HardFault_Handler(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 8000778:	4801      	ldr	r0, [pc, #4]	; (8000780 <HardFault_Handler+0xc>)
 800077a:	f000 fa07 	bl	8000b8c <puts>
	while(1);
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0xa>
 8000780:	080012c0 	.word	0x080012c0

08000784 <MemManage_Handler>:
}
void MemManage_Handler(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	printf("Exception: MemManage\n");
 8000788:	4801      	ldr	r0, [pc, #4]	; (8000790 <MemManage_Handler+0xc>)
 800078a:	f000 f9ff 	bl	8000b8c <puts>
	while(1);
 800078e:	e7fe      	b.n	800078e <MemManage_Handler+0xa>
 8000790:	080012d8 	.word	0x080012d8

08000794 <BusFault_Handler>:
}
void BusFault_Handler(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 8000798:	4801      	ldr	r0, [pc, #4]	; (80007a0 <BusFault_Handler+0xc>)
 800079a:	f000 f9f7 	bl	8000b8c <puts>
	while(1);
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0xa>
 80007a0:	080012f0 	.word	0x080012f0

080007a4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <ITM_SendChar+0x44>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <ITM_SendChar+0x44>)
 80007b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007b8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <ITM_SendChar+0x48>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <ITM_SendChar+0x48>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007c6:	bf00      	nop
 80007c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0f8      	beq.n	80007c8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	6013      	str	r3, [r2, #0]
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	e000edfc 	.word	0xe000edfc
 80007ec:	e0000e00 	.word	0xe0000e00

080007f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	e00a      	b.n	8000818 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000802:	f3af 8000 	nop.w
 8000806:	4601      	mov	r1, r0
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	b2ca      	uxtb	r2, r1
 8000810:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf0      	blt.n	8000802 <_read+0x12>
  }

  return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	e009      	b.n	8000850 <_write+0x26>
  {
	  //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	60ba      	str	r2, [r7, #8]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ffad 	bl	80007a4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3301      	adds	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697a      	ldr	r2, [r7, #20]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	dbf1      	blt.n	800083c <_write+0x12>
  }
  return len;
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <_close>:

int _close(int file)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000888:	605a      	str	r2, [r3, #4]
  return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <_isatty>:

int _isatty(int file)
{
 8000896:	b480      	push	{r7}
 8000898:	b083      	sub	sp, #12
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
	...

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f000 fa78 	bl	8000de8 <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20020000 	.word	0x20020000
 8000924:	00000400 	.word	0x00000400
 8000928:	200000d0 	.word	0x200000d0
 800092c:	20000220 	.word	0x20000220

08000930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000932:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000934:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095e:	f000 fa49 	bl	8000df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000962:	f7ff fcab 	bl	80002bc <main>

08000966 <LoopForever>:

LoopForever:
  b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   r0, =_estack
 8000968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000974:	0800130c 	.word	0x0800130c
  ldr r2, =_sbss
 8000978:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800097c:	20000220 	.word	0x20000220

08000980 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <std>:
 8000984:	2300      	movs	r3, #0
 8000986:	b510      	push	{r4, lr}
 8000988:	4604      	mov	r4, r0
 800098a:	e9c0 3300 	strd	r3, r3, [r0]
 800098e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000992:	6083      	str	r3, [r0, #8]
 8000994:	8181      	strh	r1, [r0, #12]
 8000996:	6643      	str	r3, [r0, #100]	; 0x64
 8000998:	81c2      	strh	r2, [r0, #14]
 800099a:	6183      	str	r3, [r0, #24]
 800099c:	4619      	mov	r1, r3
 800099e:	2208      	movs	r2, #8
 80009a0:	305c      	adds	r0, #92	; 0x5c
 80009a2:	f000 f9d3 	bl	8000d4c <memset>
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <std+0x38>)
 80009a8:	6263      	str	r3, [r4, #36]	; 0x24
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <std+0x3c>)
 80009ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <std+0x40>)
 80009b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <std+0x44>)
 80009b4:	6224      	str	r4, [r4, #32]
 80009b6:	6323      	str	r3, [r4, #48]	; 0x30
 80009b8:	bd10      	pop	{r4, pc}
 80009ba:	bf00      	nop
 80009bc:	08000b9d 	.word	0x08000b9d
 80009c0:	08000bbf 	.word	0x08000bbf
 80009c4:	08000bf7 	.word	0x08000bf7
 80009c8:	08000c1b 	.word	0x08000c1b

080009cc <stdio_exit_handler>:
 80009cc:	4a02      	ldr	r2, [pc, #8]	; (80009d8 <stdio_exit_handler+0xc>)
 80009ce:	4903      	ldr	r1, [pc, #12]	; (80009dc <stdio_exit_handler+0x10>)
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <stdio_exit_handler+0x14>)
 80009d2:	f000 b869 	b.w	8000aa8 <_fwalk_sglue>
 80009d6:	bf00      	nop
 80009d8:	20000004 	.word	0x20000004
 80009dc:	08001131 	.word	0x08001131
 80009e0:	20000010 	.word	0x20000010

080009e4 <cleanup_stdio>:
 80009e4:	6841      	ldr	r1, [r0, #4]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <cleanup_stdio+0x34>)
 80009e8:	4299      	cmp	r1, r3
 80009ea:	b510      	push	{r4, lr}
 80009ec:	4604      	mov	r4, r0
 80009ee:	d001      	beq.n	80009f4 <cleanup_stdio+0x10>
 80009f0:	f000 fb9e 	bl	8001130 <_fflush_r>
 80009f4:	68a1      	ldr	r1, [r4, #8]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <cleanup_stdio+0x38>)
 80009f8:	4299      	cmp	r1, r3
 80009fa:	d002      	beq.n	8000a02 <cleanup_stdio+0x1e>
 80009fc:	4620      	mov	r0, r4
 80009fe:	f000 fb97 	bl	8001130 <_fflush_r>
 8000a02:	68e1      	ldr	r1, [r4, #12]
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <cleanup_stdio+0x3c>)
 8000a06:	4299      	cmp	r1, r3
 8000a08:	d004      	beq.n	8000a14 <cleanup_stdio+0x30>
 8000a0a:	4620      	mov	r0, r4
 8000a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a10:	f000 bb8e 	b.w	8001130 <_fflush_r>
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	200000d4 	.word	0x200000d4
 8000a1c:	2000013c 	.word	0x2000013c
 8000a20:	200001a4 	.word	0x200001a4

08000a24 <global_stdio_init.part.0>:
 8000a24:	b510      	push	{r4, lr}
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <global_stdio_init.part.0+0x30>)
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <global_stdio_init.part.0+0x34>)
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <global_stdio_init.part.0+0x38>)
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	4620      	mov	r0, r4
 8000a30:	2200      	movs	r2, #0
 8000a32:	2104      	movs	r1, #4
 8000a34:	f7ff ffa6 	bl	8000984 <std>
 8000a38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2109      	movs	r1, #9
 8000a40:	f7ff ffa0 	bl	8000984 <std>
 8000a44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a48:	2202      	movs	r2, #2
 8000a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a4e:	2112      	movs	r1, #18
 8000a50:	f7ff bf98 	b.w	8000984 <std>
 8000a54:	2000020c 	.word	0x2000020c
 8000a58:	200000d4 	.word	0x200000d4
 8000a5c:	080009cd 	.word	0x080009cd

08000a60 <__sfp_lock_acquire>:
 8000a60:	4801      	ldr	r0, [pc, #4]	; (8000a68 <__sfp_lock_acquire+0x8>)
 8000a62:	f000 b9eb 	b.w	8000e3c <__retarget_lock_acquire_recursive>
 8000a66:	bf00      	nop
 8000a68:	20000215 	.word	0x20000215

08000a6c <__sfp_lock_release>:
 8000a6c:	4801      	ldr	r0, [pc, #4]	; (8000a74 <__sfp_lock_release+0x8>)
 8000a6e:	f000 b9e6 	b.w	8000e3e <__retarget_lock_release_recursive>
 8000a72:	bf00      	nop
 8000a74:	20000215 	.word	0x20000215

08000a78 <__sinit>:
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	f7ff fff0 	bl	8000a60 <__sfp_lock_acquire>
 8000a80:	6a23      	ldr	r3, [r4, #32]
 8000a82:	b11b      	cbz	r3, 8000a8c <__sinit+0x14>
 8000a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a88:	f7ff bff0 	b.w	8000a6c <__sfp_lock_release>
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__sinit+0x28>)
 8000a8e:	6223      	str	r3, [r4, #32]
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__sinit+0x2c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1f5      	bne.n	8000a84 <__sinit+0xc>
 8000a98:	f7ff ffc4 	bl	8000a24 <global_stdio_init.part.0>
 8000a9c:	e7f2      	b.n	8000a84 <__sinit+0xc>
 8000a9e:	bf00      	nop
 8000aa0:	080009e5 	.word	0x080009e5
 8000aa4:	2000020c 	.word	0x2000020c

08000aa8 <_fwalk_sglue>:
 8000aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aac:	4607      	mov	r7, r0
 8000aae:	4688      	mov	r8, r1
 8000ab0:	4614      	mov	r4, r2
 8000ab2:	2600      	movs	r6, #0
 8000ab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ab8:	f1b9 0901 	subs.w	r9, r9, #1
 8000abc:	d505      	bpl.n	8000aca <_fwalk_sglue+0x22>
 8000abe:	6824      	ldr	r4, [r4, #0]
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	d1f7      	bne.n	8000ab4 <_fwalk_sglue+0xc>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aca:	89ab      	ldrh	r3, [r5, #12]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d907      	bls.n	8000ae0 <_fwalk_sglue+0x38>
 8000ad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	d003      	beq.n	8000ae0 <_fwalk_sglue+0x38>
 8000ad8:	4629      	mov	r1, r5
 8000ada:	4638      	mov	r0, r7
 8000adc:	47c0      	blx	r8
 8000ade:	4306      	orrs	r6, r0
 8000ae0:	3568      	adds	r5, #104	; 0x68
 8000ae2:	e7e9      	b.n	8000ab8 <_fwalk_sglue+0x10>

08000ae4 <_puts_r>:
 8000ae4:	6a03      	ldr	r3, [r0, #32]
 8000ae6:	b570      	push	{r4, r5, r6, lr}
 8000ae8:	6884      	ldr	r4, [r0, #8]
 8000aea:	4605      	mov	r5, r0
 8000aec:	460e      	mov	r6, r1
 8000aee:	b90b      	cbnz	r3, 8000af4 <_puts_r+0x10>
 8000af0:	f7ff ffc2 	bl	8000a78 <__sinit>
 8000af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000af6:	07db      	lsls	r3, r3, #31
 8000af8:	d405      	bmi.n	8000b06 <_puts_r+0x22>
 8000afa:	89a3      	ldrh	r3, [r4, #12]
 8000afc:	0598      	lsls	r0, r3, #22
 8000afe:	d402      	bmi.n	8000b06 <_puts_r+0x22>
 8000b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b02:	f000 f99b 	bl	8000e3c <__retarget_lock_acquire_recursive>
 8000b06:	89a3      	ldrh	r3, [r4, #12]
 8000b08:	0719      	lsls	r1, r3, #28
 8000b0a:	d513      	bpl.n	8000b34 <_puts_r+0x50>
 8000b0c:	6923      	ldr	r3, [r4, #16]
 8000b0e:	b18b      	cbz	r3, 8000b34 <_puts_r+0x50>
 8000b10:	3e01      	subs	r6, #1
 8000b12:	68a3      	ldr	r3, [r4, #8]
 8000b14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	60a3      	str	r3, [r4, #8]
 8000b1c:	b9e9      	cbnz	r1, 8000b5a <_puts_r+0x76>
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da2e      	bge.n	8000b80 <_puts_r+0x9c>
 8000b22:	4622      	mov	r2, r4
 8000b24:	210a      	movs	r1, #10
 8000b26:	4628      	mov	r0, r5
 8000b28:	f000 f87b 	bl	8000c22 <__swbuf_r>
 8000b2c:	3001      	adds	r0, #1
 8000b2e:	d007      	beq.n	8000b40 <_puts_r+0x5c>
 8000b30:	250a      	movs	r5, #10
 8000b32:	e007      	b.n	8000b44 <_puts_r+0x60>
 8000b34:	4621      	mov	r1, r4
 8000b36:	4628      	mov	r0, r5
 8000b38:	f000 f8b0 	bl	8000c9c <__swsetup_r>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d0e7      	beq.n	8000b10 <_puts_r+0x2c>
 8000b40:	f04f 35ff 	mov.w	r5, #4294967295
 8000b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b46:	07da      	lsls	r2, r3, #31
 8000b48:	d405      	bmi.n	8000b56 <_puts_r+0x72>
 8000b4a:	89a3      	ldrh	r3, [r4, #12]
 8000b4c:	059b      	lsls	r3, r3, #22
 8000b4e:	d402      	bmi.n	8000b56 <_puts_r+0x72>
 8000b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b52:	f000 f974 	bl	8000e3e <__retarget_lock_release_recursive>
 8000b56:	4628      	mov	r0, r5
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	da04      	bge.n	8000b68 <_puts_r+0x84>
 8000b5e:	69a2      	ldr	r2, [r4, #24]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dc06      	bgt.n	8000b72 <_puts_r+0x8e>
 8000b64:	290a      	cmp	r1, #10
 8000b66:	d004      	beq.n	8000b72 <_puts_r+0x8e>
 8000b68:	6823      	ldr	r3, [r4, #0]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	6022      	str	r2, [r4, #0]
 8000b6e:	7019      	strb	r1, [r3, #0]
 8000b70:	e7cf      	b.n	8000b12 <_puts_r+0x2e>
 8000b72:	4622      	mov	r2, r4
 8000b74:	4628      	mov	r0, r5
 8000b76:	f000 f854 	bl	8000c22 <__swbuf_r>
 8000b7a:	3001      	adds	r0, #1
 8000b7c:	d1c9      	bne.n	8000b12 <_puts_r+0x2e>
 8000b7e:	e7df      	b.n	8000b40 <_puts_r+0x5c>
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	250a      	movs	r5, #10
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	6022      	str	r2, [r4, #0]
 8000b88:	701d      	strb	r5, [r3, #0]
 8000b8a:	e7db      	b.n	8000b44 <_puts_r+0x60>

08000b8c <puts>:
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <puts+0xc>)
 8000b8e:	4601      	mov	r1, r0
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	f7ff bfa7 	b.w	8000ae4 <_puts_r>
 8000b96:	bf00      	nop
 8000b98:	2000005c 	.word	0x2000005c

08000b9c <__sread>:
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	460c      	mov	r4, r1
 8000ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ba4:	f000 f8fc 	bl	8000da0 <_read_r>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	bfab      	itete	ge
 8000bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000bae:	89a3      	ldrhlt	r3, [r4, #12]
 8000bb0:	181b      	addge	r3, r3, r0
 8000bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000bb6:	bfac      	ite	ge
 8000bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000bba:	81a3      	strhlt	r3, [r4, #12]
 8000bbc:	bd10      	pop	{r4, pc}

08000bbe <__swrite>:
 8000bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bc2:	461f      	mov	r7, r3
 8000bc4:	898b      	ldrh	r3, [r1, #12]
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	4605      	mov	r5, r0
 8000bca:	460c      	mov	r4, r1
 8000bcc:	4616      	mov	r6, r2
 8000bce:	d505      	bpl.n	8000bdc <__swrite+0x1e>
 8000bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f000 f8d0 	bl	8000d7c <_lseek_r>
 8000bdc:	89a3      	ldrh	r3, [r4, #12]
 8000bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000be6:	81a3      	strh	r3, [r4, #12]
 8000be8:	4632      	mov	r2, r6
 8000bea:	463b      	mov	r3, r7
 8000bec:	4628      	mov	r0, r5
 8000bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf2:	f000 b8e7 	b.w	8000dc4 <_write_r>

08000bf6 <__sseek>:
 8000bf6:	b510      	push	{r4, lr}
 8000bf8:	460c      	mov	r4, r1
 8000bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bfe:	f000 f8bd 	bl	8000d7c <_lseek_r>
 8000c02:	1c43      	adds	r3, r0, #1
 8000c04:	89a3      	ldrh	r3, [r4, #12]
 8000c06:	bf15      	itete	ne
 8000c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c12:	81a3      	strheq	r3, [r4, #12]
 8000c14:	bf18      	it	ne
 8000c16:	81a3      	strhne	r3, [r4, #12]
 8000c18:	bd10      	pop	{r4, pc}

08000c1a <__sclose>:
 8000c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c1e:	f000 b89d 	b.w	8000d5c <_close_r>

08000c22 <__swbuf_r>:
 8000c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c24:	460e      	mov	r6, r1
 8000c26:	4614      	mov	r4, r2
 8000c28:	4605      	mov	r5, r0
 8000c2a:	b118      	cbz	r0, 8000c34 <__swbuf_r+0x12>
 8000c2c:	6a03      	ldr	r3, [r0, #32]
 8000c2e:	b90b      	cbnz	r3, 8000c34 <__swbuf_r+0x12>
 8000c30:	f7ff ff22 	bl	8000a78 <__sinit>
 8000c34:	69a3      	ldr	r3, [r4, #24]
 8000c36:	60a3      	str	r3, [r4, #8]
 8000c38:	89a3      	ldrh	r3, [r4, #12]
 8000c3a:	071a      	lsls	r2, r3, #28
 8000c3c:	d525      	bpl.n	8000c8a <__swbuf_r+0x68>
 8000c3e:	6923      	ldr	r3, [r4, #16]
 8000c40:	b31b      	cbz	r3, 8000c8a <__swbuf_r+0x68>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	6922      	ldr	r2, [r4, #16]
 8000c46:	1a98      	subs	r0, r3, r2
 8000c48:	6963      	ldr	r3, [r4, #20]
 8000c4a:	b2f6      	uxtb	r6, r6
 8000c4c:	4283      	cmp	r3, r0
 8000c4e:	4637      	mov	r7, r6
 8000c50:	dc04      	bgt.n	8000c5c <__swbuf_r+0x3a>
 8000c52:	4621      	mov	r1, r4
 8000c54:	4628      	mov	r0, r5
 8000c56:	f000 fa6b 	bl	8001130 <_fflush_r>
 8000c5a:	b9e0      	cbnz	r0, 8000c96 <__swbuf_r+0x74>
 8000c5c:	68a3      	ldr	r3, [r4, #8]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	60a3      	str	r3, [r4, #8]
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	6022      	str	r2, [r4, #0]
 8000c68:	701e      	strb	r6, [r3, #0]
 8000c6a:	6962      	ldr	r2, [r4, #20]
 8000c6c:	1c43      	adds	r3, r0, #1
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__swbuf_r+0x5a>
 8000c72:	89a3      	ldrh	r3, [r4, #12]
 8000c74:	07db      	lsls	r3, r3, #31
 8000c76:	d506      	bpl.n	8000c86 <__swbuf_r+0x64>
 8000c78:	2e0a      	cmp	r6, #10
 8000c7a:	d104      	bne.n	8000c86 <__swbuf_r+0x64>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f000 fa56 	bl	8001130 <_fflush_r>
 8000c84:	b938      	cbnz	r0, 8000c96 <__swbuf_r+0x74>
 8000c86:	4638      	mov	r0, r7
 8000c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	f000 f805 	bl	8000c9c <__swsetup_r>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d0d5      	beq.n	8000c42 <__swbuf_r+0x20>
 8000c96:	f04f 37ff 	mov.w	r7, #4294967295
 8000c9a:	e7f4      	b.n	8000c86 <__swbuf_r+0x64>

08000c9c <__swsetup_r>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <__swsetup_r+0xac>)
 8000ca0:	4605      	mov	r5, r0
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	460c      	mov	r4, r1
 8000ca6:	b118      	cbz	r0, 8000cb0 <__swsetup_r+0x14>
 8000ca8:	6a03      	ldr	r3, [r0, #32]
 8000caa:	b90b      	cbnz	r3, 8000cb0 <__swsetup_r+0x14>
 8000cac:	f7ff fee4 	bl	8000a78 <__sinit>
 8000cb0:	89a3      	ldrh	r3, [r4, #12]
 8000cb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cb6:	0718      	lsls	r0, r3, #28
 8000cb8:	d422      	bmi.n	8000d00 <__swsetup_r+0x64>
 8000cba:	06d9      	lsls	r1, r3, #27
 8000cbc:	d407      	bmi.n	8000cce <__swsetup_r+0x32>
 8000cbe:	2309      	movs	r3, #9
 8000cc0:	602b      	str	r3, [r5, #0]
 8000cc2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000cc6:	81a3      	strh	r3, [r4, #12]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	e034      	b.n	8000d38 <__swsetup_r+0x9c>
 8000cce:	0758      	lsls	r0, r3, #29
 8000cd0:	d512      	bpl.n	8000cf8 <__swsetup_r+0x5c>
 8000cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cd4:	b141      	cbz	r1, 8000ce8 <__swsetup_r+0x4c>
 8000cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	d002      	beq.n	8000ce4 <__swsetup_r+0x48>
 8000cde:	4628      	mov	r0, r5
 8000ce0:	f000 f8ae 	bl	8000e40 <_free_r>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	6363      	str	r3, [r4, #52]	; 0x34
 8000ce8:	89a3      	ldrh	r3, [r4, #12]
 8000cea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cee:	81a3      	strh	r3, [r4, #12]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	6063      	str	r3, [r4, #4]
 8000cf4:	6923      	ldr	r3, [r4, #16]
 8000cf6:	6023      	str	r3, [r4, #0]
 8000cf8:	89a3      	ldrh	r3, [r4, #12]
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	81a3      	strh	r3, [r4, #12]
 8000d00:	6923      	ldr	r3, [r4, #16]
 8000d02:	b94b      	cbnz	r3, 8000d18 <__swsetup_r+0x7c>
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d0e:	d003      	beq.n	8000d18 <__swsetup_r+0x7c>
 8000d10:	4621      	mov	r1, r4
 8000d12:	4628      	mov	r0, r5
 8000d14:	f000 fa5a 	bl	80011cc <__smakebuf_r>
 8000d18:	89a0      	ldrh	r0, [r4, #12]
 8000d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d1e:	f010 0301 	ands.w	r3, r0, #1
 8000d22:	d00a      	beq.n	8000d3a <__swsetup_r+0x9e>
 8000d24:	2300      	movs	r3, #0
 8000d26:	60a3      	str	r3, [r4, #8]
 8000d28:	6963      	ldr	r3, [r4, #20]
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	61a3      	str	r3, [r4, #24]
 8000d2e:	6923      	ldr	r3, [r4, #16]
 8000d30:	b943      	cbnz	r3, 8000d44 <__swsetup_r+0xa8>
 8000d32:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d36:	d1c4      	bne.n	8000cc2 <__swsetup_r+0x26>
 8000d38:	bd38      	pop	{r3, r4, r5, pc}
 8000d3a:	0781      	lsls	r1, r0, #30
 8000d3c:	bf58      	it	pl
 8000d3e:	6963      	ldrpl	r3, [r4, #20]
 8000d40:	60a3      	str	r3, [r4, #8]
 8000d42:	e7f4      	b.n	8000d2e <__swsetup_r+0x92>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e7f7      	b.n	8000d38 <__swsetup_r+0x9c>
 8000d48:	2000005c 	.word	0x2000005c

08000d4c <memset>:
 8000d4c:	4402      	add	r2, r0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d100      	bne.n	8000d56 <memset+0xa>
 8000d54:	4770      	bx	lr
 8000d56:	f803 1b01 	strb.w	r1, [r3], #1
 8000d5a:	e7f9      	b.n	8000d50 <memset+0x4>

08000d5c <_close_r>:
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4d06      	ldr	r5, [pc, #24]	; (8000d78 <_close_r+0x1c>)
 8000d60:	2300      	movs	r3, #0
 8000d62:	4604      	mov	r4, r0
 8000d64:	4608      	mov	r0, r1
 8000d66:	602b      	str	r3, [r5, #0]
 8000d68:	f7ff fd7b 	bl	8000862 <_close>
 8000d6c:	1c43      	adds	r3, r0, #1
 8000d6e:	d102      	bne.n	8000d76 <_close_r+0x1a>
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	b103      	cbz	r3, 8000d76 <_close_r+0x1a>
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	20000210 	.word	0x20000210

08000d7c <_lseek_r>:
 8000d7c:	b538      	push	{r3, r4, r5, lr}
 8000d7e:	4d07      	ldr	r5, [pc, #28]	; (8000d9c <_lseek_r+0x20>)
 8000d80:	4604      	mov	r4, r0
 8000d82:	4608      	mov	r0, r1
 8000d84:	4611      	mov	r1, r2
 8000d86:	2200      	movs	r2, #0
 8000d88:	602a      	str	r2, [r5, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f7ff fd8d 	bl	80008aa <_lseek>
 8000d90:	1c43      	adds	r3, r0, #1
 8000d92:	d102      	bne.n	8000d9a <_lseek_r+0x1e>
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	b103      	cbz	r3, 8000d9a <_lseek_r+0x1e>
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	bd38      	pop	{r3, r4, r5, pc}
 8000d9c:	20000210 	.word	0x20000210

08000da0 <_read_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4d07      	ldr	r5, [pc, #28]	; (8000dc0 <_read_r+0x20>)
 8000da4:	4604      	mov	r4, r0
 8000da6:	4608      	mov	r0, r1
 8000da8:	4611      	mov	r1, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	602a      	str	r2, [r5, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	f7ff fd1e 	bl	80007f0 <_read>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	d102      	bne.n	8000dbe <_read_r+0x1e>
 8000db8:	682b      	ldr	r3, [r5, #0]
 8000dba:	b103      	cbz	r3, 8000dbe <_read_r+0x1e>
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	20000210 	.word	0x20000210

08000dc4 <_write_r>:
 8000dc4:	b538      	push	{r3, r4, r5, lr}
 8000dc6:	4d07      	ldr	r5, [pc, #28]	; (8000de4 <_write_r+0x20>)
 8000dc8:	4604      	mov	r4, r0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	4611      	mov	r1, r2
 8000dce:	2200      	movs	r2, #0
 8000dd0:	602a      	str	r2, [r5, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f7ff fd29 	bl	800082a <_write>
 8000dd8:	1c43      	adds	r3, r0, #1
 8000dda:	d102      	bne.n	8000de2 <_write_r+0x1e>
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	b103      	cbz	r3, 8000de2 <_write_r+0x1e>
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	bd38      	pop	{r3, r4, r5, pc}
 8000de4:	20000210 	.word	0x20000210

08000de8 <__errno>:
 8000de8:	4b01      	ldr	r3, [pc, #4]	; (8000df0 <__errno+0x8>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000005c 	.word	0x2000005c

08000df4 <__libc_init_array>:
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	4d0d      	ldr	r5, [pc, #52]	; (8000e2c <__libc_init_array+0x38>)
 8000df8:	4c0d      	ldr	r4, [pc, #52]	; (8000e30 <__libc_init_array+0x3c>)
 8000dfa:	1b64      	subs	r4, r4, r5
 8000dfc:	10a4      	asrs	r4, r4, #2
 8000dfe:	2600      	movs	r6, #0
 8000e00:	42a6      	cmp	r6, r4
 8000e02:	d109      	bne.n	8000e18 <__libc_init_array+0x24>
 8000e04:	4d0b      	ldr	r5, [pc, #44]	; (8000e34 <__libc_init_array+0x40>)
 8000e06:	4c0c      	ldr	r4, [pc, #48]	; (8000e38 <__libc_init_array+0x44>)
 8000e08:	f000 fa4e 	bl	80012a8 <_init>
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	10a4      	asrs	r4, r4, #2
 8000e10:	2600      	movs	r6, #0
 8000e12:	42a6      	cmp	r6, r4
 8000e14:	d105      	bne.n	8000e22 <__libc_init_array+0x2e>
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
 8000e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1c:	4798      	blx	r3
 8000e1e:	3601      	adds	r6, #1
 8000e20:	e7ee      	b.n	8000e00 <__libc_init_array+0xc>
 8000e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e26:	4798      	blx	r3
 8000e28:	3601      	adds	r6, #1
 8000e2a:	e7f2      	b.n	8000e12 <__libc_init_array+0x1e>
 8000e2c:	08001304 	.word	0x08001304
 8000e30:	08001304 	.word	0x08001304
 8000e34:	08001304 	.word	0x08001304
 8000e38:	08001308 	.word	0x08001308

08000e3c <__retarget_lock_acquire_recursive>:
 8000e3c:	4770      	bx	lr

08000e3e <__retarget_lock_release_recursive>:
 8000e3e:	4770      	bx	lr

08000e40 <_free_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4605      	mov	r5, r0
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d041      	beq.n	8000ecc <_free_r+0x8c>
 8000e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e4c:	1f0c      	subs	r4, r1, #4
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bfb8      	it	lt
 8000e52:	18e4      	addlt	r4, r4, r3
 8000e54:	f000 f8de 	bl	8001014 <__malloc_lock>
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <_free_r+0x90>)
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	b933      	cbnz	r3, 8000e6c <_free_r+0x2c>
 8000e5e:	6063      	str	r3, [r4, #4]
 8000e60:	6014      	str	r4, [r2, #0]
 8000e62:	4628      	mov	r0, r5
 8000e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e68:	f000 b8da 	b.w	8001020 <__malloc_unlock>
 8000e6c:	42a3      	cmp	r3, r4
 8000e6e:	d908      	bls.n	8000e82 <_free_r+0x42>
 8000e70:	6820      	ldr	r0, [r4, #0]
 8000e72:	1821      	adds	r1, r4, r0
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf01      	itttt	eq
 8000e78:	6819      	ldreq	r1, [r3, #0]
 8000e7a:	685b      	ldreq	r3, [r3, #4]
 8000e7c:	1809      	addeq	r1, r1, r0
 8000e7e:	6021      	streq	r1, [r4, #0]
 8000e80:	e7ed      	b.n	8000e5e <_free_r+0x1e>
 8000e82:	461a      	mov	r2, r3
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	b10b      	cbz	r3, 8000e8c <_free_r+0x4c>
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d9fa      	bls.n	8000e82 <_free_r+0x42>
 8000e8c:	6811      	ldr	r1, [r2, #0]
 8000e8e:	1850      	adds	r0, r2, r1
 8000e90:	42a0      	cmp	r0, r4
 8000e92:	d10b      	bne.n	8000eac <_free_r+0x6c>
 8000e94:	6820      	ldr	r0, [r4, #0]
 8000e96:	4401      	add	r1, r0
 8000e98:	1850      	adds	r0, r2, r1
 8000e9a:	4283      	cmp	r3, r0
 8000e9c:	6011      	str	r1, [r2, #0]
 8000e9e:	d1e0      	bne.n	8000e62 <_free_r+0x22>
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	6053      	str	r3, [r2, #4]
 8000ea6:	4408      	add	r0, r1
 8000ea8:	6010      	str	r0, [r2, #0]
 8000eaa:	e7da      	b.n	8000e62 <_free_r+0x22>
 8000eac:	d902      	bls.n	8000eb4 <_free_r+0x74>
 8000eae:	230c      	movs	r3, #12
 8000eb0:	602b      	str	r3, [r5, #0]
 8000eb2:	e7d6      	b.n	8000e62 <_free_r+0x22>
 8000eb4:	6820      	ldr	r0, [r4, #0]
 8000eb6:	1821      	adds	r1, r4, r0
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf04      	itt	eq
 8000ebc:	6819      	ldreq	r1, [r3, #0]
 8000ebe:	685b      	ldreq	r3, [r3, #4]
 8000ec0:	6063      	str	r3, [r4, #4]
 8000ec2:	bf04      	itt	eq
 8000ec4:	1809      	addeq	r1, r1, r0
 8000ec6:	6021      	streq	r1, [r4, #0]
 8000ec8:	6054      	str	r4, [r2, #4]
 8000eca:	e7ca      	b.n	8000e62 <_free_r+0x22>
 8000ecc:	bd38      	pop	{r3, r4, r5, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000218 	.word	0x20000218

08000ed4 <sbrk_aligned>:
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	4e0e      	ldr	r6, [pc, #56]	; (8000f10 <sbrk_aligned+0x3c>)
 8000ed8:	460c      	mov	r4, r1
 8000eda:	6831      	ldr	r1, [r6, #0]
 8000edc:	4605      	mov	r5, r0
 8000ede:	b911      	cbnz	r1, 8000ee6 <sbrk_aligned+0x12>
 8000ee0:	f000 f9d2 	bl	8001288 <_sbrk_r>
 8000ee4:	6030      	str	r0, [r6, #0]
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	4628      	mov	r0, r5
 8000eea:	f000 f9cd 	bl	8001288 <_sbrk_r>
 8000eee:	1c43      	adds	r3, r0, #1
 8000ef0:	d00a      	beq.n	8000f08 <sbrk_aligned+0x34>
 8000ef2:	1cc4      	adds	r4, r0, #3
 8000ef4:	f024 0403 	bic.w	r4, r4, #3
 8000ef8:	42a0      	cmp	r0, r4
 8000efa:	d007      	beq.n	8000f0c <sbrk_aligned+0x38>
 8000efc:	1a21      	subs	r1, r4, r0
 8000efe:	4628      	mov	r0, r5
 8000f00:	f000 f9c2 	bl	8001288 <_sbrk_r>
 8000f04:	3001      	adds	r0, #1
 8000f06:	d101      	bne.n	8000f0c <sbrk_aligned+0x38>
 8000f08:	f04f 34ff 	mov.w	r4, #4294967295
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	2000021c 	.word	0x2000021c

08000f14 <_malloc_r>:
 8000f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f18:	1ccd      	adds	r5, r1, #3
 8000f1a:	f025 0503 	bic.w	r5, r5, #3
 8000f1e:	3508      	adds	r5, #8
 8000f20:	2d0c      	cmp	r5, #12
 8000f22:	bf38      	it	cc
 8000f24:	250c      	movcc	r5, #12
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	4607      	mov	r7, r0
 8000f2a:	db01      	blt.n	8000f30 <_malloc_r+0x1c>
 8000f2c:	42a9      	cmp	r1, r5
 8000f2e:	d905      	bls.n	8000f3c <_malloc_r+0x28>
 8000f30:	230c      	movs	r3, #12
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	2600      	movs	r6, #0
 8000f36:	4630      	mov	r0, r6
 8000f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001010 <_malloc_r+0xfc>
 8000f40:	f000 f868 	bl	8001014 <__malloc_lock>
 8000f44:	f8d8 3000 	ldr.w	r3, [r8]
 8000f48:	461c      	mov	r4, r3
 8000f4a:	bb5c      	cbnz	r4, 8000fa4 <_malloc_r+0x90>
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	4638      	mov	r0, r7
 8000f50:	f7ff ffc0 	bl	8000ed4 <sbrk_aligned>
 8000f54:	1c43      	adds	r3, r0, #1
 8000f56:	4604      	mov	r4, r0
 8000f58:	d155      	bne.n	8001006 <_malloc_r+0xf2>
 8000f5a:	f8d8 4000 	ldr.w	r4, [r8]
 8000f5e:	4626      	mov	r6, r4
 8000f60:	2e00      	cmp	r6, #0
 8000f62:	d145      	bne.n	8000ff0 <_malloc_r+0xdc>
 8000f64:	2c00      	cmp	r4, #0
 8000f66:	d048      	beq.n	8000ffa <_malloc_r+0xe6>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	eb04 0903 	add.w	r9, r4, r3
 8000f72:	f000 f989 	bl	8001288 <_sbrk_r>
 8000f76:	4581      	cmp	r9, r0
 8000f78:	d13f      	bne.n	8000ffa <_malloc_r+0xe6>
 8000f7a:	6821      	ldr	r1, [r4, #0]
 8000f7c:	1a6d      	subs	r5, r5, r1
 8000f7e:	4629      	mov	r1, r5
 8000f80:	4638      	mov	r0, r7
 8000f82:	f7ff ffa7 	bl	8000ed4 <sbrk_aligned>
 8000f86:	3001      	adds	r0, #1
 8000f88:	d037      	beq.n	8000ffa <_malloc_r+0xe6>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	442b      	add	r3, r5
 8000f8e:	6023      	str	r3, [r4, #0]
 8000f90:	f8d8 3000 	ldr.w	r3, [r8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d038      	beq.n	800100a <_malloc_r+0xf6>
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	42a2      	cmp	r2, r4
 8000f9c:	d12b      	bne.n	8000ff6 <_malloc_r+0xe2>
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	e00f      	b.n	8000fc4 <_malloc_r+0xb0>
 8000fa4:	6822      	ldr	r2, [r4, #0]
 8000fa6:	1b52      	subs	r2, r2, r5
 8000fa8:	d41f      	bmi.n	8000fea <_malloc_r+0xd6>
 8000faa:	2a0b      	cmp	r2, #11
 8000fac:	d917      	bls.n	8000fde <_malloc_r+0xca>
 8000fae:	1961      	adds	r1, r4, r5
 8000fb0:	42a3      	cmp	r3, r4
 8000fb2:	6025      	str	r5, [r4, #0]
 8000fb4:	bf18      	it	ne
 8000fb6:	6059      	strne	r1, [r3, #4]
 8000fb8:	6863      	ldr	r3, [r4, #4]
 8000fba:	bf08      	it	eq
 8000fbc:	f8c8 1000 	streq.w	r1, [r8]
 8000fc0:	5162      	str	r2, [r4, r5]
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	f104 060b 	add.w	r6, r4, #11
 8000fca:	f000 f829 	bl	8001020 <__malloc_unlock>
 8000fce:	f026 0607 	bic.w	r6, r6, #7
 8000fd2:	1d23      	adds	r3, r4, #4
 8000fd4:	1af2      	subs	r2, r6, r3
 8000fd6:	d0ae      	beq.n	8000f36 <_malloc_r+0x22>
 8000fd8:	1b9b      	subs	r3, r3, r6
 8000fda:	50a3      	str	r3, [r4, r2]
 8000fdc:	e7ab      	b.n	8000f36 <_malloc_r+0x22>
 8000fde:	42a3      	cmp	r3, r4
 8000fe0:	6862      	ldr	r2, [r4, #4]
 8000fe2:	d1dd      	bne.n	8000fa0 <_malloc_r+0x8c>
 8000fe4:	f8c8 2000 	str.w	r2, [r8]
 8000fe8:	e7ec      	b.n	8000fc4 <_malloc_r+0xb0>
 8000fea:	4623      	mov	r3, r4
 8000fec:	6864      	ldr	r4, [r4, #4]
 8000fee:	e7ac      	b.n	8000f4a <_malloc_r+0x36>
 8000ff0:	4634      	mov	r4, r6
 8000ff2:	6876      	ldr	r6, [r6, #4]
 8000ff4:	e7b4      	b.n	8000f60 <_malloc_r+0x4c>
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	e7cc      	b.n	8000f94 <_malloc_r+0x80>
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4638      	mov	r0, r7
 8001000:	f000 f80e 	bl	8001020 <__malloc_unlock>
 8001004:	e797      	b.n	8000f36 <_malloc_r+0x22>
 8001006:	6025      	str	r5, [r4, #0]
 8001008:	e7dc      	b.n	8000fc4 <_malloc_r+0xb0>
 800100a:	605b      	str	r3, [r3, #4]
 800100c:	deff      	udf	#255	; 0xff
 800100e:	bf00      	nop
 8001010:	20000218 	.word	0x20000218

08001014 <__malloc_lock>:
 8001014:	4801      	ldr	r0, [pc, #4]	; (800101c <__malloc_lock+0x8>)
 8001016:	f7ff bf11 	b.w	8000e3c <__retarget_lock_acquire_recursive>
 800101a:	bf00      	nop
 800101c:	20000214 	.word	0x20000214

08001020 <__malloc_unlock>:
 8001020:	4801      	ldr	r0, [pc, #4]	; (8001028 <__malloc_unlock+0x8>)
 8001022:	f7ff bf0c 	b.w	8000e3e <__retarget_lock_release_recursive>
 8001026:	bf00      	nop
 8001028:	20000214 	.word	0x20000214

0800102c <__sflush_r>:
 800102c:	898a      	ldrh	r2, [r1, #12]
 800102e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001030:	4605      	mov	r5, r0
 8001032:	0710      	lsls	r0, r2, #28
 8001034:	460c      	mov	r4, r1
 8001036:	d457      	bmi.n	80010e8 <__sflush_r+0xbc>
 8001038:	684b      	ldr	r3, [r1, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dc04      	bgt.n	8001048 <__sflush_r+0x1c>
 800103e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001040:	2b00      	cmp	r3, #0
 8001042:	dc01      	bgt.n	8001048 <__sflush_r+0x1c>
 8001044:	2000      	movs	r0, #0
 8001046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800104a:	2e00      	cmp	r6, #0
 800104c:	d0fa      	beq.n	8001044 <__sflush_r+0x18>
 800104e:	2300      	movs	r3, #0
 8001050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001054:	682f      	ldr	r7, [r5, #0]
 8001056:	6a21      	ldr	r1, [r4, #32]
 8001058:	602b      	str	r3, [r5, #0]
 800105a:	d032      	beq.n	80010c2 <__sflush_r+0x96>
 800105c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800105e:	89a3      	ldrh	r3, [r4, #12]
 8001060:	075a      	lsls	r2, r3, #29
 8001062:	d505      	bpl.n	8001070 <__sflush_r+0x44>
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	1ac0      	subs	r0, r0, r3
 8001068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800106a:	b10b      	cbz	r3, 8001070 <__sflush_r+0x44>
 800106c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800106e:	1ac0      	subs	r0, r0, r3
 8001070:	2300      	movs	r3, #0
 8001072:	4602      	mov	r2, r0
 8001074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001076:	6a21      	ldr	r1, [r4, #32]
 8001078:	4628      	mov	r0, r5
 800107a:	47b0      	blx	r6
 800107c:	1c43      	adds	r3, r0, #1
 800107e:	89a3      	ldrh	r3, [r4, #12]
 8001080:	d106      	bne.n	8001090 <__sflush_r+0x64>
 8001082:	6829      	ldr	r1, [r5, #0]
 8001084:	291d      	cmp	r1, #29
 8001086:	d82b      	bhi.n	80010e0 <__sflush_r+0xb4>
 8001088:	4a28      	ldr	r2, [pc, #160]	; (800112c <__sflush_r+0x100>)
 800108a:	410a      	asrs	r2, r1
 800108c:	07d6      	lsls	r6, r2, #31
 800108e:	d427      	bmi.n	80010e0 <__sflush_r+0xb4>
 8001090:	2200      	movs	r2, #0
 8001092:	6062      	str	r2, [r4, #4]
 8001094:	04d9      	lsls	r1, r3, #19
 8001096:	6922      	ldr	r2, [r4, #16]
 8001098:	6022      	str	r2, [r4, #0]
 800109a:	d504      	bpl.n	80010a6 <__sflush_r+0x7a>
 800109c:	1c42      	adds	r2, r0, #1
 800109e:	d101      	bne.n	80010a4 <__sflush_r+0x78>
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	b903      	cbnz	r3, 80010a6 <__sflush_r+0x7a>
 80010a4:	6560      	str	r0, [r4, #84]	; 0x54
 80010a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010a8:	602f      	str	r7, [r5, #0]
 80010aa:	2900      	cmp	r1, #0
 80010ac:	d0ca      	beq.n	8001044 <__sflush_r+0x18>
 80010ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d002      	beq.n	80010bc <__sflush_r+0x90>
 80010b6:	4628      	mov	r0, r5
 80010b8:	f7ff fec2 	bl	8000e40 <_free_r>
 80010bc:	2000      	movs	r0, #0
 80010be:	6360      	str	r0, [r4, #52]	; 0x34
 80010c0:	e7c1      	b.n	8001046 <__sflush_r+0x1a>
 80010c2:	2301      	movs	r3, #1
 80010c4:	4628      	mov	r0, r5
 80010c6:	47b0      	blx	r6
 80010c8:	1c41      	adds	r1, r0, #1
 80010ca:	d1c8      	bne.n	800105e <__sflush_r+0x32>
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0c5      	beq.n	800105e <__sflush_r+0x32>
 80010d2:	2b1d      	cmp	r3, #29
 80010d4:	d001      	beq.n	80010da <__sflush_r+0xae>
 80010d6:	2b16      	cmp	r3, #22
 80010d8:	d101      	bne.n	80010de <__sflush_r+0xb2>
 80010da:	602f      	str	r7, [r5, #0]
 80010dc:	e7b2      	b.n	8001044 <__sflush_r+0x18>
 80010de:	89a3      	ldrh	r3, [r4, #12]
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	81a3      	strh	r3, [r4, #12]
 80010e6:	e7ae      	b.n	8001046 <__sflush_r+0x1a>
 80010e8:	690f      	ldr	r7, [r1, #16]
 80010ea:	2f00      	cmp	r7, #0
 80010ec:	d0aa      	beq.n	8001044 <__sflush_r+0x18>
 80010ee:	0793      	lsls	r3, r2, #30
 80010f0:	680e      	ldr	r6, [r1, #0]
 80010f2:	bf08      	it	eq
 80010f4:	694b      	ldreq	r3, [r1, #20]
 80010f6:	600f      	str	r7, [r1, #0]
 80010f8:	bf18      	it	ne
 80010fa:	2300      	movne	r3, #0
 80010fc:	1bf6      	subs	r6, r6, r7
 80010fe:	608b      	str	r3, [r1, #8]
 8001100:	2e00      	cmp	r6, #0
 8001102:	dd9f      	ble.n	8001044 <__sflush_r+0x18>
 8001104:	6a21      	ldr	r1, [r4, #32]
 8001106:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800110a:	4633      	mov	r3, r6
 800110c:	463a      	mov	r2, r7
 800110e:	4628      	mov	r0, r5
 8001110:	47e0      	blx	ip
 8001112:	2800      	cmp	r0, #0
 8001114:	dc06      	bgt.n	8001124 <__sflush_r+0xf8>
 8001116:	89a3      	ldrh	r3, [r4, #12]
 8001118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800111c:	81a3      	strh	r3, [r4, #12]
 800111e:	f04f 30ff 	mov.w	r0, #4294967295
 8001122:	e790      	b.n	8001046 <__sflush_r+0x1a>
 8001124:	4407      	add	r7, r0
 8001126:	1a36      	subs	r6, r6, r0
 8001128:	e7ea      	b.n	8001100 <__sflush_r+0xd4>
 800112a:	bf00      	nop
 800112c:	dfbffffe 	.word	0xdfbffffe

08001130 <_fflush_r>:
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	690b      	ldr	r3, [r1, #16]
 8001134:	4605      	mov	r5, r0
 8001136:	460c      	mov	r4, r1
 8001138:	b913      	cbnz	r3, 8001140 <_fflush_r+0x10>
 800113a:	2500      	movs	r5, #0
 800113c:	4628      	mov	r0, r5
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	b118      	cbz	r0, 800114a <_fflush_r+0x1a>
 8001142:	6a03      	ldr	r3, [r0, #32]
 8001144:	b90b      	cbnz	r3, 800114a <_fflush_r+0x1a>
 8001146:	f7ff fc97 	bl	8000a78 <__sinit>
 800114a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f3      	beq.n	800113a <_fflush_r+0xa>
 8001152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001154:	07d0      	lsls	r0, r2, #31
 8001156:	d404      	bmi.n	8001162 <_fflush_r+0x32>
 8001158:	0599      	lsls	r1, r3, #22
 800115a:	d402      	bmi.n	8001162 <_fflush_r+0x32>
 800115c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800115e:	f7ff fe6d 	bl	8000e3c <__retarget_lock_acquire_recursive>
 8001162:	4628      	mov	r0, r5
 8001164:	4621      	mov	r1, r4
 8001166:	f7ff ff61 	bl	800102c <__sflush_r>
 800116a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800116c:	07da      	lsls	r2, r3, #31
 800116e:	4605      	mov	r5, r0
 8001170:	d4e4      	bmi.n	800113c <_fflush_r+0xc>
 8001172:	89a3      	ldrh	r3, [r4, #12]
 8001174:	059b      	lsls	r3, r3, #22
 8001176:	d4e1      	bmi.n	800113c <_fflush_r+0xc>
 8001178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800117a:	f7ff fe60 	bl	8000e3e <__retarget_lock_release_recursive>
 800117e:	e7dd      	b.n	800113c <_fflush_r+0xc>

08001180 <__swhatbuf_r>:
 8001180:	b570      	push	{r4, r5, r6, lr}
 8001182:	460c      	mov	r4, r1
 8001184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001188:	2900      	cmp	r1, #0
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	4615      	mov	r5, r2
 800118e:	461e      	mov	r6, r3
 8001190:	da0d      	bge.n	80011ae <__swhatbuf_r+0x2e>
 8001192:	89a3      	ldrh	r3, [r4, #12]
 8001194:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001198:	f04f 0100 	mov.w	r1, #0
 800119c:	bf0c      	ite	eq
 800119e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80011a2:	2340      	movne	r3, #64	; 0x40
 80011a4:	2000      	movs	r0, #0
 80011a6:	6031      	str	r1, [r6, #0]
 80011a8:	602b      	str	r3, [r5, #0]
 80011aa:	b016      	add	sp, #88	; 0x58
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
 80011ae:	466a      	mov	r2, sp
 80011b0:	f000 f848 	bl	8001244 <_fstat_r>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	dbec      	blt.n	8001192 <__swhatbuf_r+0x12>
 80011b8:	9901      	ldr	r1, [sp, #4]
 80011ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80011be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80011c2:	4259      	negs	r1, r3
 80011c4:	4159      	adcs	r1, r3
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	e7eb      	b.n	80011a4 <__swhatbuf_r+0x24>

080011cc <__smakebuf_r>:
 80011cc:	898b      	ldrh	r3, [r1, #12]
 80011ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011d0:	079d      	lsls	r5, r3, #30
 80011d2:	4606      	mov	r6, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	d507      	bpl.n	80011e8 <__smakebuf_r+0x1c>
 80011d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	6123      	str	r3, [r4, #16]
 80011e0:	2301      	movs	r3, #1
 80011e2:	6163      	str	r3, [r4, #20]
 80011e4:	b002      	add	sp, #8
 80011e6:	bd70      	pop	{r4, r5, r6, pc}
 80011e8:	ab01      	add	r3, sp, #4
 80011ea:	466a      	mov	r2, sp
 80011ec:	f7ff ffc8 	bl	8001180 <__swhatbuf_r>
 80011f0:	9900      	ldr	r1, [sp, #0]
 80011f2:	4605      	mov	r5, r0
 80011f4:	4630      	mov	r0, r6
 80011f6:	f7ff fe8d 	bl	8000f14 <_malloc_r>
 80011fa:	b948      	cbnz	r0, 8001210 <__smakebuf_r+0x44>
 80011fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001200:	059a      	lsls	r2, r3, #22
 8001202:	d4ef      	bmi.n	80011e4 <__smakebuf_r+0x18>
 8001204:	f023 0303 	bic.w	r3, r3, #3
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	81a3      	strh	r3, [r4, #12]
 800120e:	e7e3      	b.n	80011d8 <__smakebuf_r+0xc>
 8001210:	89a3      	ldrh	r3, [r4, #12]
 8001212:	6020      	str	r0, [r4, #0]
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	81a3      	strh	r3, [r4, #12]
 800121a:	9b00      	ldr	r3, [sp, #0]
 800121c:	6163      	str	r3, [r4, #20]
 800121e:	9b01      	ldr	r3, [sp, #4]
 8001220:	6120      	str	r0, [r4, #16]
 8001222:	b15b      	cbz	r3, 800123c <__smakebuf_r+0x70>
 8001224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001228:	4630      	mov	r0, r6
 800122a:	f000 f81d 	bl	8001268 <_isatty_r>
 800122e:	b128      	cbz	r0, 800123c <__smakebuf_r+0x70>
 8001230:	89a3      	ldrh	r3, [r4, #12]
 8001232:	f023 0303 	bic.w	r3, r3, #3
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	81a3      	strh	r3, [r4, #12]
 800123c:	89a3      	ldrh	r3, [r4, #12]
 800123e:	431d      	orrs	r5, r3
 8001240:	81a5      	strh	r5, [r4, #12]
 8001242:	e7cf      	b.n	80011e4 <__smakebuf_r+0x18>

08001244 <_fstat_r>:
 8001244:	b538      	push	{r3, r4, r5, lr}
 8001246:	4d07      	ldr	r5, [pc, #28]	; (8001264 <_fstat_r+0x20>)
 8001248:	2300      	movs	r3, #0
 800124a:	4604      	mov	r4, r0
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	602b      	str	r3, [r5, #0]
 8001252:	f7ff fb11 	bl	8000878 <_fstat>
 8001256:	1c43      	adds	r3, r0, #1
 8001258:	d102      	bne.n	8001260 <_fstat_r+0x1c>
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	b103      	cbz	r3, 8001260 <_fstat_r+0x1c>
 800125e:	6023      	str	r3, [r4, #0]
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	bf00      	nop
 8001264:	20000210 	.word	0x20000210

08001268 <_isatty_r>:
 8001268:	b538      	push	{r3, r4, r5, lr}
 800126a:	4d06      	ldr	r5, [pc, #24]	; (8001284 <_isatty_r+0x1c>)
 800126c:	2300      	movs	r3, #0
 800126e:	4604      	mov	r4, r0
 8001270:	4608      	mov	r0, r1
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	f7ff fb0f 	bl	8000896 <_isatty>
 8001278:	1c43      	adds	r3, r0, #1
 800127a:	d102      	bne.n	8001282 <_isatty_r+0x1a>
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	b103      	cbz	r3, 8001282 <_isatty_r+0x1a>
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	bd38      	pop	{r3, r4, r5, pc}
 8001284:	20000210 	.word	0x20000210

08001288 <_sbrk_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d06      	ldr	r5, [pc, #24]	; (80012a4 <_sbrk_r+0x1c>)
 800128c:	2300      	movs	r3, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	f7ff fb16 	bl	80008c4 <_sbrk>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_sbrk_r+0x1a>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_sbrk_r+0x1a>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	20000210 	.word	0x20000210

080012a8 <_init>:
 80012a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012aa:	bf00      	nop
 80012ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ae:	bc08      	pop	{r3}
 80012b0:	469e      	mov	lr, r3
 80012b2:	4770      	bx	lr

080012b4 <_fini>:
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b6:	bf00      	nop
 80012b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ba:	bc08      	pop	{r3}
 80012bc:	469e      	mov	lr, r3
 80012be:	4770      	bx	lr
